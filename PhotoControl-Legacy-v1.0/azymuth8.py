#!/usr/bin/env python3
"""
Azimuth Image Processor - PyQt5 Version with Ukrainian Translation
Professional interface for processing azimuth grid images
"""

import sys
import os
import math
import tempfile
import json
from datetime import datetime
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QHBoxLayout, 
                             QVBoxLayout, QGridLayout, QPushButton, QLabel, 
                             QComboBox, QTextEdit, QScrollArea, QFrame,
                             QFileDialog, QMessageBox, QSplitter, QToolTip, QLineEdit,
                             QCheckBox, QDateEdit, QSizePolicy, QDialog, QFormLayout, QGroupBox, QDoubleSpinBox,
                             QDialogButtonBox, QTabWidget)
from PyQt5.QtCore import Qt, QSize, pyqtSignal, QTimer, QPoint, QDate
from PyQt5.QtGui import QPixmap, QFont
from PIL import Image, ImageDraw
from PIL import ImageFont

from translations import Translations
from widgets import ClickableLabel, VerticalThumbnailWidget
from image_processor import AzimuthImageProcessor
from documentation import DocumentationManager
from help_dialogs import AboutDialog

try:
    from docx import Document
    from docx.shared import Inches, Cm, Pt
    from docx.enum.text import WD_ALIGN_PARAGRAPH, WD_TAB_ALIGNMENT, WD_BREAK
    from docx.enum.table import WD_ALIGN_VERTICAL
    from docx.enum.section import WD_SECTION_START
    from docx.oxml.shared import OxmlElement, qn
    from docx.oxml.ns import qn
    from docx.oxml import parse_xml
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False

# ===== –ù–û–í–Ü –ö–û–ù–°–¢–ê–ù–¢–ò –î–õ–Ø –¢–ê–ë–õ–ò–¶–¨ 9x9 =====

ALBUM_LAYOUT = {
    # –†–æ–∑–º—ñ—Ä–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ A4 –≤ –º—ñ–ª—ñ–º–µ—Ç—Ä–∞—Ö
    'PAGE_WIDTH': 210,
    'PAGE_HEIGHT': 297,
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–ª—è –¥–ª—è —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Ç–∞ –æ–ø–∏—Å–æ–≤–æ—ó —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    'STANDARD_LEFT_MARGIN': 25,
    'STANDARD_RIGHT_MARGIN': 25, 
    'STANDARD_TOP_MARGIN': 10,
    'STANDARD_BOTTOM_MARGIN': 10,

    # –ù–û–í–Ü –ü–û–õ–Ø –î–õ–Ø –°–¢–û–†–Ü–ù–û–ö –ó –¢–ê–ë–õ–ò–¶–Ø–ú–ò (20–º–º –∑–≤–µ—Ä—Ö—É, 5–º–º —Å–ø—Ä–∞–≤–∞/–∑–Ω–∏–∑—É, 2.5–º–º –∑–ª—ñ–≤–∞)
    'TABLE_PAGES_LEFT_MARGIN': 2.5,    # 2.5–º–º –∑–ª—ñ–≤–∞
    'TABLE_PAGES_RIGHT_MARGIN': 5,     # 5–º–º —Å–ø—Ä–∞–≤–∞
    'TABLE_PAGES_TOP_MARGIN': 20,      # 20–º–º –∑–≤–µ—Ä—Ö—É
    'TABLE_PAGES_BOTTOM_MARGIN': 5,    # 5–º–º –∑–Ω–∏–∑—É
    
    # –ù–û–í–Ü –ü–ê–†–ê–ú–ï–¢–†–ò –î–õ–Ø –û–ö–†–ï–ú–ò–• –¢–ê–ë–õ–ò–¶–¨
    'TABLE_ROWS': 1,  # –¢–µ–ø–µ—Ä —Ç—ñ–ª—å–∫–∏ 1 —Ä—è–¥–æ–∫ –Ω–∞ —Ç–∞–±–ª–∏—Ü—é
    'TABLE_COLS': 3,
    
    # –í–∏—Å–æ—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (–≤ –º–º)
    'PARAGRAPH_HEIGHT': 5,    # –ü–∞—Ä–∞–≥—Ä–∞—Ñ-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á 10–º–º
    'TABLE_HEIGHT': 130,       # –í–∏—Å–æ—Ç–∞ —Ç–∞–±–ª–∏—Ü—ñ 130–º–º
    
    # –®–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫ (–≤ –º–º) - –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
    'COL_1_WIDTH': 25,      # –ü–µ—Ä—à–∞ –∫–æ–ª–æ–Ω–∫–∞
    'COL_2_WIDTH': 150,     # –î—Ä—É–≥–∞ –∫–æ–ª–æ–Ω–∫–∞ (–¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å)
    'COL_3_WIDTH': 30,      # –¢—Ä–µ—Ç—è –∫–æ–ª–æ–Ω–∫–∞
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å - –±–µ–∑ –∑–º—ñ–Ω
    'IMAGE_ASPECT_RATIO': 15/13,
    'IMAGE_WIDTH_CM': 14,  # –®–∏—Ä–∏–Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Å–º
}


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–ë–ï–ó –ó–ú–Ü–ù)
TITLE_PAGE = {
    'MAIN_FONT_SIZE': 28,
    'FOOTER_FONT_SIZE': 16,
    'TOP_SPACING': 3,
    'FOOTER_SPACING': 10,
    'FOOTER_LEFT_INDENT': 3.75,
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –æ–ø–∏—Å—É (–ë–ï–ó –ó–ú–Ü–ù)
DESCRIPTION_PAGE = {
    'HEADING_FONT_SIZE': 22,
    'TABLE_HEIGHT': 1.7,
    'COL_WIDTHS': [0.84, 3.43, 2.69, 2.54, 2.77, 2.27],
    'HEADERS': [
        "‚Ññ –ø–ø",
        "–ù–∞–∑–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", 
        "–û–±–ª—ñ–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä",
        "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–∫—É—à—ñ–≤ (–∑–Ω—ñ–º–∫—ñ–≤)",
        "–ì—Ä–∏—Ñ —Å–µ–∫—Ä–µ—Ç–Ω–æ—Å—Ç—ñ",
        "–ü—Ä–∏–º—ñ—Ç–∫–∞"
    ]
}

def mm_to_cm(mm):
    """–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–ª—ñ–º–µ—Ç—Ä—ñ–≤ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∏ –¥–ª—è docx"""
    return mm / 10.0

def format_ukrainian_date(date_obj):
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –ø–æ-—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏ –¥–ª—è —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
    try:
        if isinstance(date_obj, str):
            from datetime import datetime
            date_obj = datetime.strptime(date_obj, "%Y-%m-%d")
        
        months = {
            1: '—Å—ñ—á–Ω—è', 2: '–ª—é—Ç–æ–≥–æ', 3: '–±–µ—Ä–µ–∑–Ω—è', 4: '–∫–≤—ñ—Ç–Ω—è',
            5: '—Ç—Ä–∞–≤–Ω—è', 6: '—á–µ—Ä–≤–Ω—è', 7: '–ª–∏–ø–Ω—è', 8: '—Å–µ—Ä–ø–Ω—è',
            9: '–≤–µ—Ä–µ—Å–Ω—è', 10: '–∂–æ–≤—Ç–Ω—è', 11: '–ª–∏—Å—Ç–æ–ø–∞–¥–∞', 12: '–≥—Ä—É–¥–Ω—è'
        }
        
        day = date_obj.day
        month = months[date_obj.month]
        year = date_obj.year
        
        return f'{day} {month} {year} —Ä–æ–∫—É'
    except:
        return "–¥–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞"

def get_default_unit_info():
    """–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —á–∞—Å—Ç–∏–Ω—É"""
    return "–ê0000"

def get_default_commander_info():
    """–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–∞–Ω–¥–∏—Ä–∞"""
    return {
        'rank': '–ø–æ–ª–∫–æ–≤–Ω–∏–∫',
        'name': '–ü.–ü. –ü–ï–¢–†–ï–ù–ö–û'
    }

def get_default_responsible_info():
    """–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏—Ö –æ—Å—ñ–±"""
    return {
        'responsible': {'rank': '–º–∞–π–æ—Ä', 'name': '–Ü.–Ü. –Ü–í–ê–ù–ï–ù–ö–û'},
        'assistant': {'rank': '—Å—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', 'name': '–°.–°. –°–ò–î–û–†–ï–ù–ö–û'},
        'secretary': {'rank': '—Å—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', 'name': '–°.–°. –°–ò–î–û–†–ï–ù–ö–û'}
    }

def set_a4_page_format(section):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É A4 –¥–ª—è —Å–µ–∫—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—É"""
    try:
        from docx.shared import Cm
        from docx.enum.section import WD_ORIENTATION
        
        # –¢–æ—á–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ A4 –∑–≥—ñ–¥–Ω–æ –∑ ISO 216
        section.page_width = Cm(21.0)   # 210–º–º = 21.0—Å–º
        section.page_height = Cm(29.7)  # 297–º–º = 29.7—Å–º
        section.orientation = WD_ORIENTATION.PORTRAIT
        
        print(f"‚úì A4 format set: {section.page_width.cm:.1f} x {section.page_height.cm:.1f} cm")
        
    except Exception as e:
        print(f"‚úó Error setting A4 format: {e}")

def create_complete_album(processed_images, title_data, file_path):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –∞–ª—å–±–æ–º—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–æ–ª—è–º–∏ —Ç–∞ –ø—ñ–¥–ø–∏—Å–æ–º –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –æ–ø–∏—Å—É"""
    try:
        doc = Document()
        
        print("=== Creating Complete Album with Description Page Signature ===")
        
        # 1. –¢–ò–¢–£–õ–¨–ù–ê –°–¢–û–†–Ü–ù–ö–ê (–ø–æ–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—Ç—å—Å—è –≤ create_title_page)
        print("1. Creating title page...")
        create_title_page(doc, title_data)
        
        # 2. –°–¢–û–†–Ü–ù–ö–ê –û–ü–ò–°–£ –ó –ü–Ü–î–ü–ò–°–û–ú (–ù–û–í–ê –°–ï–ö–¶–Ü–Ø –∑ —Ä–æ–∑—Ä–∏–≤–æ–º —Å—Ç–æ—Ä—ñ–Ω–∫–∏)
        print("2. Creating description page with signature...")
        desc_section = doc.add_section(WD_SECTION_START.NEW_PAGE)
        set_a4_page_format(desc_section)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª—è –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –æ–ø–∏—Å—É
        desc_section.left_margin = Cm(2.0)    # 2—Å–º –ª—ñ–≤–µ –ø–æ–ª–µ
        desc_section.top_margin = Cm(2.0)     # 2—Å–º –≤–µ—Ä—Ö–Ω—î –ø–æ–ª–µ  
        desc_section.right_margin = Cm(1.0)   # 1—Å–º –ø—Ä–∞–≤–µ –ø–æ–ª–µ
        desc_section.bottom_margin = Cm(1.0)  # 1—Å–º –Ω–∏–∂–Ω—î –ø–æ–ª–µ
        
        # –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ù–û–í–£ –§–£–ù–ö–¶–Ü–Æ –ó –ü–Ü–î–ü–ò–°–û–ú
        create_description_page_with_signature(doc, title_data)
        
        # 3. –°–¢–û–†–Ü–ù–ö–ò –ó –¢–ê–ë–õ–ò–¶–Ø–ú–ò
        print("3. Creating table pages...")
        create_new_structure_pages(doc, processed_images)
        
        doc.save(file_path)
        print(f"‚úì Complete album with signature saved: {file_path}")
        
        return True
    except Exception as e:
        print(f"‚úó Error creating complete album: {e}")
        return False


def create_description_page_with_signature(doc, title_data):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –æ–ø–∏—Å—É –∑ –ø—ñ–¥–ø–∏—Å–æ–º –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –≥—Ä—É–ø–∏"""
    try:
        print("üìã Creating description page with signature")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø—ñ–¥–ø–∏—Å—É
        unit_info = title_data.get('unit_info', '–ê0000')
        signature_info = title_data.get('signature_info', {
            'rank': '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç',
            'name': '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–µ–Ω–∫–æ'
        })
        
        print(f"‚úì Signature data: {signature_info['rank']} {signature_info['name']}")
        
        # üéØ –ó–ê–ì–û–õ–û–í–û–ö
        heading = doc.add_paragraph("–û–ø–∏—Å –∞–ª—å–±–æ–º—É —Ñ–æ—Ç–æ–∑–Ω—ñ–º–∫—ñ–≤")
        heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
        heading.paragraph_format.space_before = Pt(0)
        heading.paragraph_format.space_after = Pt(0)
        
        # –ü—Ä–æ—Å—Ç–∏–π —à—Ä–∏—Ñ—Ç –∑–∞–≥–æ–ª–æ–≤–∫—É
        if len(heading.runs) > 0:
            heading.runs[0].font.size = Pt(22)
            heading.runs[0].font.bold = True
            heading.runs[0].font.name = 'Arial'
        
        print(f"‚úì Title added")
        
        # üéØ –¢–ê–ë–õ–ò–¶–Ø –ó –¢–û–ß–ù–ò–ú–ò –†–û–ó–ú–Ü–†–ê–ú–ò
        table = doc.add_table(rows=6, cols=6)
        table.style = None
        table.alignment = WD_ALIGN_PARAGRAPH.LEFT
        
        # –í—ñ–¥—Å—Ç—É–ø —Ç–∞–±–ª–∏—Ü—ñ 1—Å–º –∑–ª—ñ–≤–∞
        from docx.oxml.shared import OxmlElement
        from docx.oxml.ns import qn
        
        tbl = table._tbl
        tblPr = tbl.tblPr
        tblInd = OxmlElement('w:tblInd')
        tblInd.set(qn('w:w'), str(int(1.0 * 567)))  # 1—Å–º = 567 DXA
        tblInd.set(qn('w:type'), 'dxa')
        tblPr.append(tblInd)
        
        print(f"‚úì Table created with 1cm left indent")
        
        # üéØ –ó–ê–ì–û–õ–û–í–ö–ò –¢–ê–ë–õ–ò–¶–Ü
        headers = [
            "‚Ññ –∑/–ø", "–ù–∞–∑–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", "–û–±–ª—ñ–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä",
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–∫—É—à—ñ–≤ (–∑–Ω—ñ–º–∫—ñ–≤)", "–ì—Ä–∏—Ñ —Å–µ–∫—Ä–µ—Ç–Ω–æ—Å—Ç—ñ", "–ü—Ä–∏–º—ñ—Ç–∫–∞"
        ]
        
        # –®–∏—Ä–∏–Ω–∏ —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤
        column_widths = [1.25, 3.0, 3.0, 3.0, 3.0, 3.0]  # –≤ —Å–º
        
        # üéØ –†–Ø–î–û–ö 1: –ó–ê–ì–û–õ–û–í–ö–ò - –í–ò–°–û–¢–ê 2–°–ú
        print("üìè Setting header row height to 2.0cm...")
        header_row = table.rows[0]
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¢–û–ß–ù–£ –≤–∏—Å–æ—Ç—É 2—Å–º
        header_row.height = Cm(2.0)  # 2—Å–º!
        
        # XML –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó –≤–∏—Å–æ—Ç–∏
        trPr = header_row._tr.trPr
        if trPr is None:
            trPr = OxmlElement('w:trPr')
            header_row._tr.append(trPr)
        
        trHeight = OxmlElement('w:trHeight')
        trHeight.set(qn('w:val'), str(int(2.0 * 567)))  # 2—Å–º –≤ DXA (567 DXA = 1—Å–º)
        trHeight.set(qn('w:hRule'), 'exact')  # –¢–û–ß–ù–ê –≤–∏—Å–æ—Ç–∞
        trPr.append(trHeight)
        
        print(f"‚úÖ Header row height set to EXACTLY 2.0cm")
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ó ARIAL 14PT
        for i, (cell, header_text, col_width) in enumerate(
            zip(header_row.cells, headers, column_widths)
        ):
            # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
            cell.width = Cm(col_width)
            
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
            try:
                cell.vertical_alignment = WD_ALIGN_VERTICAL.CENTER
            except AttributeError:
                pass
            
            # üéØ –ü–†–ê–í–ò–õ–¨–ù–ï –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø ARIAL 14PT
            para = cell.paragraphs[0]
            para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            # –û—á–∏—â—É—î–º–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π run –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
            para.clear()
            header_run = para.add_run(header_text)
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Arial 14pt
            try:
                header_run.font.name = 'Arial'
                header_run.font.size = Pt(14)
                header_run.font.bold = False
                print(f"  ‚úì Header '{header_text}': Arial 14pt applied")
            except Exception as font_error:
                print(f"  ‚ö†Ô∏è Font setting failed for '{header_text}': {font_error}")
                # Fallback - –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–µ–∑ cell.text
                cell.text = header_text
            
            # –†–∞–º–∫–∏
            set_cell_borders(cell, top=True, bottom=True, left=True, right=True)
        
        print(f"‚úì Header row filled with {len(headers)} columns - Arial 14pt applied")
        
        # üéØ –†–Ø–î–ö–ò 2-6: –î–ê–ù–Ü - –í–ò–°–û–¢–ê 0.6–°–ú –ö–û–ñ–ï–ù
        print("üìè Setting data rows height to 0.6cm each...")
        for row_index in range(1, 6):  # –†—è–¥–∫–∏ 1-5 (–¥—Ä—É–≥–∏–π-—à–æ—Å—Ç–∏–π)
            row = table.rows[row_index]
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¢–û–ß–ù–£ –≤–∏—Å–æ—Ç—É 0.6—Å–º
            row.height = Cm(0.6)  # 0.6—Å–º!
            
            # XML –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó –≤–∏—Å–æ—Ç–∏
            trPr = row._tr.trPr
            if trPr is None:
                trPr = OxmlElement('w:trPr')
                row._tr.append(trPr)
            
            trHeight = OxmlElement('w:trHeight')
            trHeight.set(qn('w:val'), str(int(0.6 * 567)))  # 0.6—Å–º –≤ DXA
            trHeight.set(qn('w:hRule'), 'exact')  # –¢–û–ß–ù–ê –≤–∏—Å–æ—Ç–∞
            trPr.append(trHeight)
            
            print(f"  ‚úÖ Row {row_index + 1} height set to EXACTLY 0.6cm")
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Ä–æ–∫
            for col_index, cell in enumerate(row.cells):
                # –®–∏—Ä–∏–Ω–∞ (—Ç–∞–∫–∞ –∂ —è–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É)
                cell.width = Cm(column_widths[col_index])
                
                # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
                try:
                    cell.vertical_alignment = WD_ALIGN_VERTICAL.CENTER
                except AttributeError:
                    pass
                
                # –ù—É–º–µ—Ä–∞—Ü—ñ—è –≤ –ø–µ—Ä—à–æ–º—É —Å—Ç–æ–≤–ø—á–∏–∫—É –ó ARIAL 14PT
                if col_index == 0:
                    para = cell.paragraphs[0]
                    para.alignment = WD_ALIGN_PARAGRAPH.CENTER
                    
                    # –û—á–∏—â—É—î–º–æ —ñ –¥–æ–¥–∞—î–º–æ –Ω–æ–º–µ—Ä –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
                    para.clear()
                    number_run = para.add_run(f"{row_index}.")
                    
                    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Arial 14pt –¥–ª—è –Ω–æ–º–µ—Ä—ñ–≤
                    try:
                        number_run.font.name = 'Arial'
                        number_run.font.size = Pt(14)
                        number_run.font.bold = False
                        print(f"    ‚úì Number {row_index}: Arial 14pt applied")
                    except Exception as font_error:
                        print(f"    ‚ö†Ô∏è Font setting failed for number {row_index}: {font_error}")
                        # Fallback
                        cell.text = f"{row_index}."
                else:
                    # –ü–æ—Ä–æ–∂–Ω—ñ –∫–æ–º—ñ—Ä–∫–∏
                    cell.text = ""
                
                # –†–∞–º–∫–∏
                set_cell_borders(cell, top=True, bottom=True, left=True, right=True)
        
        print(f"‚úì All data rows configured with 0.6cm height + Arial 14pt numbers")
        
        # ===== –ù–û–í–ò–ô –ë–õ–û–ö: 12 –ê–ë–ó–ê–¶–Ü–í-–†–û–ó–†–ò–í–Ü–í –ü–ï–†–ï–î –ü–Ü–î–ü–ò–°–û–ú =====
        print("üìù Adding 12 spacer paragraphs before signature...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∏–ª—å –¥–ª—è —Ä–æ–∑—Ä–∏–≤—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –æ–ø–∏—Å—É (—è–∫ –Ω–∞ —Ç–∏—Ç—É–ª—å–Ω—ñ–π)
        try:
            desc_spacer_style = doc.styles['DescriptionSpacer']
        except KeyError:
            from docx.enum.style import WD_STYLE_TYPE
            desc_spacer_style = doc.styles.add_style('DescriptionSpacer', WD_STYLE_TYPE.PARAGRAPH)
            desc_spacer_style.paragraph_format.first_line_indent = Cm(1)  # 1—Å–º –≤—ñ–¥—Å—Ç—É–ø –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
            desc_spacer_style.paragraph_format.line_spacing = 1.15  # 1,15 —è–∫ –ú–ù–û–ñ–ù–ò–ö
            desc_spacer_style.paragraph_format.space_before = Pt(0)
            desc_spacer_style.paragraph_format.space_after = Pt(0)
            desc_spacer_style.font.size = Pt(28)  # 28pt —è–∫ –≤–∫–∞–∑–∞–Ω–æ
            desc_spacer_style.font.name = 'Arial'
            print("‚úì Created DescriptionSpacer style: 28pt, 1.15x line spacing")
        
        # –î–æ–¥–∞—î–º–æ 12 –∞–±–∑–∞—Ü—ñ–≤-—Ä–æ–∑—Ä–∏–≤—ñ–≤
        for i in range(12):
            spacer_para = doc.add_paragraph(" ", style=desc_spacer_style)
            print(f"  ‚úì Added spacer paragraph {i+1}/12")
        
        print("‚úÖ All 12 spacer paragraphs added with 28pt size and 1.15x line spacing")
        
        # ===== –ù–û–í–ò–ô –ë–õ–û–ö: –ü–Ü–î–ü–ò–° –ù–ê–ß–ê–õ–¨–ù–ò–ö–ê –ì–†–£–ü–ò =====
        print("üìù Adding signature block...")
        
        # ===== –°–¢–í–û–†–Æ–Ñ–ú–û –°–¢–ò–õ–¨ –î–õ–Ø –ü–Ü–î–ü–ò–°–£ =====
        try:
            signature_style = doc.styles['DescriptionSignature']
        except KeyError:
            from docx.enum.style import WD_STYLE_TYPE
            signature_style = doc.styles.add_style('DescriptionSignature', WD_STYLE_TYPE.PARAGRAPH)
            signature_style.paragraph_format.first_line_indent = Cm(1)    # 1—Å–º –≤—ñ–¥—Å—Ç—É–ø –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
            signature_style.paragraph_format.left_indent = Pt(0)          # –ë–ï–ó –ª—ñ–≤–æ–≥–æ –≤—ñ–¥—Å—Ç—É–ø—É –∞–±–∑–∞—Ü—É
            signature_style.paragraph_format.line_spacing = 1.15          # 1,15 –º–Ω–æ–∂–Ω–∞
            signature_style.paragraph_format.space_before = Pt(0)
            signature_style.paragraph_format.space_after = Pt(0)
            signature_style.font.size = Pt(14)                           # Arial 14pt
            signature_style.font.name = 'Arial'
            signature_style.font.bold = False                            # –ó–≤–∏—á–∞–π–Ω–∏–π, –Ω–µ –∂–∏—Ä–Ω–∏–π
            print("‚úì Created DescriptionSignature style: Arial 14pt, 1.15x line spacing")
        
        # ===== –î–û–î–ê–Ñ–ú–û –¢–†–ò –ê–ë–ó–ê–¶–ò –ü–Ü–î–ü–ò–°–£ =====
        
        # 1. –ü–µ—Ä—à–∏–π –∞–±–∑–∞—Ü: "–ù–∞—á–∞–ª—å–Ω–∏–∫ –≥—Ä—É–ø–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ"
        para1 = doc.add_paragraph("–ù–∞—á–∞–ª—å–Ω–∏–∫ –≥—Ä—É–ø–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ", style=signature_style)
        print("‚úì Added paragraph 1: '–ù–∞—á–∞–ª—å–Ω–∏–∫ –≥—Ä—É–ø–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ'")
        
        # 2. –î—Ä—É–≥–∏–π –∞–±–∑–∞—Ü: "–∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –ê0000"
        para2 = doc.add_paragraph(f"–∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ {unit_info}", style=signature_style)
        print(f"‚úì Added paragraph 2: '–∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ {unit_info}'")
        
        # 3. –¢—Ä–µ—Ç—ñ–π –∞–±–∑–∞—Ü: "–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç ‚Üí ‚Üí ‚Üí ‚Üí ‚Üí ‚Üí ‚Üí –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–µ–Ω–∫–æ"
        para3 = doc.add_paragraph(style=signature_style)
        
        # –î–æ–¥–∞—î–º–æ –∑–≤–∞–Ω–Ω—è
        rank_run = para3.add_run(signature_info['rank'])
        rank_run.font.name = 'Arial'
        rank_run.font.size = Pt(14)
        rank_run.font.bold = False
        
        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—Ä–∏–≤ (—Å—Ç—Ä—ñ–ª–∫–∏ —è–∫ –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ) - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∞–±—É–ª—è—Ü—ñ—é
        try:
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ç–∞–±—É–ª—è—Ü—ñ—é –¥–ª—è —ñ–º–µ–Ω—ñ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É-—Å–ø—Ä–∞–≤–∞)
            tab_stops = para3.paragraph_format.tab_stops
            tab_stops.clear_all()
            tab_stops.add_tab_stop(Cm(13), WD_TAB_ALIGNMENT.RIGHT)  # –ü—Ä–∞–≤–∞ —Ç–∞–±—É–ª—è—Ü—ñ—è –Ω–∞ 13—Å–º
            
            # –î–æ–¥–∞—î–º–æ —Ç–∞–±—É–ª—è—Ü—ñ—é —Ç–∞ —ñ–º'—è
            name_run = para3.add_run(f"\t{signature_info['name']}")
            name_run.font.name = 'Arial'
            name_run.font.size = Pt(14)
            name_run.font.bold = False
            
            print(f"‚úì Added paragraph 3 with tabulation: '{signature_info['rank']}' ‚Üí '{signature_info['name']}'")
            
        except Exception as tab_error:
            print(f"‚ö†Ô∏è Tab setting failed, using simple arrows: {tab_error}")
            # Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç—Ä—ñ–ª–∫–∏
            arrow_run = para3.add_run(f" ‚Üí ‚Üí ‚Üí ‚Üí ‚Üí ‚Üí ‚Üí {signature_info['name']}")
            arrow_run.font.name = 'Arial'
            arrow_run.font.size = Pt(14)
            arrow_run.font.bold = False
        
        print("‚úÖ Signature block added successfully!")
        print(f"   ‚Ä¢ Unit: {unit_info}")
        print(f"   ‚Ä¢ Rank: {signature_info['rank']}")
        print(f"   ‚Ä¢ Name: {signature_info['name']}")
        print(f"   ‚Ä¢ Font: Arial 14pt, 1.15x line spacing, 1cm first line indent")
        
        # üéØ –ü–Ü–î–°–£–ú–û–ö –†–û–ó–ú–Ü–†–Ü–í
        total_height = 2.0 + (5 * 0.6)  # 2—Å–º + 5√ó0.6—Å–º = 5—Å–º
        print(f"üìä Table dimensions:")
        print(f"   ‚Ä¢ Header row: 2.0cm (Arial 14pt)")
        print(f"   ‚Ä¢ Data rows: 5 √ó 0.6cm = 3.0cm (Arial 14pt numbers)")
        print(f"   ‚Ä¢ Total table height: {total_height}cm")
        print(f"   ‚Ä¢ Spacer paragraphs: 12 √ó 28pt with 1.15x line spacing")
        print(f"   ‚Ä¢ Signature: 3 paragraphs √ó Arial 14pt with 1.15x line spacing")
        
        print("‚úÖ Description page with signature created successfully!")
        
    except Exception as e:
        print(f"‚úó Error creating description page with signature: {e}")
        import traceback
        traceback.print_exc()


# –¢–ê–ö–û–ñ –í–ò–î–ê–õ–ò–¢–ò –¥—É–±–ª—é–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó create_description_page_with_signature
# –ó–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω—É –≤–µ—Ä—Å—ñ—é —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –ø–æ–≤–Ω–∏–º –∫–æ–¥–æ–º


def get_default_signature_info():
    """–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –≥—Ä—É–ø–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è"""
    return {
        'rank': '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç',
        'name': '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–µ–Ω–∫–æ'
    }

def create_title_page(doc, title_data):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–æ–ª—è–º–∏ –∑ —à–∞–±–ª–æ–Ω—É"""
    try:
        print("=== Creating title page with template margins ===")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —à–∞–±–ª–æ–Ω—É
        date = title_data['date']
        unit_info = title_data.get('unit_info', '–ê0000')
        commander_info = title_data.get('commander_info', get_default_commander_info())
        chief_of_staff_info = title_data.get('chief_of_staff_info', get_default_responsible_info()['responsible'])
        margins = title_data.get('margins', {
            'top': 2.5, 'left': 2.25, 'bottom': 0, 'right': 0.75
        })
        
        print(f"‚úì Template data loaded: unit={unit_info}")
        print(f"‚úì Template margins: top={margins['top']}cm, left={margins['left']}cm, bottom={margins['bottom']}cm, right={margins['right']}cm")
        
        # ===== –í–°–¢–ê–ù–û–í–õ–Æ–Ñ–ú–û –ü–û–õ–Ø –ó–ì–Ü–î–ù–û –ó –®–ê–ë–õ–û–ù–û–ú =====
        section = doc.sections[0]
        set_a4_page_format(section)
        
        section.left_margin = Cm(margins['left'])       # –ó —à–∞–±–ª–æ–Ω—É: 2.25—Å–º
        section.top_margin = Cm(margins['top'])         # –ó —à–∞–±–ª–æ–Ω—É: 2.5—Å–º  
        section.right_margin = Cm(margins['right'])     # –ó —à–∞–±–ª–æ–Ω—É: 0.75—Å–º
        section.bottom_margin = Cm(margins['bottom'])   # –ó —à–∞–±–ª–æ–Ω—É: 0—Å–º
        
        print(f"‚úÖ –ü–û–õ–Ø –í–°–¢–ê–ù–û–í–õ–ï–ù–û: left={margins['left']}cm, top={margins['top']}cm, right={margins['right']}cm, bottom={margins['bottom']}cm")
        
        # ===== 4 –ê–ë–ó–ê–¶–ò –ü–û 31pt –ó–í–ï–†–•–£ =====
        for i in range(4):
            spacer_para = doc.add_paragraph()
            spacer_para.paragraph_format.space_before = Pt(0)
            spacer_para.paragraph_format.space_after = Pt(0)
            spacer_para.paragraph_format.line_spacing = Cm(1.15)  # –ú—ñ–∂—Ä—è–¥–∫–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª 1.15—Å–º
            spacer_para.paragraph_format.line_spacing_rule = 0    # –¢–æ—á–Ω–∞ –≤–∏—Å–æ—Ç–∞
            spacer_para.paragraph_format.first_line_indent = Cm(1)  # –í—ñ–¥—Å—Ç—É–ø –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ 1—Å–º
        
        # ===== –û–°–ù–û–í–ù–ò–ô –ó–ê–ì–û–õ–û–í–û–ö =====
        title_para = doc.add_paragraph()
        title_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        title_para.paragraph_format.space_before = Pt(0)
        title_para.paragraph_format.space_after = Pt(0)
        
        # –°–ª–æ–≤–æ "–ê–õ–¨–ë–û–ú" - Arial 28, –∂–∏—Ä–Ω–∏–π
        album_run = title_para.add_run("–ê–õ–¨–ë–û–ú")
        album_run.font.size = Pt(28)
        album_run.font.bold = True
        album_run.font.name = 'Arial'
        
        # –ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        subtitle_lines = [
            "—Ñ–æ—Ç–æ–∑–Ω—ñ–º–∫—ñ–≤ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –†–õ–°",
            f"–≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ {unit_info}",
            format_ukrainian_date(date)
        ]
        
        for line in subtitle_lines:
            title_para.add_run(f"\n{line}")
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à—Ä–∏—Ñ—Ç –¥–ª—è –≤—Å—ñ—Ö —Ä—è–¥–∫—ñ–≤
        for run in title_para.runs:
            run.font.size = Pt(28)
            run.font.bold = True
            run.font.name = 'Arial'
        
        # ===== 7 –ê–ë–ó–ê–¶–Ü–í –ü–Ü–°–õ–Ø –ù–ê–ó–í–ò =====
        for i in range(7):
            spacer_para = doc.add_paragraph()
            spacer_para.paragraph_format.space_before = Pt(0)
            spacer_para.paragraph_format.space_after = Pt(0)
            spacer_para.paragraph_format.line_spacing = Cm(1.15)
            spacer_para.paragraph_format.line_spacing_rule = 0
            spacer_para.paragraph_format.first_line_indent = Cm(1)
        
        # ===== –ü–Ü–î–ü–ò–°–ò =====
        footer_para = doc.add_paragraph()
        footer_para.alignment = WD_ALIGN_PARAGRAPH.LEFT
        footer_para.paragraph_format.space_before = Pt(0)
        footer_para.paragraph_format.space_after = Pt(0)
        footer_para.paragraph_format.left_indent = Cm(3.75)
        
        # –¢–∞–±—É–ª—è—Ü—ñ—è
        try:
            tab_stops = footer_para.paragraph_format.tab_stops
            tab_stops.clear_all()
            tab_stops.add_tab_stop(Cm(13), WD_TAB_ALIGNMENT.RIGHT)
        except Exception as tab_error:
            print(f"Warning: Could not set tab stops: {tab_error}")
        
        # –ö–æ–º–∞–Ω–¥–∏—Ä
        commander_text_run = footer_para.add_run(f"–ö–æ–º–∞–Ω–¥–∏—Ä –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ {unit_info}")
        commander_text_run.font.size = Pt(16)
        commander_text_run.font.bold = True
        commander_text_run.font.name = 'Arial'
        
        footer_para.add_run(f"\n{commander_info['rank']}")
        footer_para.add_run(f"\t{commander_info['name']}")
        
        for run in footer_para.runs[-2:]:
            run.font.size = Pt(16)
            run.font.bold = True
            run.font.name = 'Arial'
        
        # –ù–∞—á–∞–ª—å–Ω–∏–∫ —à—Ç–∞–±—É
        chief_para = doc.add_paragraph()
        chief_para.alignment = WD_ALIGN_PARAGRAPH.LEFT
        chief_para.paragraph_format.space_before = Pt(30)
        chief_para.paragraph_format.space_after = Pt(0)
        chief_para.paragraph_format.left_indent = Cm(3.75)
        
        try:
            tab_stops = chief_para.paragraph_format.tab_stops
            tab_stops.clear_all()
            tab_stops.add_tab_stop(Cm(13), WD_TAB_ALIGNMENT.RIGHT)
        except:
            pass
        
        chief_text_run = chief_para.add_run(f"–ù–∞—á–∞–ª—å–Ω–∏–∫ —à—Ç–∞–±—É –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ {unit_info}")
        chief_text_run.font.size = Pt(16)
        chief_text_run.font.bold = True
        chief_text_run.font.name = 'Arial'
        
        chief_para.add_run(f"\n{chief_of_staff_info['rank']}")
        chief_para.add_run(f"\t{chief_of_staff_info['name']}")
        
        for run in chief_para.runs[-2:]:
            run.font.size = Pt(16)
            run.font.bold = True
            run.font.name = 'Arial'
        
        print("‚úÖ Title page created with correct template margins!")
        
    except Exception as e:
        print(f"‚úó Error creating title page: {e}")
        import traceback
        traceback.print_exc()
    
def create_new_structure_pages(doc, processed_images):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é —Ç–∞ —Ç–∞–±–ª–∏—Ü—è–º–∏ –ë–ï–ó –ª—ñ–≤–æ–≥–æ –ø–æ–ª—è"""
    try:
        if not processed_images:
            print("No processed images to add")
            return
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É —Å–µ–∫—Ü—ñ—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—å
        table_section = doc.add_section(WD_SECTION_START.NEW_PAGE)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ A4 —Ñ–æ—Ä–º–∞—Ç
        set_a4_page_format(table_section)
        
        # –û–ù–û–í–õ–ï–ù–Ü –ü–û–õ–Ø: 0–º–º –∑–ª—ñ–≤–∞ (—Ç–∞–±–ª–∏—Ü—ñ –≤–ø—Ä–∏—Ç—É–ª –¥–æ –∫—Ä–∞—é!), 20–º–º –∑–≤–µ—Ä—Ö—É, 5–º–º —Å–ø—Ä–∞–≤–∞/–∑–Ω–∏–∑—É
        table_section.left_margin = Cm(mm_to_cm(ALBUM_LAYOUT['TABLE_PAGES_LEFT_MARGIN']))  # 0–º–º!
        table_section.right_margin = Cm(mm_to_cm(ALBUM_LAYOUT['TABLE_PAGES_RIGHT_MARGIN']))
        table_section.top_margin = Cm(mm_to_cm(ALBUM_LAYOUT['TABLE_PAGES_TOP_MARGIN']))
        table_section.bottom_margin = Cm(mm_to_cm(ALBUM_LAYOUT['TABLE_PAGES_BOTTOM_MARGIN']))
        
        print(f"‚úì NEW margins set: left=0mm (no margin!), top=20mm, right=5mm, bottom=5mm")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–º–∏ (–ø–æ 2 –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É)
        for i in range(0, len(processed_images), 2):
            first_image = processed_images[i]
            second_image = processed_images[i + 1] if i + 1 < len(processed_images) else None
            
            print(f"\n=== Creating page for images {i+1}-{i+2 if second_image else i+1} ===")
            
            # –ù–û–í–ê –°–¢–†–£–ö–¢–£–†–ê –°–¢–û–†–Ü–ù–ö–ò:
            
            # 1. –ü–∞—Ä–∞–≥—Ä–∞—Ñ-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á 5–º–º
            create_spacer_paragraph(doc, ALBUM_LAYOUT['PARAGRAPH_HEIGHT'])
            print("‚úì Added top spacer paragraph (5mm)")
            
            # 2. –ü–µ—Ä—à–∞ —Ç–∞–±–ª–∏—Ü—è 130–º–º (–ë–ï–ó –ª—ñ–≤–æ–≥–æ –≤—ñ–¥—Å—Ç—É–ø—É)
            create_single_image_table(doc, first_image)
            print("‚úì Added first table (130mm, aligned to LEFT EDGE)")
            
            # 3. –ü–∞—Ä–∞–≥—Ä–∞—Ñ-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á 5–º–º
            create_spacer_paragraph(doc, ALBUM_LAYOUT['PARAGRAPH_HEIGHT'])
            print("‚úì Added middle spacer paragraph (5mm)")
            
            # 4. –î—Ä—É–≥–∞ —Ç–∞–±–ª–∏—Ü—è 130–º–º (—è–∫—â–æ —î –¥—Ä—É–≥–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
            if second_image:
                create_single_image_table(doc, second_image)
                print("‚úì Added second table (130mm, aligned to LEFT EDGE)")
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥—Ä—É–≥–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—é —Ç–∞–±–ª–∏—Ü—é
                create_empty_table_placeholder(doc)
                print("‚úì Added empty table placeholder")
            
            # –†–æ–∑—Ä–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ù–ï –æ—Å—Ç–∞–Ω–Ω—è –ø–∞—Ä–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
            #if i + 2 < len(processed_images):
            #    doc.add_page_break()
            #    print("üìÑ Added page break")
        
        total_pages = (len(processed_images) + 1) // 2
        print(f"\n‚úÖ Final result: {len(processed_images)} images in {total_pages} pages with LEFT-ALIGNED tables")
        
    except Exception as e:
        print(f"‚úó Error creating new structure pages: {e}")

def create_spacer_paragraph(doc, height_mm):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞ –∑ —Ç–æ—á–Ω–æ—é –≤–∏—Å–æ—Ç–æ—é"""
    try:
        para = doc.add_paragraph()
        para.text = ""  # –ü–æ—Ä–æ–∂–Ω—ñ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–æ—á–Ω—É –≤–∏—Å–æ—Ç—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        para.paragraph_format.space_before = Pt(0)
        para.paragraph_format.space_after = Pt(0)
        para.paragraph_format.line_spacing = Cm(mm_to_cm(height_mm))
        para.paragraph_format.line_spacing_rule = 0  # –¢–æ—á–Ω–∞ –≤–∏—Å–æ—Ç–∞
        
        print(f"‚úì Created spacer paragraph: {height_mm}mm")
        
    except Exception as e:
        print(f"‚úó Error creating spacer paragraph: {e}")

def create_single_image_table(doc, image_data):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ 1x3 –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    try:
        print(f"üî® Creating single image table...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é 1x3 (1 —Ä—è–¥–æ–∫, 3 –∫–æ–ª–æ–Ω–∫–∏)
        table = doc.add_table(rows=1, cols=ALBUM_LAYOUT['TABLE_COLS'])
        table.style = None
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–æ—á–Ω—É —à–∏—Ä–∏–Ω—É —Ç–∞–±–ª–∏—Ü—ñ
        set_table_width(table)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ (—à–∏—Ä–∏–Ω–∏)
        setup_column_widths(table)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —î–¥–∏–Ω–∏–π —Ä—è–¥–æ–∫ –∑ –≤–∏—Å–æ—Ç–æ—é 130–º–º
        setup_image_row(table, 0, image_data)
        print(f"‚úÖ Single image table created successfully")
        
        return table
        
    except Exception as e:
        print(f"‚ùå Error creating single image table: {e}")
        return None

def create_empty_table_placeholder(doc):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—å–æ—ó —Ç–∞–±–ª–∏—Ü—ñ-–∑–∞–ø–æ–≤–Ω—é–≤–∞—á–∞ –¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤ –∑ –Ω–µ–ø–∞—Ä–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
    try:
        table = doc.add_table(rows=1, cols=ALBUM_LAYOUT['TABLE_COLS'])
        table.style = None
        
        set_table_width(table)
        setup_column_widths(table)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
        row = table.rows[0]
        row.height = Cm(mm_to_cm(ALBUM_LAYOUT['TABLE_HEIGHT']))  # 130–º–º
        
        for col_idx in range(ALBUM_LAYOUT['TABLE_COLS']):
            cell = row.cells[col_idx]
            cell.text = ""
            set_cell_background(cell, "FFFFFF")
            # –ü—Ä–æ–∑–æ—Ä—ñ –≥—Ä–∞–Ω–∏—Ü—ñ –¥–ª—è –ø–æ—Ä–æ–∂–Ω—å–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
            set_cell_borders(cell, top=False, bottom=False, left=False, right=False)
        
        print(f"‚úì Created empty table placeholder")
        
    except Exception as e:
        print(f"‚úó Error creating empty table placeholder: {e}")

def set_table_width(table):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó —à–∏—Ä–∏–Ω–∏ —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –õ–Ü–í–û–ì–û –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è"""
    try:
        tbl = table._tbl
        tblPr = tbl.tblPr
        
        # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π layout
        tblLayout = OxmlElement('w:tblLayout')
        tblLayout.set(qn('w:type'), 'fixed')
        tblPr.append(tblLayout)
        
        # –¢–û–ß–ù–ê —à–∏—Ä–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ: 30+145+30 = 205–º–º
        total_width_mm = ALBUM_LAYOUT['COL_1_WIDTH'] + ALBUM_LAYOUT['COL_2_WIDTH'] + ALBUM_LAYOUT['COL_3_WIDTH']
        width_dxa = int(total_width_mm * 56.7)  # 205–º–º –≤ DXA
        
        tblW = OxmlElement('w:tblW')
        tblW.set(qn('w:type'), 'dxa')
        tblW.set(qn('w:w'), str(width_dxa))
        tblPr.append(tblW)
        
        # –í–ê–ñ–õ–ò–í–û: –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –ø–æ –õ–Ü–í–û–ú–£ –∫—Ä–∞—é (—Ç–∞–±–ª–∏—Ü—è –ø—Ä–∏—Ç–∏—Å–Ω—É—Ç–∞ –¥–æ –ª—ñ–≤–æ–≥–æ –∫—Ä–∞—é –∞—Ä–∫—É—à–∞)
        tblJc = OxmlElement('w:jc')
        tblJc.set(qn('w:val'), 'left')  # –õ—ñ–≤–µ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
        tblPr.append(tblJc)
        
        # –î–û–î–ê–¢–ö–û–í–û: –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ —â–æ —Ç–∞–±–ª–∏—Ü—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —Å–∞–º–æ–≥–æ –ª—ñ–≤–æ–≥–æ –∫—Ä–∞—é
        tblInd = OxmlElement('w:tblInd')
        tblInd.set(qn('w:w'), '0')  # –ù—É–ª—å–æ–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø –∑–ª—ñ–≤–∞
        tblInd.set(qn('w:type'), 'dxa')
        tblPr.append(tblInd)
        
        print(f"‚úì Table: {total_width_mm}mm width, LEFT-aligned to page edge (no left margin)")
        
    except Exception as e:
        print(f"‚úó Error setting table width and alignment: {e}")
def setup_column_widths(table):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–∏—Ä–∏–Ω –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ 1x3"""
    try:
        col_1_width = ALBUM_LAYOUT['COL_1_WIDTH']      # 30–º–º - –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –ó–†–õ
        col_2_width = ALBUM_LAYOUT['COL_2_WIDTH']      # 145–º–º - –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è  
        col_3_width = ALBUM_LAYOUT['COL_3_WIDTH']      # 30–º–º - –¥–∞–Ω—ñ
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫
        for col_idx in range(ALBUM_LAYOUT['TABLE_COLS']):
            row = table.rows[0]  # –¢—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä—è–¥–æ–∫
            cell = row.cells[col_idx]
            
            if col_idx == 0:
                set_cell_width_mm(cell, col_1_width)    # 30–º–º
            elif col_idx == 1:
                set_cell_width_mm(cell, col_2_width)    # 145–º–º
            elif col_idx == 2:
                set_cell_width_mm(cell, col_3_width)    # 30–º–º
        
        print(f"‚úì Column widths set: 30mm, 145mm, 30mm")
        
    except Exception as e:
        print(f"‚úó Error setting column widths: {e}")

def setup_image_row(table, row_idx, image_data):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º (–≤–∏—Å–æ—Ç–∞ 130–º–º)"""
    try:
        row = table.rows[row_idx]
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–∏—Å–æ—Ç—É —Ä—è–¥–∫–∞ 130–º–º
        row.height = Cm(mm_to_cm(ALBUM_LAYOUT['TABLE_HEIGHT']))  # 130–º–º
        
        # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –≤–∏—Å–æ—Ç–∞ —Ä—è–¥–∫–∞
        trPr = row._tr.trPr
        if trPr is None:
            trPr = OxmlElement('w:trPr')
            row._tr.append(trPr)
        
        trHeight = OxmlElement('w:trHeight')
        trHeight.set(qn('w:val'), str(int(130 * 56.7)))  # 130–º–º –≤ DXA
        trHeight.set(qn('w:hRule'), 'exact')  # –¢–û–ß–ù–ê –≤–∏—Å–æ—Ç–∞
        trPr.append(trHeight)

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–º—ñ—Ä–∫–∏
        for col_idx in range(ALBUM_LAYOUT['TABLE_COLS']):
            cell = row.cells[col_idx]
            
            if col_idx == 0:
                setup_first_cell(cell, True)  # –ü–æ–∫–∞–∑—É—î–º–æ –≥—Ä–∞–Ω–∏—Ü—ñ
            elif col_idx == 1:
                setup_image_cell(cell, image_data, True)  # –ü–æ–∫–∞–∑—É—î–º–æ –≥—Ä–∞–Ω–∏—Ü—ñ
            elif col_idx == 2:
                setup_data_cell(cell, image_data, True)  # –ü–æ–∫–∞–∑—É—î–º–æ –≥—Ä–∞–Ω–∏—Ü—ñ
        
        print(f"‚úì Image row {row_idx + 1} configured (130mm height)")
        
    except Exception as e:
        print(f"‚úó Error setting up image row {row_idx}: {e}")

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤–µ—Ä—Å—ñ–π) =====

def setup_first_cell(cell, show_borders):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–æ—ó –∫–æ–º—ñ—Ä–∫–∏ (—à–∏—Ä–∏–Ω–∞ 30–º–º, —Ç–µ–∫—Å—Ç '–Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –ó–†–õ')"""
    try:
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
        set_cell_vertical_center(cell)
        
        # –¢–µ–∫—Å—Ç
        cell.text = ""

        para = cell.paragraphs[0]
        para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        run = para.add_run("–Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –ó–†–õ")
        run.font.name = 'Arial'
        run.font.size = Pt(12)

        # üéØ –î–û–î–ê–ô–¢–ï –í–ù–£–¢–†–Ü–®–ù–Ü –ü–û–õ–Ø –ö–û–ú–Ü–†–ö–ò
        tc = cell._tc
        tcPr = tc.tcPr
        if tcPr is None:
            tcPr = OxmlElement('w:tcPr')
            tc.append(tcPr)
        
        tcMar = OxmlElement('w:tcMar')
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ –¥–ª—è –ª—ñ–≤–æ—ó –∫–æ–º—ñ—Ä–∫–∏
        margins = {
            'top': '0',        # 0 –∑–≤–µ—Ä—Ö—É
            'left': '140',     # 140 DXA = ~2.5–º–º –∑–ª—ñ–≤–∞
            'bottom': '0',     # 0 –∑–Ω–∏–∑—É  
            'right': '0'       # 0 —Å–ø—Ä–∞–≤–∞
        }
        
        for margin_name, value in margins.items():
            margin = OxmlElement(f'w:{margin_name}')
            margin.set(qn('w:w'), value)
            margin.set(qn('w:type'), 'dxa')
            tcMar.append(margin)
        
        tcPr.append(tcMar)
        
        # –ì—Ä–∞–Ω–∏—Ü—ñ: –ª–∏—à–µ –ø—Ä–∞–≤–∞ (—è–∫—â–æ –ø–æ–∫–∞–∑—É—î–º–æ –≥—Ä–∞–Ω–∏—Ü—ñ)
        if show_borders:
            set_cell_borders(cell, top=False, bottom=False, left=False, right=True)
        else:
            set_cell_borders(cell, top=False, bottom=False, left=False, right=False)
        
    except Exception as e:
        print(f"‚úó Error configuring first cell: {e}")

def setup_image_cell(cell, image_data, show_borders):
    """
    –°–ü–†–û–©–ï–ù–ê –≤–µ—Ä—Å—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º 
    (–≤–∏–¥–∞–ª–µ–Ω–∏–π –∫–æ–¥ Word textbox)
    """
    try:
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
        set_cell_vertical_center(cell)
        
        # –û—á–∏—â—É—î–º–æ –∫–æ–º—ñ—Ä–∫—É
        cell.text = ""
        para = cell.paragraphs[0]
        para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # –ù–£–õ–¨–û–í–Ü –í–Ü–î–°–¢–£–ü–ò –£ –ü–ê–†–ê–ì–†–ê–§–ê
        para.paragraph_format.space_before = Pt(0)
        para.paragraph_format.space_after = Pt(0) 
        para.paragraph_format.left_indent = Pt(0)
        para.paragraph_format.right_indent = Pt(0)
        para.paragraph_format.line_spacing = 1.0
        
        if image_data:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–¢–ï–ü–ï–† –ó –û–ü–ò–°–û–ú –†–õ–° –ù–ê –ó–û–ë–†–ê–ñ–ï–ù–ù–Ü)
            processed_image = create_processed_image_from_data(image_data)
            
            if processed_image:
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                    temp_path = temp_file.name
                    processed_image.save(temp_path, 'JPEG', quality=95)
                
                # –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º –¥–ª—è –≥—Ä–∞–Ω–∏—Ü—å)
                border_thickness_mm = 1.0
                effective_width = ALBUM_LAYOUT['COL_2_WIDTH'] - border_thickness_mm    # 149–º–º
                effective_height = ALBUM_LAYOUT['TABLE_HEIGHT'] - border_thickness_mm  # 129–º–º
                
                # –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                run = para.add_run()
                inline_shape = run.add_picture(temp_path, 
                                             width=Cm(effective_width / 10.0),   # 14.9—Å–º
                                             height=Cm(effective_height / 10.0)) # 12.9—Å–º
                
                # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
                try:
                    os.remove(temp_path)
                except:
                    pass
                
                print(f"‚úì Image added: {effective_width}mm x {effective_height}mm with radar description")
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ –∫–æ–º—ñ—Ä–∫–∏ (–Ω—É–ª—å–æ–≤—ñ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è)
        tc = cell._tc
        tcPr = tc.tcPr
        if tcPr is None:
            tcPr = OxmlElement('w:tcPr')
            tc.append(tcPr)
        
        tcMar = OxmlElement('w:tcMar')
        for margin_name in ['top', 'left', 'bottom', 'right']:
            margin = OxmlElement(f'w:{margin_name}')
            margin.set(qn('w:w'), '0')  # –ù—É–ª—å–æ–≤—ñ –ø–æ–ª—è
            margin.set(qn('w:type'), 'dxa')
            tcMar.append(margin)
        tcPr.append(tcMar)
        
        # –ì—Ä–∞–Ω–∏—Ü—ñ
        if show_borders:
            set_cell_borders(cell, top=True, bottom=True, left=True, right=True)
        else:
            set_cell_borders(cell, top=False, bottom=False, left=False, right=False)
        
        # –ë—ñ–ª–∏–π —Ñ–æ–Ω
        set_cell_background(cell, "FFFFFF")
        
        print(f"‚úì Image cell configured with radar description on image")
        
    except Exception as e:
        print(f"‚úó Error configuring image cell: {e}")
        import traceback
        traceback.print_exc()

# ===== –î–û–î–ê–¢–ö–û–í–Ü –£–¢–ò–õ–Ü–¢–ò =====

def setup_data_cell(cell, image_data, show_borders):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏ –∑ –¥–∞–Ω–∏–º–∏ –∑ –ª—ñ–≤–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º"""
    try:
        # –û—á–∏—â—É—î–º–æ –∫–æ–º—ñ—Ä–∫—É
        cell.text = ""

        # –í–°–¢–ê–ù–û–í–õ–Æ–Ñ–ú–û –í–ù–£–¢–†–Ü–®–ù–Ü –ü–û–õ–Ø –ö–û–ú–Ü–†–ö–ò –ó–ê–ú–Ü–°–¢–¨ –í–Ü–î–°–¢–£–ü–Ü–í –ü–ê–†–ê–ì–†–ê–§–Ü–í
        tc = cell._tc
        tcPr = tc.tcPr
        if tcPr is None:
            tcPr = OxmlElement('w:tcPr')
            tc.append(tcPr)
        
        tcMar = OxmlElement('w:tcMar')
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ –¥–ª—è –ø—Ä–∞–≤–æ—ó –∫–æ–º—ñ—Ä–∫–∏
        margins = {
            'left': '140',     # 140 DXA = ~2.5–º–º (–∑–∞–º—ñ—Å—Ç—å 8pt –≤—ñ–¥—Å—Ç—É–ø—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞)
            'bottom': '0',     # 0–º–º –∑–Ω–∏–∑—É
        }
        
        for margin_name, value in margins.items():
            margin = OxmlElement(f'w:{margin_name}')
            margin.set(qn('w:w'), value)
            margin.set(qn('w:type'), 'dxa')
            tcMar.append(margin)
        
        tcPr.append(tcMar)
        
        if image_data:
            # –ü–µ—Ä—à–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏
            para = cell.paragraphs[0]
            para.alignment = WD_ALIGN_PARAGRAPH.LEFT
            para.paragraph_format.space_before = Pt(30)  # 30pt –∑–≤–µ—Ä—Ö—É
            para.paragraph_format.space_after = Pt(0)
            para.paragraph_format.line_spacing = 1.15
            
            # –ù–û–í–ò–ô –õ–Ü–í–ò–ô –í–Ü–î–°–¢–£–ü
            para.paragraph_format.left_indent = Pt(0)  # 0pt = ~0–º–º –ª—ñ–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø
            para.paragraph_format.right_indent = Pt(0)  # –ë–µ–∑ –ø—Ä–∞–≤–æ–≥–æ –≤—ñ–¥—Å—Ç—É–ø—É
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
            target_data = image_data['target_data']
            analysis_point = image_data['analysis_point']
            target_no = target_data['number']
            
            # üéØ –§–û–†–ú–£–Ñ–ú–û –°–ü–ò–°–û–ö –ó –í–ò–°–û–¢–û–Æ
            data_lines = [
                (f"{target_no}", 12, True, True),
                (f"Œ≤ ‚Äì {analysis_point['azimuth']:.0f}·¥º", 12, True, False),
                (f"D ‚Äì {analysis_point['range']:.0f} –∫–º", 12, True, False),
            ]
            
            # üéØ –î–û–î–ê–Ñ–ú–û –í–ò–°–û–¢–£ –¢–Ü–õ–¨–ö–ò –Ø–ö–©–û –ù–ï –î–û–†–Ü–í–ù–Æ–Ñ "0.0"
            height_value = target_data.get('height', '0.0')
            try:
                height_float = float(height_value)
                if height_float != 0.0:
                    data_lines.append((f"–ù ‚Äì {height_value} –º", 12, True, False))
            except (ValueError, TypeError):
                # –Ø–∫—â–æ –≤–∏—Å–æ—Ç–∞ –Ω–µ —á–∏—Å–ª–æ, –∞–ª–µ –Ω–µ "0" –∞–±–æ "0.0" - –¥–æ–¥–∞—î–º–æ
                if height_value not in ['0', '0.0', '', None]:
                    data_lines.append((f"–ù ‚Äì {height_value} –º", 12, True, False))
            
            # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ —Ä–µ—à—Ç–æ—é –¥–∞–Ω–∏—Ö
            data_lines.extend([
                ("–±–µ–∑ –ø–µ—Ä–µ—à–∫–æ–¥", 9, True, False),
                (f"{target_data['detection']}", 9, True, False),
                (f"–ú ‚Äì {target_data['scale']}", 9, True, False)
            ])
            
            # –î–æ–¥–∞—î–º–æ —Ä—è–¥–∫–∏
            for i, (text, font_size, italic, underline) in enumerate(data_lines):
                if i > 0:
                    para = cell.add_paragraph()
                    para.alignment = WD_ALIGN_PARAGRAPH.LEFT
                    para.paragraph_format.line_spacing = 1.15
                    para.paragraph_format.space_before = Pt(0)
                    para.paragraph_format.space_after = Pt(0)
                    
                    # –õ—ñ–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø –¥–ª—è –≤—Å—ñ—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ñ–≤
                    para.paragraph_format.left_indent = Pt(0)
                    para.paragraph_format.right_indent = Pt(0)
                
                run = para.add_run(text)
                run.font.name = 'Arial'
                run.font.size = Pt(font_size)
                run.italic = italic
                run.underline = underline
        
        # –ì—Ä–∞–Ω–∏—Ü—ñ: –≤—Å—ñ —Å—Ç–æ—Ä–æ–Ω–∏ –∫—Ä—ñ–º –ª—ñ–≤–æ—ó (—è–∫—â–æ –ø–æ–∫–∞–∑—É—î–º–æ –≥—Ä–∞–Ω–∏—Ü—ñ)
        if show_borders:
            set_cell_borders(cell, top=True, bottom=True, left=False, right=True)
        else:
            set_cell_borders(cell, top=False, bottom=False, left=False, right=False)
        
    except Exception as e:
        print(f"‚úó Error configuring data cell: {e}")


def set_cell_width_mm(cell, width_mm):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –§–Ü–ö–°–û–í–ê–ù–û–á —à–∏—Ä–∏–Ω–∏ –∫–æ–º—ñ—Ä–∫–∏ –ë–ï–ó –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –≤—ñ–¥—Å—Ç—É–ø—ñ–≤"""
    try:
        width_dxa = int(width_mm * 56.7)
        
        tc = cell._tc
        tcPr = tc.tcPr
        if tcPr is None:
            tcPr = OxmlElement('w:tcPr')
            tc.append(tcPr)
        
        # –§–Ü–ö–°–û–í–ê–ù–ê —à–∏—Ä–∏–Ω–∞
        tcW = OxmlElement('w:tcW')
        tcW.set(qn('w:type'), 'dxa')
        tcW.set(qn('w:w'), str(width_dxa))
        tcPr.append(tcW)
        
        # –ó–ê–ë–û–†–û–ù–ê –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø—ñ–¥–≥–æ–Ω—É
        tcFitText = OxmlElement('w:tcFitText')
        tcFitText.set(qn('w:val'), '0')
        tcPr.append(tcFitText)
        
        # –í–ê–ñ–õ–ò–í–û: –ù–ï –¥–æ–¥–∞—î–º–æ tcMar —Ç—É—Ç –¥–ª—è –∫–æ–º—ñ—Ä–æ–∫ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
        # –í—ñ–¥—Å—Ç—É–ø–∏ –Ω–∞–ª–∞—à—Ç–æ–≤—É—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ –≤ setup_9x9_image_cell
        
        print(f"‚úì Fixed cell width: {width_mm}mm (NO internal margins)")
        
    except Exception as e:
        print(f"‚úó Error setting fixed cell width: {e}")

def set_cell_vertical_center(cell):
    """–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏"""
    try:
        cell.vertical_alignment = WD_ALIGN_VERTICAL.CENTER
    except:
        try:
            tc = cell._tc
            tcPr = tc.tcPr
            if tcPr is None:
                tcPr = OxmlElement('w:tcPr')
                tc.append(tcPr)
            
            vAlign = OxmlElement('w:vAlign')
            vAlign.set(qn('w:val'), 'center')
            tcPr.append(vAlign)
        except Exception as e:
            print(f"Warning: Could not set vertical alignment: {e}")

def set_cell_borders(cell, top=False, bottom=False, left=False, right=False):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–∞–º–æ–∫ –∫–æ–º—ñ—Ä–∫–∏"""
    try:
        tc = cell._tc
        tcPr = tc.tcPr
        if tcPr is None:
            tcPr = OxmlElement('w:tcPr')
            tc.append(tcPr)
        
        tcBorders = OxmlElement('w:tcBorders')
        
        border_settings = [
            ('top', top), ('bottom', bottom), ('left', left), ('right', right)
        ]
        
        for position, show_border in border_settings:
            border_element = OxmlElement(f'w:{position}')
            if show_border:
                border_element.set(qn('w:val'), 'single')
                border_element.set(qn('w:sz'), '4')
                border_element.set(qn('w:color'), '000000')
            else:
                border_element.set(qn('w:val'), 'none')
            
            tcBorders.append(border_element)
        
        tcPr.append(tcBorders)
        
    except Exception as e:
        print(f"Warning: Could not set cell borders: {e}")

def set_cell_background(cell, color_hex):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Ñ–æ–Ω—É –∫–æ–º—ñ—Ä–∫–∏"""
    try:
        tc = cell._tc
        tcPr = tc.tcPr
        if tcPr is None:
            tcPr = OxmlElement('w:tcPr')
            tc.append(tcPr)
        
        shd = OxmlElement('w:shd')
        shd.set(qn('w:val'), 'clear')
        shd.set(qn('w:color'), 'auto')
        shd.set(qn('w:fill'), color_hex)
        tcPr.append(shd)
        
    except Exception as e:
        print(f"Warning: Could not set cell background: {e}")

def create_processed_image_from_data(image_data):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º –†–õ–° –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ"""
    try:
        with Image.open(image_data['image_path']) as original_image:
            if original_image.mode != 'RGB':
                if original_image.mode == 'RGBA':
                    rgb_image = Image.new('RGB', original_image.size, (255, 255, 255))
                    rgb_image.paste(original_image, mask=original_image.split()[-1])
                    final_image = rgb_image
                else:
                    final_image = original_image.convert('RGB')
            else:
                final_image = original_image.copy()
        
        draw = ImageDraw.Draw(final_image)
        analysis_point = image_data['analysis_point']
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∑–∏—Ü—ñ—ó –∫—ñ–Ω—Ü—è –ª—ñ–Ω—ñ—ó
        image_width = final_image.width
        image_height = final_image.height
        
        # –ü–æ–∑–∏—Ü—ñ—è –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ü—ñ–ª—ñ: 12% –≤–∏—Å–æ—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        underline_y = int(image_height * 0.12)
        end_x = image_width - 1  # –°–∞–º–∏–π –∫—Ä–∞–π
        end_y = underline_y      # –ù–∞ –≤–∏—Å–æ—Ç—ñ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è
        
        # –ú–∞–ª—é—î–º–æ –ª—ñ–Ω—ñ—é –≤—ñ–¥ —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
        draw.line([
            (analysis_point['x'], analysis_point['y']), 
            (end_x, end_y)
        ], fill='black', width=3)
        
        # ===== –î–û–î–ê–Ñ–ú–û –û–ü–ò–° –†–õ–° –ù–ê –ó–û–ë–†–ê–ñ–ï–ù–ù–Ø =====
        if 'radar_description' in image_data and image_data['radar_description']['enabled']:
            print("üìù Adding radar description to image")
            add_radar_description_to_image(draw, image_data['radar_description'], image_width, image_height)
        
        return final_image
        
    except Exception as e:
        print(f"Error creating processed image: {e}")
        return None

def add_radar_description_to_image(draw, radar_data, image_width, image_height):
    """
    –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–° –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è–º —Ç–µ–∫—Å—Ç—É
    """
    try:
        # ===== –¢–û–ß–ù–Ü –ü–†–û–ü–û–†–¶–Ü–ô–ù–Ü –†–û–ó–†–ê–•–£–ù–ö–ò =====
        
        # –¢–∞–±–ª–∏—á–∫–∞ –†–õ–° –∑–∞–π–º–∞—î —Ü—ñ –≤—ñ–¥—Å–æ—Ç–∫–∏ –≤—ñ–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:
        RADAR_BOX_WIDTH_PERCENT = 28.60   # 4.29—Å–º / 15—Å–º * 100% = 28.60%
        RADAR_BOX_HEIGHT_PERCENT = 19.54  # 2.54—Å–º / 13—Å–º * 100% = 19.54%
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ —Ç–∞–±–ª–∏—á–∫–∏ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
        rect_width = int((image_width * RADAR_BOX_WIDTH_PERCENT) / 100)
        rect_height = int((image_height * RADAR_BOX_HEIGHT_PERCENT) / 100)
        
        # –¢–û–ß–ù–Ü –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ –∑–≥—ñ–¥–Ω–æ –∑—ñ –∑—Ä–∞–∑–∫–æ–º Word
        # –õ—ñ–≤–µ/–ø—Ä–∞–≤–µ –ø–æ–ª–µ 0,25—Å–º –≤—ñ–¥ 4,29—Å–º = 5.83%
        # –í–µ—Ä—Ö–Ω—î/–Ω–∏–∂–Ω—î –ø–æ–ª–µ 0,13—Å–º –≤—ñ–¥ 2,54—Å–º = 5.12%
        PADDING_HORIZONTAL_PERCENT = 5.83  # 0,25—Å–º / 4,29—Å–º * 100% = 5.83%
        PADDING_VERTICAL_PERCENT = 5.12    # 0,13—Å–º / 2,54—Å–º * 100% = 5.12%
        
        padding_horizontal = int((rect_width * PADDING_HORIZONTAL_PERCENT) / 100)
        padding_vertical = int((rect_height * PADDING_VERTICAL_PERCENT) / 100)
        
        # –ü–æ–∑–∏—Ü—ñ—è —Ç–∞–±–ª–∏—á–∫–∏ - –ª—ñ–≤–∏–π –Ω–∏–∂–Ω—ñ–π –∫—É—Ç –∑ –Ω–µ–≤–µ–ª–∏—á–∫–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º –≤—ñ–¥ –∫—Ä–∞—é
        margin_from_edge = int(image_width * 0.01)  # 1% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        rect_x = margin_from_edge
        rect_y = image_height - rect_height - margin_from_edge
        
        print(f"üìè Image: {image_width}x{image_height}px")
        print(f"üì¶ Radar box: {rect_width}x{rect_height}px ({RADAR_BOX_WIDTH_PERCENT:.1f}% x {RADAR_BOX_HEIGHT_PERCENT:.1f}%)")
        print(f"üìç Position: ({rect_x}, {rect_y})")
        print(f"üìê Padding: {padding_horizontal}x{padding_vertical}px")
        
        # ===== 1. –ú–ê–õ–Æ–Ñ–ú–û –ü–†–Ø–ú–û–ö–£–¢–ù–ò–ö –ó –ü–†–û–ó–û–†–ò–ú –§–û–ù–û–ú =====
        border_width = max(2, int(rect_width * 0.008))
        
        draw.rectangle([rect_x, rect_y, rect_x + rect_width, rect_y + rect_height], 
                      fill=None, outline='black', width=border_width)
        
        # ===== 2. –ì–û–¢–£–Ñ–ú–û –¢–ï–ö–°–¢ =====
        text_lines = []
        
        # –î–∞—Ç–∞ –∑ –∫–æ–º–ø–∞–∫—Ç–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
        date_obj = radar_data.get('date')
        if date_obj:
            if hasattr(date_obj, 'toString'):
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤
                date_str = date_obj.toString('dd.MM.yyyy')
            elif hasattr(date_obj, 'strftime'):
                date_str = date_obj.strftime('%d.%m.%Y')
            else:
                date_str = str(date_obj)
            text_lines.append(date_str)
        
        # –ü–æ–∑–∏–≤–Ω–∏–π
        callsign = radar_data.get('callsign')
        if callsign and callsign.strip():
            text_lines.append(callsign.strip())
        
        # –ù–∞–∑–≤–∞ –†–õ–° (–≤ –¥—É–∂–∫–∞—Ö)
        name = radar_data.get('name')
        if name and name.strip():
            text_lines.append(f"({name.strip()})")
        
        # –ù–æ–º–µ—Ä –†–õ–° (—Å–∏–º–≤–æ–ª ‚Ññ + –Ω–æ–º–µ—Ä) - –í–ò–ü–†–ê–í–õ–ï–ù–û
        number = radar_data.get('number')
        if number and number.strip():
            text_lines.append(f"‚Ññ {number.strip()}")  # –î–æ–¥–∞–Ω–æ –ø—Ä–æ–±—ñ–ª –ø—ñ—Å–ª—è ‚Ññ
        
        print(f"üìù Text lines: {text_lines}")
        
        if not text_lines:
            print("‚ö†Ô∏è No content for radar description")
            return
        
        # ===== 3. –†–û–ó–†–ê–•–£–ù–û–ö –†–û–ó–ú–Ü–†–£ –®–†–ò–§–¢–£ –ó–ì–Ü–î–ù–û –ó–Ü –ó–†–ê–ó–ö–û–ú =====
        # Arial 12pt –≤ –∑—Ä–∞–∑–∫—É Word –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–∏–±–ª–∏–∑–Ω–æ 17% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ —Ç–∞–±–ª–∏—á–∫–∏ 2,54—Å–º
        FONT_SIZE_PERCENT = 17.0  # –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑—Ä–∞–∑–∫—É
        font_size = max(12, int((rect_height * FONT_SIZE_PERCENT) / 100))
        
        # ===== 4. –ó–ê–í–ê–ù–¢–ê–ñ–£–Ñ–ú–û –®–†–ò–§–¢ (–ö–£–†–°–ò–í) =====
        try:
            font = None
            
            # –í–∞—Ä—ñ–∞–Ω—Ç–∏ —à–ª—è—Ö—ñ–≤ –¥–æ Arial Italic (–∫—É—Ä—Å–∏–≤)
            arial_italic_paths = [
                "C:/Windows/Fonts/ariali.ttf",                   # Windows Arial Italic
                "C:/Windows/Fonts/Arial Italic.ttf",             # Windows (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
                "/System/Library/Fonts/Arial Italic.ttf",        # macOS
                "/usr/share/fonts/truetype/arial/ariali.ttf",    # Ubuntu
                "/usr/share/fonts/TTF/ariali.ttf",               # Arch Linux
            ]
            
            # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –∫—É—Ä—Å–∏–≤–Ω–∏–π Arial
            for italic_path in arial_italic_paths:
                if os.path.exists(italic_path):
                    font = ImageFont.truetype(italic_path, font_size)
                    print(f"‚úì Font: {os.path.basename(italic_path)} italic size {font_size}px")
                    break
            
            # –Ø–∫—â–æ –∫—É—Ä—Å–∏–≤–Ω–∏–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π Arial
            if font is None:
                arial_regular_paths = [
                    "C:/Windows/Fonts/arial.ttf",                    # Windows
                    "C:/Windows/Fonts/Arial.ttf",                    # Windows (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
                    "/System/Library/Fonts/Arial.ttf",               # macOS
                    "/usr/share/fonts/truetype/arial/arial.ttf",     # Ubuntu
                    "/usr/share/fonts/TTF/arial.ttf",                # Arch Linux
                    "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
                ]
                
                for arial_path in arial_regular_paths:
                    if os.path.exists(arial_path):
                        font = ImageFont.truetype(arial_path, font_size)
                        print(f"‚úì Font: {os.path.basename(arial_path)} regular size {font_size}px (italic not found)")
                        break
            
            # –Ø–∫—â–æ Arial –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
            if font is None:
                font = ImageFont.load_default()
                print(f"‚ö†Ô∏è Using default font (size {font_size}px)")
                
        except Exception as font_error:
            print(f"‚ö†Ô∏è Font loading error: {font_error}")
            font = ImageFont.load_default()
        
        # ===== 5. –†–û–ó–ú–Ü–©–£–Ñ–ú–û –¢–ï–ö–°–¢ –ó –¢–û–ß–ù–ò–ú–ò –ü–†–û–ü–û–†–¶–Ü–Ø–ú–ò –Ø–ö –£ –ó–†–ê–ó–ö–£ =====
        text_x = rect_x + padding_horizontal
        text_y = rect_y + padding_vertical
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—É –≤–∏—Å–æ—Ç—É –¥–ª—è —Ç–µ–∫—Å—Ç—É
        available_height = rect_height - (2 * padding_vertical)
        
        # –¢–û–ß–ù–ò–ô –º—ñ–∂—Ä—è–¥–∫–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —è–∫ —É –∑—Ä–∞–∑–∫—É Word
        # –í Word –∑ –æ–¥–∏–Ω–∞—Ä–Ω–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º –º—ñ–∂ —Ä—è–¥–∫–∞–º–∏ Arial 12pt –ø—Ä–æ–º—ñ–∂–æ–∫ ‚âà 1.2 * font_size
        line_height = int(font_size * 1.2)  # –û–¥–∏–Ω–∞—Ä–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
        
        # –Ø–∫—â–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –Ω–µ –ø–æ–º—ñ—â–∞—é—Ç—å—Å—è - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–º–µ–Ω—à—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        total_text_height = len(text_lines) * line_height
        if total_text_height > available_height:
            line_height = available_height // len(text_lines)
        
        print(f"üìù Text area: {available_height}px height, {line_height}px line height")
        print(f"üìè Font size: {font_size}px (corresponds to Arial 12pt)")
        
        for i, line in enumerate(text_lines):
            current_y = text_y + (i * line_height)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–µ–∫—Å—Ç –ø–æ–º—ñ—â–∞—î—Ç—å—Å—è –≤ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫
            if current_y + font_size > rect_y + rect_height - padding_vertical:
                print(f"‚ö†Ô∏è Text line {i+1} exceeds rectangle bounds")
                break
            
            # –ü–û–ö–†–ê–©–ï–ù–ï –º–∞–ª—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑–≥—ñ–¥–Ω–æ –∑—ñ –∑—Ä–∞–∑–∫–æ–º
            try:
                if "‚Ññ" in line:  # –†—è–¥–æ–∫ –∑ –Ω–æ–º–µ—Ä–æ–º –†–õ–°
                    # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Å–∏–º–≤–æ–ª ‚Ññ —Ç–∞ –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ spacing
                    parts = line.split(" ", 1)  # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ –ø–µ—Ä—à–æ–º—É –ø—Ä–æ–±—ñ–ª—É
                    if len(parts) == 2:
                        # –ú–∞–ª—é—î–º–æ —Å–∏–º–≤–æ–ª ‚Ññ 
                        draw.text((text_x, current_y), parts[0], fill='black', font=font)
                        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å—Ç—É–ø –¥–ª—è –Ω–æ–º–µ—Ä–∞ (—à–∏—Ä–∏–Ω–∞ —Å–∏–º–≤–æ–ª—É ‚Ññ + –ø—Ä–æ–±—ñ–ª)
                        try:
                            symbol_width = draw.textlength(parts[0] + " ", font=font)
                        except AttributeError:
                            # Fallback –¥–ª—è —Å—Ç–∞—Ä—ñ—à–∏—Ö –≤–µ—Ä—Å—ñ–π Pillow
                            symbol_width = font_size * 1.0  # –ú–µ–Ω—à–∏–π –≤—ñ–¥—Å—Ç—É–ø
                        # –ú–∞–ª—é—î–º–æ –Ω–æ–º–µ—Ä –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º
                        draw.text((text_x + symbol_width, current_y), parts[1], fill='black', font=font)
                    else:
                        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ - –º–∞–ª—é—î–º–æ —è–∫ –∑–∞–∑–≤–∏—á–∞–π
                        draw.text((text_x, current_y), line, fill='black', font=font)
                else:
                    # –ó–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç (–¥–∞—Ç–∞, –ø–æ–∑–∏–≤–Ω–∏–π, –Ω–∞–∑–≤–∞)
                    draw.text((text_x, current_y), line, fill='black', font=font)
                
                print(f"‚úì Line {i+1}: '{line}' at ({text_x}, {current_y})")
            except Exception as text_error:
                print(f"‚ö†Ô∏è Error drawing text line {i+1}: {text_error}")
                # Fallback - –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
                draw.text((text_x, current_y), line, fill='black', font=font)
        
        print("‚úÖ Radar description added with exact Word proportions!")
        
        # ===== –ü–Ü–î–°–£–ú–ö–û–í–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –í–Ü–î–ü–û–í–Ü–î–ù–û–°–¢–Ü –ó–†–ê–ó–ö–£ =====
        actual_width_percent = (rect_width / image_width) * 100
        actual_height_percent = (rect_height / image_height) * 100
        
        print(f"üìä Final proportions: {actual_width_percent:.1f}% x {actual_height_percent:.1f}%")
        print(f"üìè Margins: horizontal={padding_horizontal}px ({PADDING_HORIZONTAL_PERCENT:.1f}%), vertical={padding_vertical}px ({PADDING_VERTICAL_PERCENT:.1f}%)")
        print(f"üî§ Font: Arial {font_size}px italic (corresponds to 12pt in Word)")
        print(f"üìê Line height: {line_height}px (single spacing like Word)")
        
    except Exception as e:
        print(f"‚ùå Error adding radar description: {e}")
        import traceback
        traceback.print_exc()

def calculate_radar_box_proportions():
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π
    """
    print("üßÆ –†–û–ó–†–ê–•–£–ù–û–ö –ü–†–û–ü–û–†–¶–Ü–ô –¢–ê–ë–õ–ò–ß–ö–ò –†–õ–°")
    print("=" * 50)
    
    # –í–∏—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
    cell_width_cm = 15.0   # –ö–æ–º—ñ—Ä–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    cell_height_cm = 13.0
    
    radar_width_cm = 4.29  # –¢–∞–±–ª–∏—á–∫–∞ –†–õ–°
    radar_height_cm = 2.54
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
    width_percent = (radar_width_cm / cell_width_cm) * 100
    height_percent = (radar_height_cm / cell_height_cm) * 100
    
    print(f"–ö–æ–º—ñ—Ä–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {cell_width_cm} √ó {cell_height_cm} —Å–º")
    print(f"–¢–∞–±–ª–∏—á–∫–∞ –†–õ–°: {radar_width_cm} √ó {radar_height_cm} —Å–º")
    print(f"")
    print(f"–ü—Ä–æ–ø–æ—Ä—Ü—ñ—ó —Ç–∞–±–ª–∏—á–∫–∏:")
    print(f"  –®–∏—Ä–∏–Ω–∞: {width_percent:.2f}% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    print(f"  –í–∏—Å–æ—Ç–∞: {height_percent:.2f}% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
    print(f"")
    print(f"–ü—Ä–∏–∫–ª–∞–¥–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å:")
    
    test_sizes = [
        (800, 600),
        (1200, 900),
        (1600, 1200),
        (2000, 1500)
    ]
    
    for width, height in test_sizes:
        box_width = int((width * width_percent) / 100)
        box_height = int((height * height_percent) / 100)
        print(f"  {width}√ó{height}px ‚Üí —Ç–∞–±–ª–∏—á–∫–∞: {box_width}√ó{box_height}px")

# –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
calculate_radar_box_proportions()

print("\n‚úÖ Proportional radar description function ready!")
print("üìã Key features:")
print("   1. ‚úì Exact 28.60% √ó 19.54% proportions")
print("   2. ‚úì Correct font sizing (16.7% = 12pt proportion)")  
print("   3. ‚úì Arial Italic font support")
print("   4. ‚úì Transparent background (fill=None)")
print("   5. ‚úì Proportional padding (5.83% √ó 5.12%)")
print("   6. ‚úì Thicker proportional border")
print("   7. ‚úì Works with any image size")
print("   8. ‚úì Maintains exact aspect ratio from sample")

def create_title_page(doc, title_data):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –æ–∫—Ä–µ–º–∏–º–∏ –∞–±–∑–∞—Ü–∞–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—É"""
    try:
        print("=== Creating title page with separate paragraphs for each title line ===")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —à–∞–±–ª–æ–Ω—É
        date = title_data['date']
        unit_info = title_data.get('unit_info', '–ê0000')
        commander_info = title_data.get('commander_info', get_default_commander_info())
        chief_of_staff_info = title_data.get('chief_of_staff_info', get_default_responsible_info()['responsible'])
        margins = title_data.get('margins', {
            'top': 2.25, 'left': 2.5, 'bottom': 0, 'right': 0.75
        })
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        section = doc.sections[0]
        set_a4_page_format(section)
        
        section.left_margin = Cm(margins['left'])
        section.top_margin = Cm(margins['top'])
        section.right_margin = Cm(margins['right'])
        section.bottom_margin = Cm(margins['bottom'])
        
        print(f"‚úÖ Margins set: left={margins['left']}cm, top={margins['top']}cm, right={margins['right']}cm, bottom={margins['bottom']}cm")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        from docx.enum.style import WD_STYLE_TYPE
        
        # –°—Ç–∏–ª—å –¥–ª—è –≤–µ—Ä—Ö–Ω—ñ—Ö –∞–±–∑–∞—Ü—ñ–≤ (31pt + 1—Å–º –≤—ñ–¥—Å—Ç—É–ø + 1,15 –º–Ω–æ–∂–Ω–∞ + 10pt –ø—ñ—Å–ª—è)
        try:
            top_spacer_style = doc.styles['TitleTopSpacer']
        except KeyError:
            top_spacer_style = doc.styles.add_style('TitleTopSpacer', WD_STYLE_TYPE.PARAGRAPH)
            top_spacer_style.paragraph_format.first_line_indent = Cm(1)
            top_spacer_style.paragraph_format.line_spacing = 1.15  # 1,15 —è–∫ –ú–ù–û–ñ–ù–ò–ö, –Ω–µ —Å–º!
            # –ù–ï –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ line_spacing_rule - –≤–æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∞—î MULTIPLE
            top_spacer_style.paragraph_format.space_before = Pt(0)
            top_spacer_style.paragraph_format.space_after = Pt(10)     # 10pt –ø—ñ—Å–ª—è –∞–±–∑–∞—Ü—É
            top_spacer_style.font.size = Pt(31)
            top_spacer_style.font.name = 'Arial'
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—É (28pt + —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è + 1—Å–º –≤—ñ–¥—Å—Ç—É–ø –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞)
        try:
            title_main_style = doc.styles['TitleMain']
        except KeyError:
            title_main_style = doc.styles.add_style('TitleMain', WD_STYLE_TYPE.PARAGRAPH)
            title_main_style.paragraph_format.first_line_indent = Cm(1)
            title_main_style.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER
            title_main_style.paragraph_format.space_before = Pt(0)
            title_main_style.paragraph_format.space_after = Pt(0)
            title_main_style.font.size = Pt(28)
            title_main_style.font.name = 'Arial'
            title_main_style.font.bold = True
        
        # –°—Ç–∏–ª—å –¥–ª—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∞–±–∑–∞—Ü—ñ–≤ (28pt + 1—Å–º –≤—ñ–¥—Å—Ç—É–ø + 1,15 –º–Ω–æ–∂–Ω–∞ + –ë–ï–ó —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø—ñ—Å–ª—è)
        try:
            middle_spacer_style = doc.styles['TitleMiddleSpacer']
        except KeyError:
            middle_spacer_style = doc.styles.add_style('TitleMiddleSpacer', WD_STYLE_TYPE.PARAGRAPH)
            middle_spacer_style.paragraph_format.first_line_indent = Cm(1)
            middle_spacer_style.paragraph_format.line_spacing = 1.15  # 1,15 —è–∫ –ú–ù–û–ñ–ù–ò–ö, –Ω–µ —Å–º!
            # –ù–ï –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ line_spacing_rule - –≤–æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∞—î MULTIPLE
            middle_spacer_style.paragraph_format.space_before = Pt(0)
            middle_spacer_style.paragraph_format.space_after = Pt(0)     # –ë–ï–ó —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø—ñ—Å–ª—è
            middle_spacer_style.font.size = Pt(28)
            middle_spacer_style.font.name = 'Arial'
        
        # –°—Ç–∏–ª—å –¥–ª—è –ø—ñ–¥–ø–∏—Å—ñ–≤ (16pt + –ë–ï–ó –ª—ñ–≤–æ–≥–æ –≤—ñ–¥—Å—Ç—É–ø—É + 1—Å–º –≤—ñ–¥—Å—Ç—É–ø –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞)
        try:
            signature_style = doc.styles['TitleSignature']
        except KeyError:
            signature_style = doc.styles.add_style('TitleSignature', WD_STYLE_TYPE.PARAGRAPH)
            signature_style.paragraph_format.first_line_indent = Cm(1)      # 1—Å–º –≤—ñ–¥—Å—Ç—É–ø –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
            signature_style.paragraph_format.left_indent = Pt(0)            # –ë–ï–ó –ª—ñ–≤–æ–≥–æ –≤—ñ–¥—Å—Ç—É–ø—É –∞–±–∑–∞—Ü—É
            signature_style.paragraph_format.line_spacing = 1.15            # 1,15 –º–Ω–æ–∂–Ω–∞
            signature_style.paragraph_format.space_before = Pt(0)
            signature_style.paragraph_format.space_after = Pt(0)
            signature_style.font.size = Pt(16)
            signature_style.font.name = 'Arial'
            signature_style.font.bold = True
        
        # –°—Ç–∏–ª—å –¥–ª—è —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞ –º—ñ–∂ –ø—ñ–¥–ø–∏—Å–∞–º–∏ (9pt + 1—Å–º –≤—ñ–¥—Å—Ç—É–ø –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ + 1,15 –º–Ω–æ–∂–Ω–∞)
        try:
            signature_spacer_style = doc.styles['TitleSignatureSpacer']
        except KeyError:
            signature_spacer_style = doc.styles.add_style('TitleSignatureSpacer', WD_STYLE_TYPE.PARAGRAPH)
            signature_spacer_style.paragraph_format.first_line_indent = Cm(1)   # 1—Å–º –≤—ñ–¥—Å—Ç—É–ø –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
            signature_spacer_style.paragraph_format.left_indent = Pt(0)         # –ë–ï–ó –ª—ñ–≤–æ–≥–æ –≤—ñ–¥—Å—Ç—É–ø—É –∞–±–∑–∞—Ü—É
            signature_spacer_style.paragraph_format.line_spacing = 1.15         # 1,15 –º–Ω–æ–∂–Ω–∞
            signature_spacer_style.paragraph_format.space_before = Pt(0)
            signature_spacer_style.paragraph_format.space_after = Pt(0)
            signature_spacer_style.font.size = Pt(9)                           # 9pt —Ä–æ–∑–º—ñ—Ä
            signature_spacer_style.font.name = 'Arial'
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫—ñ–Ω—Ü–µ–≤–æ–≥–æ –∞–±–∑–∞—Ü—É (16pt + 1—Å–º –≤—ñ–¥—Å—Ç—É–ø –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞)
        try:
            final_style = doc.styles['TitleFinal']
        except KeyError:
            final_style = doc.styles.add_style('TitleFinal', WD_STYLE_TYPE.PARAGRAPH)
            final_style.paragraph_format.first_line_indent = Cm(1)
            final_style.paragraph_format.line_spacing = Pt(16)
            final_style.paragraph_format.line_spacing_rule = 0
            final_style.paragraph_format.space_before = Pt(0)
            final_style.paragraph_format.space_after = Pt(0)
            final_style.font.size = Pt(16)
            final_style.font.name = 'Arial'
        
        print("‚úÖ Title page styles created with correct spacing:")
        print("   ‚Ä¢ Top spacers: 1.15x line spacing (MULTIPLE) + 10pt after paragraph")
        print("   ‚Ä¢ Middle spacers: 1.15x line spacing (MULTIPLE) + 0pt after paragraph")
        print("   ‚Ä¢ Signatures: 1.15x line spacing, NO left indent, 1cm first line indent")
        print("   ‚Ä¢ Signature spacer: 9pt + 1.15x line spacing")
        
        # 4 –∞–±–∑–∞—Ü–∏ –∑–≤–µ—Ä—Ö—É
        for i in range(4):
            doc.add_paragraph(" ", style=top_spacer_style)
        
        # –ì–û–õ–û–í–ù–ò–ô –ó–ê–ì–û–õ–û–í–û–ö: –ö–û–ñ–ï–ù –†–Ø–î–û–ö = –û–ö–†–ï–ú–ò–ô –ê–ë–ó–ê–¶
        doc.add_paragraph("–ê–õ–¨–ë–û–ú", style=title_main_style)
        doc.add_paragraph("—Ñ–æ—Ç–æ–∑–Ω—ñ–º–∫—ñ–≤ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –†–õ–°", style=title_main_style)
        doc.add_paragraph(f"–≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ {unit_info}", style=title_main_style)
        doc.add_paragraph(format_ukrainian_date(date), style=title_main_style)
        
        print("‚úÖ Signatures created as separate paragraphs:")
        print("   ‚Ä¢ Commander title paragraph")
        print("   ‚Ä¢ Commander name paragraph") 
        print("   ‚Ä¢ 9pt spacer paragraph")
        print("   ‚Ä¢ Chief title paragraph")
        print("   ‚Ä¢ Chief name paragraph")
        
        # 7 –∞–±–∑–∞—Ü—ñ–≤ –ø—ñ—Å–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—É
        for i in range(7):
            doc.add_paragraph(" ", style=middle_spacer_style)
        
        # –ü–Ü–î–ü–ò–°–ò: –ö–û–ñ–ï–ù –†–Ø–î–û–ö = –û–ö–†–ï–ú–ò–ô –ê–ë–ó–ê–¶
        
        # 1. –ü–µ—Ä—à–∏–π –∞–±–∑–∞—Ü –∫–æ–º–∞–Ω–¥–∏—Ä–∞ - –ø–æ—Å–∞–¥–∞
        commander_title_para = doc.add_paragraph(f"–ö–æ–º–∞–Ω–¥–∏—Ä –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ {unit_info}", style=signature_style)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ç–∞–±—É–ª—è—Ü—ñ—é –¥–ª—è —ñ–º–µ–Ω—ñ
        try:
            tab_stops = commander_title_para.paragraph_format.tab_stops
            tab_stops.clear_all()
            tab_stops.add_tab_stop(Cm(15), WD_TAB_ALIGNMENT.RIGHT)
        except Exception as tab_error:
            print(f"Warning: Could not set tab stops: {tab_error}")
        
        # 2. –î—Ä—É–≥–∏–π –∞–±–∑–∞—Ü –∫–æ–º–∞–Ω–¥–∏—Ä–∞ - –∑–≤–∞–Ω–Ω—è —Ç–∞ —ñ–º'—è
        commander_name_para = doc.add_paragraph(style=signature_style)
        commander_name_para.add_run(f"{commander_info['rank']}")
        commander_name_para.add_run(f"\t{commander_info['name']}")
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ç–∞–±—É–ª—è—Ü—ñ—é –¥–ª—è —ñ–º–µ–Ω—ñ
        try:
            tab_stops = commander_name_para.paragraph_format.tab_stops
            tab_stops.clear_all()
            tab_stops.add_tab_stop(Cm(15), WD_TAB_ALIGNMENT.RIGHT)
        except:
            pass
        
        # 3. –†–æ–∑–¥—ñ–ª—é–≤–∞—á –º—ñ–∂ –ø—ñ–¥–ø–∏—Å–∞–º–∏ (9pt –∞–±–∑–∞—Ü)
        spacer_para = doc.add_paragraph(" ", style=signature_spacer_style)
        
        # 4. –ü–µ—Ä—à–∏–π –∞–±–∑–∞—Ü –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ —à—Ç–∞–±—É - –ø–æ—Å–∞–¥–∞
        chief_title_para = doc.add_paragraph(f"–ù–∞—á–∞–ª—å–Ω–∏–∫ —à—Ç–∞–±—É –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ {unit_info}", style=signature_style)
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ç–∞–±—É–ª—è—Ü—ñ—é
        try:
            tab_stops = chief_title_para.paragraph_format.tab_stops
            tab_stops.clear_all()
            tab_stops.add_tab_stop(Cm(15), WD_TAB_ALIGNMENT.RIGHT)
        except:
            pass
        
        # 5. –î—Ä—É–≥–∏–π –∞–±–∑–∞—Ü –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ —à—Ç–∞–±—É - –∑–≤–∞–Ω–Ω—è —Ç–∞ —ñ–º'—è
        chief_name_para = doc.add_paragraph(style=signature_style)
        chief_name_para.add_run(f"{chief_of_staff_info['rank']}")
        chief_name_para.add_run(f"\t{chief_of_staff_info['name']}")
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ç–∞–±—É–ª—è—Ü—ñ—é
        try:
            tab_stops = chief_name_para.paragraph_format.tab_stops
            tab_stops.clear_all()
            tab_stops.add_tab_stop(Cm(15), WD_TAB_ALIGNMENT.RIGHT)
        except:
            pass
        
        # –ö—ñ–Ω—Ü–µ–≤–∏–π –∞–±–∑–∞—Ü
        doc.add_paragraph(" ", style=final_style)
        
        print("‚úÖ Title page created successfully with separate paragraphs for title lines")
        
    except Exception as e:
        print(f"‚úó Error creating title page: {e}")
        import traceback
        traceback.print_exc()

# ===== –î–û–î–ê–¢–ö–û–í–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –°–¢–ò–õ–Ø–ú–ò =====
def ensure_title_page_styles_exist(doc):
    """–ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å—Ç–∏–ª—ñ –¥–ª—è —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —ñ—Å–Ω—É—é—Ç—å"""
    from docx.enum.style import WD_STYLE_TYPE
    
    styles_config = {
        'TitleTopSpacer': {
            'font_size': 31,
            'line_spacing': 1.15,
            'description': '–í–µ—Ä—Ö–Ω—ñ –∞–±–∑–∞—Ü–∏ —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏'
        },
        'TitleMain': {
            'font_size': 28,
            'bold': True,
            'alignment': 'center',
            'description': '–û—Å–Ω–æ–≤–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ê–õ–¨–ë–û–ú'
        },
        'TitleMiddleSpacer': {
            'font_size': 28,
            'line_spacing': 1.15,
            'description': '–°–µ—Ä–µ–¥–Ω—ñ –∞–±–∑–∞—Ü–∏ —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏'
        },
        'TitleSignature': {
            'font_size': 16,
            'left_indent': 1.0,
            'bold': True,
            'description': '–ü—ñ–¥–ø–∏—Å–∏ –Ω–∞ —Ç–∏—Ç—É–ª—å–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ'
        },
        'TitleFinal': {
            'font_size': 16,
            'line_spacing_pt': 16,
            'description': '–ö—ñ–Ω—Ü–µ–≤–∏–π –∞–±–∑–∞—Ü —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏'
        }
    }
    
    for style_name, config in styles_config.items():
        try:
            style = doc.styles[style_name]
            print(f"‚úì Style '{style_name}' already exists")
        except KeyError:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∏–ª—å
            style = doc.styles.add_style(style_name, WD_STYLE_TYPE.PARAGRAPH)
            
            # –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö —Å—Ç–∏–ª—ñ–≤
            style.paragraph_format.first_line_indent = Cm(1)  # 1—Å–º –≤—ñ–¥—Å—Ç—É–ø –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
            style.paragraph_format.space_before = Pt(0)
            style.paragraph_format.space_after = Pt(0)
            style.font.name = 'Arial'
            style.font.size = Pt(config['font_size'])
            
            # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            if 'line_spacing' in config:
                style.paragraph_format.line_spacing = Cm(config['line_spacing'])
                style.paragraph_format.line_spacing_rule = 0
            
            if 'line_spacing_pt' in config:
                style.paragraph_format.line_spacing = Pt(config['line_spacing_pt'])
                style.paragraph_format.line_spacing_rule = 0
                
            if 'left_indent' in config:
                style.paragraph_format.left_indent = Cm(config['left_indent'])
                
            if 'bold' in config:
                style.font.bold = config['bold']
                
            if 'alignment' in config:
                if config['alignment'] == 'center':
                    style.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            print(f"‚úì Created style '{style_name}': {config['description']}")
    
    return True



def get_default_commander_info():
    """–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–∞–Ω–¥–∏—Ä–∞ (–æ–Ω–æ–≤–ª–µ–Ω–∞)"""
    return {
        'rank': '–ø–æ–ª–∫–æ–≤–Ω–∏–∫',
        'name': '–ü.–ü. –ü–ï–¢–†–ï–ù–ö–û'
    }


def get_default_chief_of_staff_info():
    """–ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ —à—Ç–∞–±—É"""
    return {
        'rank': '–ø—ñ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫',
        'name': '–°.–°. –°–ò–î–û–†–ï–ù–ö–û'
    }

class TitlePageTemplateDialog(QDialog):
    """–î—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
    
    def __init__(self, parent=None, mode='create', template_data=None):
        super().__init__(parent)
        self.mode = mode  # 'create' –∞–±–æ 'edit'
        self.template_data = template_data or {}
        
        self.setWindowTitle("–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω" if mode == 'create' else "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —à–∞–±–ª–æ–Ω")
        self.setModal(True)
        self.setMinimumSize(450, 500)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π layout
        layout = QVBoxLayout()
        self.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
        title_label.setFont(QFont("Arial", 14, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("margin-bottom: 15px; padding: 10px; background-color: #f0f0f0; border-radius: 5px;")
        layout.addWidget(title_label)
        
        # –¢–∞–±—É–ª—è—Ü—ñ—è –¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤
        tab_widget = QTabWidget()
        layout.addWidget(tab_widget)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
        main_tab = self.create_main_tab()
        tab_widget.addTab(main_tab, "–û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ")
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –ü–æ—Å–∞–¥–æ–≤—ñ –æ—Å–æ–±–∏
        officials_tab = self.create_officials_tab()
        tab_widget.addTab(officials_tab, "–ü–æ—Å–∞–¥–æ–≤—ñ –æ—Å–æ–±–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –ü–æ–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        margins_tab = self.create_margins_tab()
        tab_widget.addTab(margins_tab, "–ü–æ–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
        
        # –ö–Ω–æ–ø–∫–∏
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        
        # –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫
        button_box.button(QDialogButtonBox.Ok).setText("–ó–±–µ—Ä–µ–≥—Ç–∏")
        button_box.button(QDialogButtonBox.Cancel).setText("–°–∫–∞—Å—É–≤–∞—Ç–∏")
        button_box.setStyleSheet("""
            QPushButton {
                padding: 8px 15px;
                font-size: 11px;
                font-weight: bold;
                border-radius: 5px;
            }
            QPushButton[text="–ó–±–µ—Ä–µ–≥—Ç–∏"] {
                background-color: #4CAF50;
                color: white;
                border: 2px solid #45a049;
            }
            QPushButton[text="–ó–±–µ—Ä–µ–≥—Ç–∏"]:hover {
                background-color: #45a049;
            }
            QPushButton[text="–°–∫–∞—Å—É–≤–∞—Ç–∏"] {
                background-color: #f44336;
                color: white;
                border: 2px solid #da190b;
            }
            QPushButton[text="–°–∫–∞—Å—É–≤–∞—Ç–∏"]:hover {
                background-color: #da190b;
            }
        """)
        
        layout.addWidget(button_box)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ —è–∫—â–æ —Ä–µ–¥–∞–≥—É—î–º–æ
        if self.mode == 'edit' and self.template_data:
            self.load_template_data()
    
    def create_main_tab(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏"""
        widget = QWidget()
        layout = QFormLayout()
        widget.setLayout(layout)
        
        # –ù–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É
        self.name_edit = QLineEdit()
        self.name_edit.setStyleSheet("padding: 8px; font-size: 12px; border: 1px solid #ccc; border-radius: 4px;")
        self.name_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ß–∞—Å—Ç–∏–Ω–∞ –ê1234")
        layout.addRow("–ù–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É:", self.name_edit)
        
        # –ù–∞–∑–≤–∞ –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏
        self.unit_name_edit = QLineEdit()
        self.unit_name_edit.setStyleSheet("padding: 8px; font-size: 12px; border: 1px solid #ccc; border-radius: 4px;")
        self.unit_name_edit.setPlaceholderText("–ê0000")
        layout.addRow("–í—ñ–π—Å—å–∫–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞:", self.unit_name_edit)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        info_label = QLabel("""
        <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b><br>
        ‚Ä¢ –ù–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É - –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –≤–∏–±–æ—Ä—É –≤ —Å–ø–∏—Å–∫—É<br>
        ‚Ä¢ –í—ñ–π—Å—å–∫–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –∫–æ–¥ —á–∞—Å—Ç–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –ê1234)<br>
        ‚Ä¢ –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—É –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ<br>
        ‚Ä¢ –ù–æ–º–µ—Ä —Ü—ñ–ª—ñ –±–µ—Ä–µ—Ç—å—Å—è –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        """)
        info_label.setStyleSheet("""
            background-color: #e3f2fd; 
            border: 1px solid #2196f3; 
            border-radius: 5px; 
            padding: 10px; 
            margin-top: 10px;
            font-size: 11px;
        """)
        info_label.setWordWrap(True)
        layout.addRow(info_label)
        
        return widget
    
    def create_officials_tab(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∑ –ø–æ—Å–∞–¥–æ–≤–∏–º–∏ –æ—Å–æ–±–∞–º–∏ (–û–ù–û–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø –ó –ü–Ü–î–ü–ò–°–û–ú)"""
        widget = QWidget()
        layout = QVBoxLayout()
        widget.setLayout(layout)
        
        # –ö–æ–º–∞–Ω–¥–∏—Ä –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏
        commander_group = QGroupBox("–ö–æ–º–∞–Ω–¥–∏—Ä –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏")
        commander_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                margin-top: 10px;
                padding: 10px;
                border: 2px solid #cccccc;
                border-radius: 5px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        commander_layout = QFormLayout()
        commander_group.setLayout(commander_layout)
        
        self.commander_rank_edit = QLineEdit()
        self.commander_rank_edit.setStyleSheet("padding: 6px; font-size: 11px; border: 1px solid #ccc; border-radius: 4px;")
        self.commander_rank_edit.setPlaceholderText("–ø–æ–ª–∫–æ–≤–Ω–∏–∫")
        commander_layout.addRow("–ó–≤–∞–Ω–Ω—è:", self.commander_rank_edit)
        
        self.commander_name_edit = QLineEdit()
        self.commander_name_edit.setStyleSheet("padding: 6px; font-size: 11px; border: 1px solid #ccc; border-radius: 4px;")
        self.commander_name_edit.setPlaceholderText("–ü.–ü. –ü–ï–¢–†–ï–ù–ö–û")
        commander_layout.addRow("–Ü–º'—è:", self.commander_name_edit)
        
        layout.addWidget(commander_group)
        
        # –ù–∞—á–∞–ª—å–Ω–∏–∫ —à—Ç–∞–±—É
        chief_group = QGroupBox("–ù–∞—á–∞–ª—å–Ω–∏–∫ —à—Ç–∞–±—É")
        chief_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                margin-top: 10px;
                padding: 10px;
                border: 2px solid #cccccc;
                border-radius: 5px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        chief_layout = QFormLayout()
        chief_group.setLayout(chief_layout)
        
        self.chief_rank_edit = QLineEdit()
        self.chief_rank_edit.setStyleSheet("padding: 6px; font-size: 11px; border: 1px solid #ccc; border-radius: 4px;")
        self.chief_rank_edit.setPlaceholderText("–ø—ñ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫")
        chief_layout.addRow("–ó–≤–∞–Ω–Ω—è:", self.chief_rank_edit)
        
        self.chief_name_edit = QLineEdit()
        self.chief_name_edit.setStyleSheet("padding: 6px; font-size: 11px; border: 1px solid #ccc; border-radius: 4px;")
        self.chief_name_edit.setPlaceholderText("–°.–°. –°–ò–î–û–†–ï–ù–ö–û")
        chief_layout.addRow("–Ü–º'—è:", self.chief_name_edit)
        
        layout.addWidget(chief_group)
        
        # ===== –ù–û–í–ò–ô –ë–õ–û–ö: –ù–ê–ß–ê–õ–¨–ù–ò–ö –ì–†–£–ü–ò –°–ï–ö–†–ï–¢–ù–û–ì–û –î–û–ö–£–ú–ï–ù–¢–ê–õ–¨–ù–û–ì–û –ó–ê–ë–ï–ó–ü–ï–ß–ï–ù–ù–Ø =====
        signature_group = QGroupBox("–ù–∞—á–∞–ª—å–Ω–∏–∫ –≥—Ä—É–ø–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è")
        signature_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                margin-top: 10px;
                padding: 10px;
                border: 2px solid #e74c3c;  /* –ß–µ—Ä–≤–æ–Ω–∞ —Ä–∞–º–∫–∞ –¥–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è */
                border-radius: 5px;
                background-color: #fdf2f2;  /* –°–≤—ñ—Ç–ª–æ-—á–µ—Ä–≤–æ–Ω–∏–π —Ñ–æ–Ω */
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                color: #c0392b;
            }
        """)
        signature_layout = QFormLayout()
        signature_group.setLayout(signature_layout)
        
        self.signature_rank_edit = QLineEdit()
        self.signature_rank_edit.setStyleSheet("padding: 6px; font-size: 11px; border: 1px solid #ccc; border-radius: 4px;")
        self.signature_rank_edit.setPlaceholderText("–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç")
        signature_layout.addRow("–ó–≤–∞–Ω–Ω—è:", self.signature_rank_edit)
        
        self.signature_name_edit = QLineEdit()
        self.signature_name_edit.setStyleSheet("padding: 6px; font-size: 11px; border: 1px solid #ccc; border-radius: 4px;")
        self.signature_name_edit.setPlaceholderText("–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–µ–Ω–∫–æ")
        signature_layout.addRow("–Ü–º'—è:", self.signature_name_edit)
        
        layout.addWidget(signature_group)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (–û–ù–û–í–õ–ï–ù–ê)
        info_label = QLabel("""
        <b>–§–æ—Ä–º–∞—Ç —ñ–º–µ–Ω:</b> –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª–∏ –≤–µ–ª–∏–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏<br>
        <b>–ü—Ä–∏–∫–ª–∞–¥:</b> –Ü–í–ê–ù–û–í –Ü.–Ü., –ü–ï–¢–†–ï–ù–ö–û –ü.–ü.<br><br>
        <b>–ó–≤–∞–Ω–Ω—è:</b> –ü–æ–≤–Ω–µ –≤—ñ–π—Å—å–∫–æ–≤–µ –∑–≤–∞–Ω–Ω—è –º–∞–ª–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏<br>
        <b>–ü—Ä–∏–∫–ª–∞–¥:</b> –ø–æ–ª–∫–æ–≤–Ω–∏–∫, –ø—ñ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫, –º–∞–π–æ—Ä, –≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç<br><br>
        <b>–£–í–ê–ì–ê:</b> –ù–∞—á–∞–ª—å–Ω–∏–∫ –≥—Ä—É–ø–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è<br>
        –ø—ñ–¥–ø–∏—Å—É—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–ø–∏—Å—É –¥–æ–∫—É–º–µ–Ω—Ç—É (2-–≥–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞)
        """)
        info_label.setStyleSheet("""
            background-color: #fff3e0; 
            border: 1px solid #ff9800; 
            border-radius: 5px; 
            padding: 10px; 
            margin-top: 10px;
            font-size: 11px;
        """)
        info_label.setWordWrap(True)
        layout.addWidget(info_label)
        
        layout.addStretch()
        return widget
    
    def create_margins_tab(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –ø–æ–ª—ñ–≤ (–û–ù–û–í–õ–ï–ù–Ü –ó–ù–ê–ß–ï–ù–ù–Ø)"""
        widget = QWidget()
        layout = QFormLayout()
        widget.setLayout(layout)
        
        margins_group = QGroupBox("–ü–æ–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö)")
        margins_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                margin-top: 10px;
                padding: 15px;
                border: 2px solid #cccccc;
                border-radius: 5px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        margins_layout = QFormLayout()
        margins_group.setLayout(margins_layout)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ spinbox'–∏ –¥–ª—è –ø–æ–ª—ñ–≤ (–û–ù–û–í–õ–ï–ù–Ü –ó–ù–ê–ß–ï–ù–ù–Ø)
        self.margin_top_spin = QDoubleSpinBox()
        self.margin_top_spin.setRange(0, 10)
        self.margin_top_spin.setSingleStep(0.25)
        self.margin_top_spin.setDecimals(2)
        self.margin_top_spin.setValue(2.25)   # –ó–ú–Ü–ù–ï–ù–û: 2.25—Å–º
        self.margin_top_spin.setSuffix(" —Å–º")
        self.margin_top_spin.setStyleSheet("padding: 6px; font-size: 11px;")
        margins_layout.addRow("–í–µ—Ä—Ö–Ω—î –ø–æ–ª–µ:", self.margin_top_spin)
        
        self.margin_left_spin = QDoubleSpinBox()
        self.margin_left_spin.setRange(0, 10)
        self.margin_left_spin.setSingleStep(0.25)
        self.margin_left_spin.setDecimals(2)
        self.margin_left_spin.setValue(2.5)  # –ó–ú–Ü–ù–ï–ù–û: 2.5—Å–º
        self.margin_left_spin.setSuffix(" —Å–º")
        self.margin_left_spin.setStyleSheet("padding: 6px; font-size: 11px;")
        margins_layout.addRow("–õ—ñ–≤–µ –ø–æ–ª–µ:", self.margin_left_spin)
        
        self.margin_bottom_spin = QDoubleSpinBox()
        self.margin_bottom_spin.setRange(0, 10)
        self.margin_bottom_spin.setSingleStep(0.25)
        self.margin_bottom_spin.setDecimals(2)
        self.margin_bottom_spin.setValue(0)   # –ó–∞–ª–∏—à–∞—î—Ç—å—Å—è 0—Å–º
        self.margin_bottom_spin.setSuffix(" —Å–º")
        self.margin_bottom_spin.setStyleSheet("padding: 6px; font-size: 11px;")
        margins_layout.addRow("–ù–∏–∂–Ω—î –ø–æ–ª–µ:", self.margin_bottom_spin)
        
        self.margin_right_spin = QDoubleSpinBox()
        self.margin_right_spin.setRange(0, 10)
        self.margin_right_spin.setSingleStep(0.25)
        self.margin_right_spin.setDecimals(2)
        self.margin_right_spin.setValue(0.75)  # –ó–∞–ª–∏—à–∞—î—Ç—å—Å—è 0.75—Å–º
        self.margin_right_spin.setSuffix(" —Å–º")
        self.margin_right_spin.setStyleSheet("padding: 6px; font-size: 11px;")
        margins_layout.addRow("–ü—Ä–∞–≤–µ –ø–æ–ª–µ:", self.margin_right_spin)
        
        layout.addRow(margins_group)
        
        # –û–ù–û–í–õ–ï–ù–ê —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–ª—è
        info_label = QLabel("""
        <b>–ù–æ–≤—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:</b><br>
        ‚Ä¢ –í–µ—Ä—Ö–Ω—î –ø–æ–ª–µ: 2,5 —Å–º<br>
        ‚Ä¢ –õ—ñ–≤–µ –ø–æ–ª–µ: 2,25 —Å–º<br>
        ‚Ä¢ –ù–∏–∂–Ω—î –ø–æ–ª–µ: 0 —Å–º<br>
        ‚Ä¢ –ü—Ä–∞–≤–µ –ø–æ–ª–µ: 0,75 —Å–º<br><br>
        <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> –¶—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–∞ —Ç–∏—Ç—É–ª—å–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        """)
        info_label.setStyleSheet("""
            background-color: #f3e5f5; 
            border: 1px solid #9c27b0; 
            border-radius: 5px; 
            padding: 10px; 
            margin-top: 15px;
            font-size: 11px;
        """)
        info_label.setWordWrap(True)
        layout.addRow(info_label)
        
        return widget
    
    def load_template_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —à–∞–±–ª–æ–Ω—É —É –ø–æ–ª—è —Ñ–æ—Ä–º–∏ (–û–ù–û–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø)"""
        if not self.template_data:
            return
        
        # –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
        self.name_edit.setText(self.template_data.get('name', ''))
        self.unit_name_edit.setText(self.template_data.get('unit_name', '–ê0000'))
        
        # –ö–æ–º–∞–Ω–¥–∏—Ä
        commander = self.template_data.get('commander', {})
        self.commander_rank_edit.setText(commander.get('rank', '–ø–æ–ª–∫–æ–≤–Ω–∏–∫'))
        self.commander_name_edit.setText(commander.get('name', '–ü.–ü. –ü–ï–¢–†–ï–ù–ö–û'))
        
        # –ù–∞—á–∞–ª—å–Ω–∏–∫ —à—Ç–∞–±—É
        chief = self.template_data.get('chief_of_staff', {})
        self.chief_rank_edit.setText(chief.get('rank', '–ø—ñ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫'))
        self.chief_name_edit.setText(chief.get('name', '–°.–°. –°–ò–î–û–†–ï–ù–ö–û'))
        
        # ===== –ù–û–í–ò–ô –ë–õ–û–ö: –ù–ê–ß–ê–õ–¨–ù–ò–ö –ì–†–£–ü–ò –°–ï–ö–†–ï–¢–ù–û–ì–û –î–û–ö–£–ú–ï–ù–¢–ê–õ–¨–ù–û–ì–û –ó–ê–ë–ï–ó–ü–ï–ß–ï–ù–ù–Ø =====
        signature = self.template_data.get('signature_info', {})
        self.signature_rank_edit.setText(signature.get('rank', '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç'))
        self.signature_name_edit.setText(signature.get('name', '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–µ–Ω–∫–æ'))
        
        # –ü–æ–ª—è
        margins = self.template_data.get('margins', {})
        self.margin_top_spin.setValue(margins.get('top', 2.25))
        self.margin_left_spin.setValue(margins.get('left', 2.5))
        self.margin_bottom_spin.setValue(margins.get('bottom', 0))
        self.margin_right_spin.setValue(margins.get('right', 0.75))

    def get_template_data(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–æ—Ä–º–∏ (–û–ù–û–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø)"""
        return {
            'name': self.name_edit.text().strip(),
            'unit_name': self.unit_name_edit.text().strip() or '–ê0000',
            'commander': {
                'rank': self.commander_rank_edit.text().strip() or '–ø–æ–ª–∫–æ–≤–Ω–∏–∫',
                'name': self.commander_name_edit.text().strip() or '–ü.–ü. –ü–ï–¢–†–ï–ù–ö–û'
            },
            'chief_of_staff': {
                'rank': self.chief_rank_edit.text().strip() or '–ø—ñ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫',
                'name': self.chief_name_edit.text().strip() or '–°.–°. –°–ò–î–û–†–ï–ù–ö–û'
            },
            # ===== –ù–û–í–ò–ô –ë–õ–û–ö: –ü–Ü–î–ü–ò–° =====
            'signature_info': {
                'rank': self.signature_rank_edit.text().strip() or '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç',
                'name': self.signature_name_edit.text().strip() or '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–µ–Ω–∫–æ'
            },
            'margins': {
                'top': self.margin_top_spin.value(),
                'left': self.margin_left_spin.value(),
                'bottom': self.margin_bottom_spin.value(),
                'right': self.margin_right_spin.value()
            },
            'created_date': datetime.now().isoformat(),
            'version': '1.1'  # –ó–±—ñ–ª—å—à—É—î–º–æ –≤–µ—Ä—Å—ñ—é —á–µ—Ä–µ–∑ –Ω–æ–≤—ñ –ø–æ–ª—è
        }
        
    def accept(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º"""
        if not self.name_edit.text().strip():
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–∞–∑–≤–∞ —à–∞–±–ª–æ–Ω—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é")
            return
        
        if not self.unit_name_edit.text().strip():
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–∞–∑–≤–∞ –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é")
            return
        
        super().accept()

# ===== –û–°–ù–û–í–ù–ò–ô –ö–õ–ê–° GUI =====

class AzimuthGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.processor = None
        self.current_image_path = None
        self.current_click = None
        self.scale_factor_x = 1.0
        self.scale_factor_y = 1.0
        self.offset_x = 0
        self.offset_y = 0
        self.current_folder = None
        
        self.current_language = 'UKRAINIAN'  # Default language
        self.translations = Translations()
        
        self.scale_edge_mode = False
        self.scale_edge_point = None
        self.custom_scale_distance = None
        self.center_setting_mode = False
        
        self.current_target_number = "0001"
        self.current_height = "0.0"
        self.current_obstacles = "–±–µ–∑ –ø–µ—Ä–µ—à–∫–æ–¥"
        self.current_detection = "–í–∏—è–≤–ª–µ–Ω–Ω—è"

        self.radar_description_enabled = False
        self.radar_date = QDate.currentDate()
        self.radar_callsign = ""
        self.radar_name = ""
        self.radar_number = ""

        self.document_date = QDate.currentDate()
        
        self.processed_images = []

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
        self.doc_manager = DocumentationManager()
        self.doc_manager.create_documentation_files()  # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É

        self.processed_image_paths = set()  # –ú–Ω–æ–∂–∏–Ω–∞ —à–ª—è—Ö—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
        
        # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å—ñ—Ç–∫–∏ –º—ñ–∂ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
        self.saved_grid_settings = {
            'center_offset_x': 0,
            'center_offset_y': 0,
            'scale_edge_relative': None,
            'custom_scale_distance': None,
            'scale_value': "300"
        }
        self.setStyleSheet(self.styleSheet() + """
            QDateEdit {
                color: #333333 !important;  /* –¢–µ–º–Ω–æ-—Å—ñ—Ä–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å—ñ—Ö QDateEdit */
                background-color: white;
            }
            QDateEdit:hover {
                background-color: #f8f8f8;
            }
            QDateEdit:focus {
                border: 1px solid #007acc;
            }
            QDateEdit:disabled {
                background-color: #f5f5f5;
                color: #888888;
            }
            
            /* –ö–ê–õ–ï–ù–î–ê–† –ü–û–ü–ê–ü –ì–õ–û–ë–ê–õ–¨–ù–û */
            QCalendarWidget {
                background-color: white;
                color: #333333 !important;
            }
            QCalendarWidget * {
                color: #333333 !important;  /* –¢–µ–º–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –í–°–Ü–• –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ */
            }
            QCalendarWidget QAbstractItemView {
                background-color: white;
                color: #333333 !important;
                selection-background-color: #007acc;
                selection-color: white !important;
            }
            QCalendarWidget QToolButton {
                color: #333333 !important;
                background-color: #f0f0f0;
            }
            QCalendarWidget QToolButton:hover {
                color: #000000 !important;  /* –ß–æ—Ä–Ω–∏–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ */
                background-color: #e0e0e0;
            }
            QCalendarWidget QSpinBox {
                color: #333333 !important;
                background-color: white;
            }
            QCalendarWidget QHeaderView::section {
                color: #333333 !important;
                background-color: #f0f0f0;
                font-weight: bold;
            }
        """)
        
        self.init_ui()

        # ===== –ú–ï–¢–û–î–ò –î–õ–Ø –û–ë–†–û–ë–ö–ò –û–ü–ò–°–£ –†–õ–° =====

    def keyPressEvent(self, event):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–ª–∞–≤—ñ—à –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä—É/–∫—Ä–∞—é –º–∞—Å—à—Ç–∞–±—É"""
        # –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –ß–ò –ê–ö–¢–ò–í–ù–ò–ô –°–ü–ï–¶–Ü–ê–õ–¨–ù–ò–ô –†–ï–ñ–ò–ú
        if not (self.center_setting_mode or self.scale_edge_mode):
            super().keyPressEvent(event)
            return
        
        if not self.processor:
            super().keyPressEvent(event)
            return
        
        # ‚≠ê –ó–ê–ë–ò–†–ê–Ñ–ú–û –§–û–ö–£–° –ó –ü–û–õ–Ü–í –í–í–ï–î–ï–ù–ù–Ø, –ê–õ–ï –ü–ï–†–ï–î–ê–Ñ–ú–û –ó–û–ë–†–ê–ñ–ï–ù–ù–Æ
        focused_widget = self.focusWidget()
        if focused_widget and isinstance(focused_widget, (QLineEdit, QComboBox, QDateEdit)):
            # –ü–µ—Ä–µ–¥–∞—î–º–æ —Ñ–æ–∫—É—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –º–∏—à—ñ
            if hasattr(self, 'image_label'):
                self.image_label.setFocus()
            else:
                self.setFocus()
            print(f"üéØ Focus moved from {type(focused_widget).__name__} to image")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—Ä–æ–∫ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
        step = 1  # –ë–∞–∑–æ–≤–∏–π –∫—Ä–æ–∫
        if event.modifiers() & Qt.ShiftModifier:
            step = 5  # –í–µ–ª–∏–∫–∏–π –∫—Ä–æ–∫ –∑ Shift
        elif event.modifiers() & Qt.ControlModifier:
            step = 0.5  # –ú–∞–ª–∏–π –∫—Ä–æ–∫ –∑ Ctrl
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç—Ä—ñ–ª–∫–∏
        dx, dy = 0, 0
        if event.key() == Qt.Key_Left:
            dx = -step
        elif event.key() == Qt.Key_Right:
            dx = step
        elif event.key() == Qt.Key_Up:
            dy = -step
        elif event.key() == Qt.Key_Down:
            dy = step
        elif event.key() == Qt.Key_Escape:
            # Escape –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ —Ä–µ–∂–∏–º—É
            if self.center_setting_mode:
                self.toggle_center_setting_mode()
            elif self.scale_edge_mode:
                self.toggle_scale_edge_mode()
            return
        else:
            super().keyPressEvent(event)
            return
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
        if dx != 0 or dy != 0:
            if self.center_setting_mode:
                self.move_center_with_keyboard(dx, dy)
            elif self.scale_edge_mode:
                self.move_scale_edge_with_keyboard(dx, dy)
        
        event.accept()

    def move_center_with_keyboard(self, dx, dy):
        """–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∑—É–º–æ–º"""
        if not self.processor:
            return
        
        self.processor.move_center(dx, dy)
        self.save_current_grid_settings()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ—á–∫—É –∞–Ω–∞–ª—ñ–∑—É —è–∫—â–æ —î
        if self.current_click:
            azimuth, range_val = self.calculate_azimuth_range(
                self.current_click['x'], self.current_click['y']
            )
            self.current_click['azimuth'] = azimuth
            self.current_click['range'] = range_val
        
        self.display_image()
        self.update_results_display()
        self.update_report_data()
        
        # ‚≠ê –ü–û–ö–ê–ó–£–Ñ–ú–û –ó–£–ú –ù–ê –ù–û–í–Ü–ô –ü–û–ó–ò–¶–Ü–á –¶–ï–ù–¢–†–£
        if hasattr(self, 'image_label'):
            self.image_label.zoom_widget.show_zoom()
            self.image_label.zoom_widget.update_cursor_position(
                self.processor.center_x, self.processor.center_y
            )
    
        self.add_result(f"–¶–µ–Ω—Ç—Ä: ({self.processor.center_x}, {self.processor.center_y}) | ‚Üê‚Üí‚Üë‚Üì")

    def move_scale_edge_with_keyboard(self, dx, dy):
        """–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫—Ä–∞—é –º–∞—Å—à—Ç–∞–±—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∑—É–º–æ–º"""
        if not self.processor:
            return
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ scale edge point —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        if not self.scale_edge_point:
            self.scale_edge_point = {
                'x': self.processor.center_x + 50,
                'y': self.processor.center_y + 50
            }
        
        # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ç–æ—á–∫—É
        new_x = max(0, min(self.scale_edge_point['x'] + dx, self.processor.image.width - 1))
        new_y = max(0, min(self.scale_edge_point['y'] + dy, self.processor.image.height - 1))
        
        self.scale_edge_point['x'] = new_x
        self.scale_edge_point['y'] = new_y
        
        # –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å
        dx_scale = new_x - self.processor.center_x
        dy_scale = new_y - self.processor.center_y
        self.custom_scale_distance = math.sqrt(dx_scale*dx_scale + dy_scale*dy_scale)
        
        self.save_current_grid_settings()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ—á–∫—É –∞–Ω–∞–ª—ñ–∑—É —è–∫—â–æ —î
        if self.current_click:
            azimuth, range_val = self.calculate_azimuth_range(
                self.current_click['x'], self.current_click['y']
            )
            self.current_click['azimuth'] = azimuth
            self.current_click['range'] = range_val
        
        self.display_image()
        self.update_results_display()
        self.update_report_data()
        
        # ‚≠ê –ü–û–ö–ê–ó–£–Ñ–ú–û –ó–£–ú –ù–ê –ù–û–í–Ü–ô –ü–û–ó–ò–¶–Ü–á –ö–†–ê–Æ –ú–ê–°–®–¢–ê–ë–£
        if hasattr(self, 'image_label'):
            self.image_label.zoom_widget.show_zoom()
            self.image_label.zoom_widget.update_cursor_position(new_x, new_y)
    
        self.add_result(f"–ö—Ä–∞–π –º–∞—Å—à—Ç–∞–±—É: ({new_x}, {new_y}) | –í—ñ–¥—Å—Ç–∞–Ω—å: {self.custom_scale_distance:.1f}px")

    def toggle_radar_description(self, checked):
        """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É –æ–ø–∏—Å—É –†–õ–°"""
        self.radar_description_enabled = checked
        
        # –ê–∫—Ç–∏–≤—É—î–º–æ/–¥–µ–∞–∫—Ç–∏–≤—É—î–º–æ –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è
        self.radar_date_edit.setEnabled(checked)
        self.radar_callsign_input.setEnabled(checked)
        self.radar_name_input.setEnabled(checked)
        self.radar_number_input.setEnabled(checked)
        
        if checked:
            self.add_result("‚úì –†–µ–∂–∏–º –æ–ø–∏—Å—É –†–õ–° –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
            self.add_result("  –í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ –¥–æ –≤—Å—ñ—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        else:
            self.add_result("‚úó –†–µ–∂–∏–º –æ–ø–∏—Å—É –†–õ–° –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")
            self.add_result("  –î–∞–Ω—ñ –†–õ–° –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏–º—É—Ç—å—Å—è")

    def update_radar_date(self, date):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –†–õ–°"""
        self.radar_date = date
        if self.radar_description_enabled:
            self.add_result(f"üìÖ –î–∞—Ç–∞ –†–õ–° –æ–Ω–æ–≤–ª–µ–Ω–∞: {date.toString('dd.MM.yyyy')}")

    def update_radar_callsign(self, text):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏–≤–Ω–æ–≥–æ –†–õ–°"""
        self.radar_callsign = text
        if self.radar_description_enabled and text:
            self.add_result(f"üì° –ü–æ–∑–∏–≤–Ω–∏–π –†–õ–°: {text}")

    def update_radar_name(self, text):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –†–õ–°"""
        self.radar_name = text
        if self.radar_description_enabled and text:
            self.add_result(f"üìã –ù–∞–∑–≤–∞ –†–õ–°: {text}")

    def update_radar_number(self, text):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –†–õ–°"""
        self.radar_number = text
        if self.radar_description_enabled and text:
            self.add_result(f"üî¢ –ù–æ–º–µ—Ä –†–õ–°: {text}")

    def get_radar_description_data(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –æ–ø–∏—Å—É –†–õ–°"""
        if not self.radar_description_enabled:
            return None
        
        return {
            'enabled': True,
            'date': self.radar_date,
            'callsign': self.radar_callsign,
            'name': self.radar_name,
            'number': self.radar_number
        }

    # =====================================
    
    def tr(self, key):
        return self.translations.get(self.current_language, key)
    
    def set_language(self, language):
        self.current_language = language
        self.update_interface_text()
        
        for lang, action in self.language_actions.items():
            action.setChecked(lang == language)
    
    def update_interface_text(self):
        self.setWindowTitle(self.tr("window_title"))
        self.create_menu_bar()
        
        if hasattr(self, 'control_title'):
            self.control_title.setText(self.tr("controls"))
        if hasattr(self, 'report_title'):
            self.report_title.setText(self.tr("report_data"))
        if hasattr(self, 'browser_label'):
            self.browser_label.setText(self.tr("photo_browser"))
        
        if hasattr(self, 'open_image_btn'):
            self.open_image_btn.setText(self.tr("open_image"))
        if hasattr(self, 'open_folder_btn'):
            self.open_folder_btn.setText(self.tr("open_folder"))
        if hasattr(self, 'save_image_btn'):
            self.save_image_btn.setText(self.tr("save_current_image"))
        if hasattr(self, 'export_new_btn'):
            self.export_new_btn.setText(self.tr("create_new_album"))
        if hasattr(self, 'export_add_btn'):
            self.export_add_btn.setText(self.tr("add_to_existing_album"))
        if hasattr(self, 'scale_edge_btn'):
            self.scale_edge_btn.setText(self.tr("set_scale_edge"))
        if hasattr(self, 'set_center_btn'):
            self.set_center_btn.setText(self.tr("set_center"))
        
        if hasattr(self, 'file_ops_label'):
            self.file_ops_label.setText(self.tr("file_operations"))
        if hasattr(self, 'azimuth_grid_label'):
            self.azimuth_grid_label.setText(self.tr("azimuth_grid"))
        if hasattr(self, 'move_center_label'):
            self.move_center_label.setText(self.tr("move_center"))
        if hasattr(self, 'results_label'):
            self.results_label.setText(self.tr("results"))
        
        # Batch processing –ø–µ—Ä–µ–∫–ª–∞–¥–∏
        if hasattr(self, 'batch_label'):
            self.batch_label.setText(self.tr("batch_processing"))
        if hasattr(self, 'save_current_btn'):
            self.save_current_btn.setText(self.tr("save_current_image_data"))
        
        if not self.current_image_path:
            self.image_label.setText(self.tr("open_instruction"))
        
        if self.processor:
            self.update_results_display()

    def init_ui(self):
        self.setWindowTitle(self.tr("window_title"))
        
        default_width = 1400
        default_height = 900
        min_width = 1000  
        min_height = 700
        self.setMinimumSize(min_width, min_height)
        self.setWindowFlags(Qt.Window)
        self.resize(default_width, default_height)
        self.showMaximized()
        
        self.create_menu_bar()
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QHBoxLayout()
        central_widget.setLayout(main_layout)
        
        main_splitter = QSplitter(Qt.Horizontal)
        main_layout.addWidget(main_splitter)
        
        self.create_control_panel(main_splitter)
        self.create_vertical_browser_panel(main_splitter)
        self.create_image_panel(main_splitter)
        self.create_report_panel(main_splitter)
        
        main_splitter.setStretchFactor(0, 0)
        main_splitter.setStretchFactor(1, 0)
        main_splitter.setStretchFactor(2, 1)
        main_splitter.setStretchFactor(3, 0)
        
        main_splitter.setSizes([220, 0, 960, 220])  # 220+960+220 = 1400px
        self.main_splitter = main_splitter

    def resizeEvent(self, event):
        """–û–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Ç–æ–¥ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
        super().resizeEvent(event)
        
        if hasattr(self, 'processor') and self.processor:
            QTimer.singleShot(50, self.update_image_display_after_resize)
        
        if hasattr(self, 'main_splitter') and hasattr(self, 'browser_widget'):
            current_sizes = self.main_splitter.sizes()
            total_width = sum(current_sizes)
            
            if total_width > 800:
                if self.browser_widget.isVisible():
                    # –ü–†–ê–í–ò–õ–¨–ù–Ü —Ä–æ–∑–º—ñ—Ä–∏: 220 + 280 + ? + 220 = total_width
                    new_image_width = max(450, total_width - 220 - 280 - 220)  # –ú—ñ–Ω—ñ–º—É–º 450px
                    self.main_splitter.setSizes([220, 280, new_image_width, 220])
                else:
                    # 220 + 0 + ? + 220 = total_width  
                    new_image_width = max(450, total_width - 220 - 220)  # –ú—ñ–Ω—ñ–º—É–º 450px
                    self.main_splitter.setSizes([220, 0, new_image_width, 220])
    
    def update_image_display_after_resize(self):
        if hasattr(self, 'processor') and self.processor:
            self.display_image()
    
    def create_menu_bar(self):
        menubar = self.menuBar()
        menubar.clear()
        
        settings_menu = menubar.addMenu(self.tr("settings"))
        language_menu = settings_menu.addMenu(self.tr("language"))
        
        english_action = language_menu.addAction("English")
        english_action.triggered.connect(lambda: self.set_language('ENGLISH'))
        
        ukrainian_action = language_menu.addAction("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
        ukrainian_action.triggered.connect(lambda: self.set_language('UKRAINIAN'))
        
        english_action.setCheckable(True)
        ukrainian_action.setCheckable(True)
        
        english_action.setChecked(self.current_language == 'ENGLISH')
        ukrainian_action.setChecked(self.current_language == 'UKRAINIAN')
        
        self.language_actions = {
            'ENGLISH': english_action,
            'UKRAINIAN': ukrainian_action
        }

        settings_menu.addSeparator()
        
        help_action = settings_menu.addAction("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è")
        help_action.triggered.connect(self.show_documentation)
        
        about_action = settings_menu.addAction("‚ÑπÔ∏è –ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É")
        about_action.triggered.connect(self.show_about)

    def show_documentation(self):
        '''–í—ñ–¥–∫—Ä–∏—Ç—Ç—è HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó'''
        try:
            success = self.doc_manager.show_documentation()
            if not success:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", 
                                "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é.\\n"
                                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—Ä–∞—É–∑–µ—Ä–∞.")
        except Exception as e:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó: {str(e)}")

    def show_about(self):
        '''–ü–æ–∫–∞–∑–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ "–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É"'''
        dialog = AboutDialog(self)
        dialog.exec_()

    # ===== –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –í azymuth7.py =====

    def create_control_panel(self, parent):
        """–õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø)"""
        control_widget = QWidget()
        control_widget.setFixedWidth(250)
        control_widget.setStyleSheet("""
            QWidget {
                background-color: #f5f5f5; 
                border-right: 1px solid #ccc;
            }
            QLabel {
                background: none;
                border: none;
                color: #333;
            }
            QPushButton {
                background-color: #e1e1e1;
                border: 1px solid #c1c1c1;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 11px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #d1d1d1;
                border: 1px solid #b1b1b1;
            }
            QPushButton:pressed {
                background-color: #c1c1c1;
            }
            QComboBox, QDateEdit {
                border: 1px solid #c1c1c1;
                border-radius: 4px;
                padding: 4px 8px;
                background-color: white;
                font-size: 11px;
            }
            QDateEdit {
                min-height: 24px;
            }
        """)
        
        layout = QVBoxLayout()
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(10)
        control_widget.setLayout(layout)
        
        # Title
        self.control_title = QLabel(self.tr("controls"))
        self.control_title.setFont(QFont("Arial", 14, QFont.Bold))
        self.control_title.setAlignment(Qt.AlignCenter)
        self.control_title.setStyleSheet("font-size: 14px; font-weight: bold; margin-bottom: 10px;")
        layout.addWidget(self.control_title)
        
        # File operations section
        self.file_ops_label = QLabel(self.tr("file_operations"))
        self.file_ops_label.setFont(QFont("Arial", 10, QFont.Bold))
        self.file_ops_label.setStyleSheet("color: #666; margin-top: 10px; margin-bottom: 5px;")
        layout.addWidget(self.file_ops_label)
        
        # File operation buttons
        self.open_image_btn = QPushButton(self.tr("open_image"))
        self.open_image_btn.clicked.connect(self.open_image)
        self.open_image_btn.setStyleSheet("""
            QPushButton {
                background-color: #e1e1e1;
                border: 2px solid #c1c1c1;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 11px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #d1d1d1;
                border: 2px solid #b1b1b1;
            }
            QPushButton:pressed {
                background-color: #c1c1c1;
                border: 2px solid #a1a1a1;
            }
        """)
        layout.addWidget(self.open_image_btn)
        
        self.open_folder_btn = QPushButton(self.tr("open_folder"))
        self.open_folder_btn.clicked.connect(self.open_folder)
        self.open_folder_btn.setStyleSheet("""
            QPushButton {
                background-color: #e1e1e1;
                border: 2px solid #c1c1c1;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 11px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #d1d1d1;
                border: 2px solid #b1b1b1;
            }
            QPushButton:pressed {
                background-color: #c1c1c1;
                border: 2px solid #a1a1a1;
            }
        """)
        layout.addWidget(self.open_folder_btn)
        
        self.save_image_btn = QPushButton(self.tr("save_current_image"))
        self.save_image_btn.clicked.connect(self.save_current_image)
        self.save_image_btn.setStyleSheet("""
            QPushButton {
                background-color: #e1e1e1;
                border: 2px solid #c1c1c1;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 11px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #d1d1d1;
                border: 2px solid #b1b1b1;
            }
            QPushButton:pressed {
                background-color: #c1c1c1;
                border: 2px solid #a1a1a1;
            }
        """)
        layout.addWidget(self.save_image_btn)
        
        # Separator
        separator1 = QFrame()
        separator1.setFrameShape(QFrame.HLine)
        separator1.setFrameShadow(QFrame.Sunken)
        separator1.setStyleSheet("color: #ccc; margin: 10px 0px;")
        layout.addWidget(separator1)

        # ===== –†–û–ó–î–Ü–õ: –¢–ò–¢–£–õ–¨–ù–ê –°–¢–û–†–Ü–ù–ö–ê =====
        self.title_page_label = QLabel("–¢–∏—Ç—É–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞")
        self.title_page_label.setFont(QFont("Arial", 10, QFont.Bold))
        self.title_page_label.setStyleSheet("color: #666; margin-top: 5px; margin-bottom: 5px;")
        layout.addWidget(self.title_page_label)
        
        # ===== –î–ê–¢–ê –î–û–ö–£–ú–ï–ù–¢–£ –í –†–û–ó–î–Ü–õ–Ü –¢–ò–¢–£–õ–¨–ù–û–á –°–¢–û–†–Ü–ù–ö–ò =====
        date_layout = QHBoxLayout()
        date_layout.addWidget(QLabel("–î–∞—Ç–∞:"))
        
        # –í—ñ–¥–∂–µ—Ç –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—É
        self.document_date_edit = QDateEdit()
        self.document_date_edit.setDate(self.document_date)
        self.document_date_edit.setCalendarPopup(True)
        self.document_date_edit.setDisplayFormat("dd.MM.yyyy")
        self.document_date_edit.setFixedHeight(28)
        self.document_date_edit.setStyleSheet("""
            QDateEdit {
                border: 1px solid #c1c1c1;
                border-radius: 4px;
                padding: 4px 8px;
                background-color: white;
                font-size: 10px;
            }
            QDateEdit:hover {
                border: 1px solid #b1b1b1;
            }
            QDateEdit:focus {
                border: 1px solid #007acc;
            }
        """)
        self.document_date_edit.dateChanged.connect(self.update_document_date)
        date_layout.addWidget(self.document_date_edit)
        
        date_widget = QWidget()
        date_widget.setLayout(date_layout)
        layout.addWidget(date_widget)
        
        # –ö–Ω–æ–ø–∫–∞ "–°—å–æ–≥–æ–¥–Ω—ñ" (–º–µ–Ω—à–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É)
        self.today_btn = QPushButton("–°—å–æ–≥–æ–¥–Ω—ñ")
        self.today_btn.clicked.connect(self.set_document_date_today)
        self.today_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: 1px solid #1976D2;
                border-radius: 4px;
                padding: 3px 8px;
                font-size: 9px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        layout.addWidget(self.today_btn)
        
        # –í–∏–ø–∞–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤
        template_layout = QHBoxLayout()
        template_layout.addWidget(QLabel("–®–∞–±–ª–æ–Ω:"))
        
        # ===== –°–¢–í–û–†–Æ–Ñ–ú–û template_combo –¢–£–¢! =====
        self.template_combo = QComboBox()
        self.template_combo.setStyleSheet("""
            QComboBox {
                border: 1px solid #c1c1c1;
                border-radius: 4px;
                padding: 4px 8px;
                background-color: white;
                font-size: 10px;
            }
        """)
        self.template_combo.currentTextChanged.connect(self.on_template_changed)
        template_layout.addWidget(self.template_combo)
        
        template_widget = QWidget()
        template_widget.setLayout(template_layout)
        layout.addWidget(template_widget)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —à–∞–±–ª–æ–Ω–∞–º–∏
        self.create_template_btn = QPushButton("–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω")
        self.create_template_btn.clicked.connect(self.create_new_template)
        self.create_template_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: 2px solid #45a049;
                border-radius: 6px;
                padding: 6px 8px;
                font-size: 10px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
                border: 2px solid #3d8b40;
            }
        """)
        layout.addWidget(self.create_template_btn)
        
        self.edit_template_btn = QPushButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —à–∞–±–ª–æ–Ω")
        self.edit_template_btn.clicked.connect(self.edit_current_template)
        self.edit_template_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: 2px solid #f57c00;
                border-radius: 6px;
                padding: 6px 8px;
                font-size: 10px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #f57c00;
                border: 2px solid #ef6c00;
            }
        """)
        layout.addWidget(self.edit_template_btn)
        
        # Separator –ø—ñ—Å–ª—è —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        separator2 = QFrame()
        separator2.setFrameShape(QFrame.HLine)
        separator2.setFrameShadow(QFrame.Sunken)
        separator2.setStyleSheet("color: #ccc; margin: 10px 0px;")
        layout.addWidget(separator2)
        
        # Batch processing section
        self.batch_label = QLabel(self.tr("batch_processing"))
        self.batch_label.setFont(QFont("Arial", 10, QFont.Bold))
        self.batch_label.setStyleSheet("color: #666; margin-top: 5px; margin-bottom: 5px;")
        layout.addWidget(self.batch_label)

        self.save_current_btn = QPushButton(self.tr("save_current_image_data"))
        self.save_current_btn.clicked.connect(self.save_current_image_data)
        self.save_current_btn.setStyleSheet("""
            QPushButton {
                background-color: #e1e1e1;
                border: 2px solid #c1c1c1;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 11px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #d1d1d1;
                border: 2px solid #b1b1b1;
            }
            QPushButton:pressed {
                background-color: #c1c1c1;
                border: 2px solid #a1a1a1;
            }
        """)
        layout.addWidget(self.save_current_btn)

        # –ì–û–õ–û–í–ù–ê –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É
        self.create_new_structure_btn = QPushButton(self.tr("create_new_album"))
        self.create_new_structure_btn.clicked.connect(self.create_batch_album_new_structure)
        self.create_new_structure_btn.setStyleSheet("""
            QPushButton {
                font-weight: bold; 
                background-color: #4CAF50; 
                color: white;
                border: 2px solid #45a049;
                border-radius: 6px;
                padding: 8px 12px;
            }
            QPushButton:hover {
                background-color: #45a049;
                border: 2px solid #3d8b40;
            }
            QPushButton:pressed {
                background-color: #3d8b40;
                border: 2px solid #2e6b30;
            }
        """)
        layout.addWidget(self.create_new_structure_btn)
        
        # Results area
        self.results_label = QLabel(self.tr("results"))
        self.results_label.setFont(QFont("Arial", 10, QFont.Bold))
        self.results_label.setStyleSheet("color: #666; margin-top: 10px; margin-bottom: 5px;")
        layout.addWidget(self.results_label)
        
        self.results_text = QTextEdit()
        self.results_text.setMaximumHeight(120)
        self.results_text.setStyleSheet("""
            QTextEdit {
                background-color: white;
                border: 1px solid #ccc;
                font-family: 'Courier New', monospace;
                font-size: 10px;
                border-radius: 4px;
            }
        """)
        layout.addWidget(self.results_text)

        layout.addStretch()
        parent.addWidget(control_widget)
        
        # ===== –¢–ï–ü–ï–† –í–ò–ö–õ–ò–ö–ê–Ñ–ú–û init_title_page_templates() –ü–Ü–°–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø template_combo =====
        self.init_title_page_templates()

    print("‚úÖ Moved document date to Title Page section!")
    print("üìã Key improvements:")
    print("   ‚Ä¢ Date picker moved to 'Title Page' section (more logical)")
    print("   ‚Ä¢ Smaller, more compact date widgets")
    print("   ‚Ä¢ Date and template selection grouped together")
    print("   ‚Ä¢ Better organization of controls")
    print("   ‚Ä¢ Same functionality, better UX")

    def update_document_date(self, date):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—É"""
        self.document_date = date
        self.add_result(f"üìÖ –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç—É: {date.toString('dd.MM.yyyy')}")
        print(f"Document date updated: {date.toString('dd.MM.yyyy')}")

    def set_document_date_today(self):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏ —è–∫ –¥–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—É"""
        today = QDate.currentDate()
        self.document_date_edit.setDate(today)
        self.add_result(f"üìÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É: {today.toString('dd.MM.yyyy')}")

    def get_document_date_for_title_page(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç—É > –î–∞—Ç–∞ –†–õ–° > –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞
        
        if hasattr(self, 'document_date') and self.document_date.isValid():
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç—É (–Ω–∞–π–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
            return self.document_date.toPyDate()
        elif (hasattr(self, 'radar_description_enabled') and 
            self.radar_description_enabled and 
            hasattr(self, 'radar_date') and 
            self.radar_date.isValid()):
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞—Ç—É –†–õ–° —è–∫—â–æ –æ–ø–∏—Å –†–õ–° –≤–∫–ª—é—á–µ–Ω–∏–π
            return self.radar_date.toPyDate()
        else:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —è–∫ fallback
            from datetime import datetime
            return datetime.now().date()


    def init_title_page_templates(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —à–∞–±–ª–æ–Ω—ñ–≤ —Ç–∏—Ç—É–ª—å–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫"""
        # –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤
        self.templates_dir = os.path.join(os.path.expanduser("~"), "PhotoControl_Templates")
        if not os.path.exists(self.templates_dir):
            os.makedirs(self.templates_dir)
        
        # –ü–æ—Ç–æ—á–Ω–∏–π —à–∞–±–ª–æ–Ω
        self.current_template = None
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ —à–∞–±–ª–æ–Ω–∏
        self.load_templates()
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î —à–∞–±–ª–æ–Ω—ñ–≤ - —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π
        if self.template_combo.count() == 0:
            self.create_default_template()

    def load_templates(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω—ñ–≤"""
        self.template_combo.clear()
        
        try:
            template_files = [f for f in os.listdir(self.templates_dir) 
                            if f.endswith('.json')]
            
            for template_file in sorted(template_files):
                template_name = template_file.replace('.json', '')
                self.template_combo.addItem(template_name)
            
            print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(template_files)} —à–∞–±–ª–æ–Ω—ñ–≤")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤: {e}")

    def create_default_template(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω—É –∑ –ü–†–ê–í–ò–õ–¨–ù–ò–ú–ò –ø–æ–ª—è–º–∏ —Ç–∞ –ø—ñ–¥–ø–∏—Å–æ–º"""
        default_template = {
            'name': '–ë–∞–∑–æ–≤–∏–π —à–∞–±–ª–æ–Ω',
            'unit_name': '–ê0000',
            'date': '01.01.2024',
            'commander': {
                'rank': '–ø–æ–ª–∫–æ–≤–Ω–∏–∫',
                'name': '–ü.–ü. –ü–ï–¢–†–ï–ù–ö–û'
            },
            'chief_of_staff': {
                'rank': '–ø—ñ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫', 
                'name': '–°.–°. –°–ò–î–û–†–ï–ù–ö–û'
            },
            # ===== –ù–û–í–ò–ô –ë–õ–û–ö: –ü–Ü–î–ü–ò–° =====
            'signature_info': {
                'rank': '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç',
                'name': '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–µ–Ω–∫–æ'
            },
            'margins': {
                'top': 2.25,     # –í–ò–ü–†–ê–í–õ–ï–ù–û: 2.25—Å–º –∑–∞–º—ñ—Å—Ç—å 2.5—Å–º
                'left': 2.5,     # –í–ò–ü–†–ê–í–õ–ï–ù–û: 2.5—Å–º –∑–∞–º—ñ—Å—Ç—å 2.25—Å–º
                'bottom': 0,     # –ó–∞–ª–∏—à–∞—î—Ç—å—Å—è 0—Å–º
                'right': 0.75    # –ó–∞–ª–∏—à–∞—î—Ç—å—Å—è 0.75—Å–º
            },
            'version': '1.1'
        }
        self.save_template('–ë–∞–∑–æ–≤–∏–π —à–∞–±–ª–æ–Ω', default_template)

    def on_template_changed(self, template_name):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω—É"""
        if template_name:
            self.current_template = self.load_template(template_name)
            self.add_result(f"–û–±—Ä–∞–Ω–æ —à–∞–±–ª–æ–Ω: {template_name}")

    def create_new_template(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω—É"""
        dialog = TitlePageTemplateDialog(self, mode='create')
        if dialog.exec_() == QDialog.Accepted:
            template_data = dialog.get_template_data()
            template_name = template_data['name']
            
            self.save_template(template_name, template_data)
            self.load_templates()
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω —è–∫ –ø–æ—Ç–æ—á–Ω–∏–π
            index = self.template_combo.findText(template_name)
            if index >= 0:
                self.template_combo.setCurrentIndex(index)

    def edit_current_template(self):
        """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω—É"""
        current_name = self.template_combo.currentText()
        if not current_name:
            QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ù–µ–º–∞—î –æ–±—Ä–∞–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
            return
        
        current_template = self.load_template(current_name)
        if not current_template:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à–∞–±–ª–æ–Ω")
            return
        
        dialog = TitlePageTemplateDialog(self, mode='edit', template_data=current_template)
        if dialog.exec_() == QDialog.Accepted:
            template_data = dialog.get_template_data()
            new_name = template_data['name']
            
            # –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—å - –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª
            if new_name != current_name:
                old_path = os.path.join(self.templates_dir, f"{current_name}.json")
                if os.path.exists(old_path):
                    os.remove(old_path)
            
            self.save_template(new_name, template_data)
            self.load_templates()
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —à–∞–±–ª–æ–Ω —è–∫ –ø–æ—Ç–æ—á–Ω–∏–π
            index = self.template_combo.findText(new_name)
            if index >= 0:
                self.template_combo.setCurrentIndex(index)

    def save_template(self, name, template_data):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É —É —Ñ–∞–π–ª"""
        try:
            file_path = os.path.join(self.templates_dir, f"{name}.json")
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(template_data, f, indent=2, ensure_ascii=False)
            
            print(f"–®–∞–±–ª–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {file_path}")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É: {e}")

    def load_template(self, name):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –∑ —Ñ–∞–π–ª—É"""
        try:
            file_path = os.path.join(self.templates_dir, f"{name}.json")
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É: {e}")
            return None

    def get_title_page_data_from_template(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –æ–Ω–æ–≤–ª–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é –¥–∞—Ç–∏ —Ç–∞ –ø—ñ–¥–ø–∏—Å–æ–º"""
        if not self.current_template:
            # –ë–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ —è–∫—â–æ –Ω–µ–º–∞—î —à–∞–±–ª–æ–Ω—É
            return {
                'date': self.get_document_date_for_title_page(),
                'unit_info': '–ê0000',
                'commander_info': {
                    'rank': '–ø–æ–ª–∫–æ–≤–Ω–∏–∫',
                    'name': '–ü.–ü. –ü–ï–¢–†–ï–ù–ö–û'
                },
                'chief_of_staff_info': {
                    'rank': '–ø—ñ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫',
                    'name': '–°.–°. –°–ò–î–û–†–ï–ù–ö–û'
                },
                'signature_info': {  # –ù–û–í–ò–ô –ë–õ–û–ö
                    'rank': '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç',
                    'name': '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–µ–Ω–∫–æ'
                },
                'margins': {
                    'top': 2.25,
                    'left': 2.5,
                    'bottom': 0,
                    'right': 0.75
                }
            }
        
        # –î–∞–Ω—ñ –∑ —à–∞–±–ª–æ–Ω—É
        return {
            'date': self.get_document_date_for_title_page(),
            'unit_info': self.current_template['unit_name'],
            'commander_info': self.current_template['commander'],
            'chief_of_staff_info': self.current_template['chief_of_staff'],
            'signature_info': self.current_template.get('signature_info', {  # –ù–û–í–ò–ô –ë–õ–û–ö –ó FALLBACK
                'rank': '–≥–æ–ª–æ–≤–Ω–∏–π —Å–µ—Ä–∂–∞–Ω—Ç',
                'name': '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–µ–Ω–∫–æ'
            }),
            'margins': self.current_template['margins']
        }

    def create_vertical_browser_panel(self, parent):
        browser_widget = QWidget()
        # –ó–ë–Ü–õ–¨–®–£–Ñ–ú–û —à–∏—Ä–∏–Ω—É –∑ 180px –¥–æ 280px
        browser_widget.setFixedWidth(280)
        browser_widget.setStyleSheet("""
            QWidget {
                background-color: #f8f8f8; 
                border-right: 1px solid #ccc;
                border-left: 1px solid #ccc;
            }
            QLabel {
                background: none;
                border: none;
                color: #333;
            }
        """)
        
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 15, 0, 15)
        layout.setSpacing(10)
        browser_widget.setLayout(layout)
        
        self.browser_label = QLabel(self.tr("photo_browser"))
        self.browser_label.setFont(QFont("Arial", 10, QFont.Bold))
        self.browser_label.setStyleSheet("color: #666; margin-bottom: 5px; padding: 0 10px;")
        self.browser_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.browser_label)
        
        self.thumbnail_scroll = QScrollArea()
        self.thumbnail_scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.thumbnail_scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.thumbnail_scroll.setWidgetResizable(False)
        self.thumbnail_scroll.setStyleSheet("border: none; background: transparent;")
        
        # –ó–ë–Ü–õ–¨–®–£–Ñ–ú–û —à–∏—Ä–∏–Ω—É –≤—ñ–¥–∂–µ—Ç–∞ –º—ñ–Ω—ñ–∞—Ç—é—Ä –∑ 160px –¥–æ 260px
        self.thumbnail_widget = VerticalThumbnailWidget(thumbnail_width=260)
        self.thumbnail_widget.image_selected.connect(self.load_image_from_browser)
        self.thumbnail_scroll.setWidget(self.thumbnail_widget)
        
        layout.addWidget(self.thumbnail_scroll)
        
        browser_widget.hide()
        self.browser_widget = browser_widget
        
        parent.addWidget(browser_widget)

    def create_image_panel(self, parent):
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
        image_widget = QWidget()
        layout = QVBoxLayout()
        image_widget.setLayout(layout)
        
        self.image_label = ClickableLabel()
        self.image_label.clicked.connect(self.on_image_click)
        self.image_label.dragged.connect(self.on_image_drag)
        self.image_label.mouse_moved.connect(self.on_mouse_hover)
        self.image_label.setText(self.tr("open_instruction"))
        
        scroll_area = QScrollArea()
        scroll_area.setWidget(self.image_label)
        scroll_area.setWidgetResizable(True)
        scroll_area.setMinimumHeight(400)
        layout.addWidget(scroll_area)
        
        parent.addWidget(image_widget)

    def open_image(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self, self.tr("select_image"), "",
            f"{self.tr('image_files')} (*.jpg *.jpeg *.png *.bmp *.gif *.tiff);;{self.tr('all_files')} (*.*)"
        )
        
        if file_path:
            self.load_image(file_path)
            self.report_widget.show()
    
    def load_image_from_browser(self, file_path):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.load_image(file_path)
        self.add_result(self.tr("loaded_from_browser").format(name=os.path.basename(file_path)))

    def open_folder(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–ø–∫–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
        folder_path = QFileDialog.getExistingDirectory(self, self.tr("select_folder"))
        
        if folder_path:
            self.current_folder = folder_path
            self.load_folder_thumbnails()
            
            self.browser_widget.show()
            self.main_splitter.setSizes([220, 280, 620, 220])
            
            image_extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff', '.tif')
            image_count = sum(1 for f in os.listdir(folder_path) 
                            if f.lower().endswith(image_extensions))
            
            self.add_result(f"{self.tr('loaded_folder')}: {os.path.basename(folder_path)}")
            self.add_result(self.tr("found_images").format(count=image_count))
            
            self.report_widget.show()

    def load_folder_thumbnails(self):
        """–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—ñ–Ω—ñ–∞—Ç—é—Ä –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏"""
        print("üü° === load_folder_thumbnails STARTED ===")
        
        if not self.current_folder:
            print("‚ùå current_folder is None!")
            return
        
        print(f"üîç Loading thumbnails from: {self.current_folder}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ thumbnail_widget
        if not hasattr(self, 'thumbnail_widget'):
            print("‚ùå thumbnail_widget doesn't exist!")
            return
        
        print(f"‚úÖ thumbnail_widget exists: {type(self.thumbnail_widget)}")
        
        # –í–ê–ñ–õ–ò–í–û: –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏
        self.thumbnail_widget.clear_thumbnails()
        
        image_extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff', '.tif')
        image_files = []
        
        try:
            print(f"üìÅ Scanning folder: {self.current_folder}")
            for filename in os.listdir(self.current_folder):
                if filename.lower().endswith(image_extensions):
                    full_path = os.path.join(self.current_folder, filename)
                    image_files.append(full_path)
                    print(f"‚úÖ Found image: {filename}")
        except Exception as e:
            print(f"‚ùå Error reading folder: {e}")
            return

        print(f"üìä Total images found: {len(image_files)}")
        
        # –°–æ—Ä—Ç—É—î–º–æ —Ñ–∞–π–ª–∏
        image_files.sort()
        
        if len(image_files) == 0:
            print("üì≠ No images - adding 'no images' label")
            no_images_label = QLabel(self.tr("no_images_found"))
            no_images_label.setAlignment(Qt.AlignCenter)
            no_images_label.setStyleSheet("color: gray; font-size: 14px; padding: 20px;")
            no_images_label.setWordWrap(True)
            self.thumbnail_widget.layout.addWidget(no_images_label)
            return
        
        print(f"üîÑ Creating thumbnails for {len(image_files)} images...")
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏ —Ç—ñ–ª—å–∫–∏ –û–î–ò–ù —Ä–∞–∑
        for i, image_path in enumerate(image_files):
            try:
                print(f"üñºÔ∏è Creating thumbnail {i+1}/{len(image_files)}: {os.path.basename(image_path)}")
                self.thumbnail_widget.add_thumbnail(image_path)
                print(f"‚úÖ Thumbnail {i+1} created successfully")
            except Exception as e:
                print(f"‚ùå Error creating thumbnail {i+1}: {e}")
                import traceback
                traceback.print_exc()
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–Ü —Ä–æ–∑–º—ñ—Ä–∏ –≤—ñ–¥–∂–µ—Ç–∞ –¥–ª—è –±—ñ–ª—å—à–∏—Ö –º—ñ–Ω—ñ–∞—Ç—é—Ä
        widget_height = len(image_files) * 190 + 20  # –ó–±—ñ–ª—å—à–µ–Ω–∞ –≤–∏—Å–æ—Ç–∞ –¥–ª—è –º—ñ–Ω—ñ–∞—Ç—é—Ä 240x180
        self.thumbnail_widget.setMinimumHeight(widget_height)
        self.thumbnail_widget.resize(260, widget_height)  # –®–∏—Ä–∏–Ω–∞ 260px
        
        print(f"üü¢ === load_folder_thumbnails COMPLETED ===")
        print(f"üìã Final result: {len(image_files)} unique thumbnails created")


    # –ù–û–í–Ü –ú–ï–¢–û–î–ò –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø –ê–õ–¨–ë–û–ú–Ü–í –ó –¢–ê–ë–õ–ò–¶–Ø–ú–ò

    def create_batch_album_new_structure(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —à–∞–±–ª–æ–Ω—É —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–∞ –ø—ñ–¥–ø–∏—Å–æ–º –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –æ–ø–∏—Å—É"""
        if not DOCX_AVAILABLE:
            QMessageBox.warning(self, "Warning", "python-docx library not installed")
            return
        
        if not self.processed_images:
            QMessageBox.warning(self, "Warning", "No processed images to export")
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫—â–æ —î
        if self.processor and self.current_click:
            self.save_current_image_data()
        
        # –î—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É
        file_path, _ = QFileDialog.getSaveFileName(
            self, "Create Complete Album with Template and Signature", "",
            "Word Documents (*.docx);;All files (*.*)"
        )
        
        if file_path:
            try:
                # ===== –û–¢–†–ò–ú–£–Ñ–ú–û –î–ê–ù–Ü –ó –ü–û–¢–û–ß–ù–û–ì–û –®–ê–ë–õ–û–ù–£ (–ó –ü–Ü–î–ü–ò–°–û–ú) =====
                title_data = self.get_title_page_data_from_template()
                
                print(f"üìã Using template data with signature:")
                print(f"   Unit: {title_data['unit_info']}")
                print(f"   Commander: {title_data['commander_info']['rank']} {title_data['commander_info']['name']}")
                print(f"   Chief of staff: {title_data['chief_of_staff_info']['rank']} {title_data['chief_of_staff_info']['name']}")
                print(f"   Signature: {title_data['signature_info']['rank']} {title_data['signature_info']['name']}")
                print(f"   Margins: {title_data['margins']}")
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–∏–π –∞–ª—å–±–æ–º –∑ —à–∞–±–ª–æ–Ω–æ–º —Ç–∞ –ø—ñ–¥–ø–∏—Å–æ–º
                success = create_complete_album(self.processed_images, title_data, file_path)
                
                if success:
                    current_template_name = self.template_combo.currentText()
                    QMessageBox.information(self, "Success", 
                                        f"Complete album created with template and signature!\n"
                                        f"‚Ä¢ Template: {current_template_name}\n"
                                        f"‚Ä¢ Unit: {title_data['unit_info']}\n"
                                        f"‚Ä¢ Commander: {title_data['commander_info']['name']}\n"
                                        f"‚Ä¢ Chief of Staff: {title_data['chief_of_staff_info']['name']}\n"
                                        f"‚Ä¢ Signature: {title_data['signature_info']['name']}\n"
                                        f"‚Ä¢ Images: {len(self.processed_images)}\n"
                                        f"‚Ä¢ Custom margins applied\n\n"
                                        f"Saved: {os.path.basename(file_path)}")
                    
                    self.add_result(f"‚úì Album created with template: {current_template_name}")
                    self.add_result(f"‚úì Contains {len(self.processed_images)} processed images")
                    self.add_result(f"‚úì Signature: {title_data['signature_info']['rank']} {title_data['signature_info']['name']}")
                else:
                    QMessageBox.critical(self, "Error", "Failed to create album with template and signature")
                    
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Could not create album: {str(e)}")
                print(f"Error creating album with template and signature: {e}")
                import traceback
                traceback.print_exc()


    def get_title_page_data_from_gui(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–∏—Ç—É–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ GUI"""
        from datetime import datetime
        
        title_data = {
            'target_no': self.current_target_number,
            'date': self.radar_date if self.radar_description_enabled else datetime.now(),
            'unit_info': get_default_unit_info(),
            'commander_info': get_default_commander_info()
        }
        
        return title_data
        
    def create_report_panel(self, parent):
        """–ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å –∑ –∞–∑–∏–º—É—Ç–∞–ª—å–Ω–∏–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏ —Ç–∞ –æ–ø–∏—Å–æ–º –†–õ–°"""
        report_widget = QWidget()
        report_widget.setFixedWidth(220)
        report_widget.setStyleSheet("background-color: #f9f9f9; border-left: 1px solid #ccc;")
        
        layout = QVBoxLayout()
        report_widget.setLayout(layout)
        
        # Title
        self.report_title = QLabel(self.tr("report_data"))
        self.report_title.setFont(QFont("Arial", 12, QFont.Bold))
        self.report_title.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.report_title)
        
        # Target data input section (–°–ü–û–ß–ê–¢–ö–£ –î–ê–ù–Ü –ü–†–û –¶–Ü–õ–¨)
        manual_group = QFrame()
        manual_group.setStyleSheet("background-color: #fff; border: 1px solid #ddd; border-radius: 5px; padding: 10px;")
        manual_layout = QVBoxLayout()
        manual_group.setLayout(manual_layout)
        
        self.target_number_input = QLineEdit()
        self.target_number_input.setPlaceholderText("–ù–æ–º–µ—Ä —Ü—ñ–ª—ñ")
        self.target_number_input.setText(self.current_target_number)
        self.target_number_input.textChanged.connect(self.update_target_number)
        manual_layout.addWidget(self.target_number_input)
        
        self.auto_azimuth_label = QLabel("Œ≤ - --¬∞")
        manual_layout.addWidget(self.auto_azimuth_label)
        
        self.auto_distance_label = QLabel("D - -- –∫–º")
        manual_layout.addWidget(self.auto_distance_label)
        
        height_layout = QHBoxLayout()
        height_layout.addWidget(QLabel("H ‚Äì"))
        self.height_input = QLineEdit(self.current_height)
        self.height_input.setMaximumWidth(80)
        self.height_input.textChanged.connect(self.update_height)
        height_layout.addWidget(self.height_input)
        height_layout.addWidget(QLabel(self.tr("km_unit")))
        height_layout.addStretch()
        manual_layout.addLayout(height_layout)
        
        self.obstacles_combo = QComboBox()
        self.obstacles_combo.addItems([self.tr("no_obstacles"), self.tr("with_obstacles")])
        self.obstacles_combo.currentTextChanged.connect(self.update_obstacles)
        manual_layout.addWidget(self.obstacles_combo)
        
        self.detection_combo = QComboBox()
        self.detection_combo.addItems([self.tr("detection"), self.tr("tracking"), self.tr("loss")])
        self.detection_combo.currentTextChanged.connect(self.update_detection)
        manual_layout.addWidget(self.detection_combo)
        
        self.auto_scale_label = QLabel("M = --")
        manual_layout.addWidget(self.auto_scale_label)
        
        layout.addWidget(manual_group)
        
        # Separator –ø—ñ—Å–ª—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ü—ñ–ª—å
        grid_separator = QFrame()
        grid_separator.setFrameShape(QFrame.HLine)
        grid_separator.setFrameShadow(QFrame.Sunken)
        grid_separator.setStyleSheet("color: #ccc; margin: 8px 0px;")
        layout.addWidget(grid_separator)
        
        # Azimuth Grid section (–ü–Ü–°–õ–Ø –î–ê–ù–ò–• –ü–†–û –¶–Ü–õ–¨)
        self.azimuth_grid_label = QLabel(self.tr("azimuth_grid"))
        self.azimuth_grid_label.setFont(QFont("Arial", 10, QFont.Bold))
        self.azimuth_grid_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.azimuth_grid_label)
        
        # Scale setting
        scale_layout = QHBoxLayout()
        scale_label = QLabel(self.tr("scale_setting"))
        scale_label.setStyleSheet("color: #333; margin-right: 5px;")
        scale_layout.addWidget(scale_label)
        self.scale_combo = QComboBox()
        self.scale_combo.addItems(["50", "100", "150", "200", "300"])
        self.scale_combo.setCurrentText("300")
        self.scale_combo.currentTextChanged.connect(self.update_scale)
        self.scale_combo.setStyleSheet("""
            QComboBox {
                border: 2px solid #c1c1c1;
                border-radius: 4px;
                padding: 4px 8px;
                background-color: white;
                font-size: 11px;
            }
            QComboBox:hover {
                border: 2px solid #b1b1b1;
            }
            QComboBox:focus {
                border: 2px solid #007acc;
            }
        """)
        scale_layout.addWidget(self.scale_combo)
        scale_layout.addStretch()
        layout.addLayout(scale_layout)
        
        # Scale edge tool
        self.scale_edge_btn = QPushButton(self.tr("set_scale_edge"))
        self.scale_edge_btn.setCheckable(True)
        self.scale_edge_btn.clicked.connect(self.toggle_scale_edge_mode)
        self.scale_edge_btn.setStyleSheet("""
            QPushButton {
                background-color: #e1e1e1;
                border: 2px solid #c1c1c1;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 11px;
                font-weight: bold;
                margin-top: 5px;
            }
            QPushButton:hover {
                background-color: #d1d1d1;
                border: 2px solid #b1b1b1;
            }
            QPushButton:pressed {
                background-color: #c1c1c1;
                border: 2px solid #a1a1a1;
            }
            QPushButton:checked {
                background-color: #4CAF50;
                color: white;
                border: 2px solid #45a049;
            }
        """)
        layout.addWidget(self.scale_edge_btn)
        
        # Center setting tool
        self.set_center_btn = QPushButton(self.tr("set_center"))
        self.set_center_btn.setCheckable(True)
        self.set_center_btn.clicked.connect(self.toggle_center_setting_mode)
        self.set_center_btn.setStyleSheet("""
            QPushButton {
                background-color: #e1e1e1;
                border: 2px solid #c1c1c1;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 11px;
                font-weight: bold;
                margin-top: 5px;
            }
            QPushButton:hover {
                background-color: #d1d1d1;
                border: 2px solid #b1b1b1;
            }
            QPushButton:pressed {
                background-color: #c1c1c1;
                border: 2px solid #a1a1a1;
            }
            QPushButton:checked {
                background-color: #FF9800;
                color: white;
                border: 2px solid #f57c00;
            }
        """)
        layout.addWidget(self.set_center_btn)
        
        # ===== –°–ï–ö–¶–Ü–Ø: –û–ü–ò–° –†–õ–° =====
        radar_separator = QFrame()
        radar_separator.setFrameShape(QFrame.HLine)
        radar_separator.setFrameShadow(QFrame.Sunken)
        radar_separator.setStyleSheet("color: #ccc; margin: 8px 0px;")
        layout.addWidget(radar_separator)
        
        # Checkbox –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –æ–ø–∏—Å—É –†–õ–°
        self.radar_description_checkbox = QCheckBox("–î–æ–¥–∞—Ç–∏ –æ–ø–∏—Å –†–õ–°")
        self.radar_description_checkbox.setFont(QFont("Arial", 10, QFont.Bold))
        self.radar_description_checkbox.setStyleSheet("""
            QCheckBox {
                color: #333;
                padding: 5px;
            }
            QCheckBox::indicator {
                width: 16px;
                height: 16px;
            }
            QCheckBox::indicator:unchecked {
                border: 2px solid #ccc;
                background-color: white;
                border-radius: 3px;
            }
            QCheckBox::indicator:checked {
                border: 2px solid #4CAF50;
                background-color: #4CAF50;
                border-radius: 3px;
            }
        """)
        self.radar_description_checkbox.toggled.connect(self.toggle_radar_description)
        layout.addWidget(self.radar_description_checkbox)
        
        # –ì—Ä—É–ø–∞ –ø–æ–ª—ñ–≤ –¥–ª—è –æ–ø–∏—Å—É –†–õ–°
        radar_group = QFrame()
        radar_group.setStyleSheet("background-color: #fff; border: 1px solid #ddd; border-radius: 5px; padding: 8px;")
        radar_layout = QVBoxLayout()
        radar_group.setLayout(radar_layout)
        
        # –í–∏–±—ñ—Ä –¥–∞—Ç–∏
        date_layout = QHBoxLayout()
        date_layout.addWidget(QLabel("–î–∞—Ç–∞:"))
        self.radar_date_edit = QDateEdit()
        self.radar_date_edit.setDate(self.radar_date)
        self.radar_date_edit.setCalendarPopup(True)
        self.radar_date_edit.setFixedHeight(30)  # –ó–ë–Ü–õ–¨–®–ï–ù–ê –í–ò–°–û–¢–ê –∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –¥–æ 30px
        self.radar_date_edit.setStyleSheet("""
            QDateEdit {
                border: 1px solid #c1c1c1;
                border-radius: 4px;
                padding: 4px 8px;
                background-color: white;
                font-size: 10px;
            }
        """)
        self.radar_date_edit.dateChanged.connect(self.update_radar_date)
        self.radar_date_edit.setEnabled(False)  # –°–ø–æ—á–∞—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–µ
        date_layout.addWidget(self.radar_date_edit)
        radar_layout.addLayout(date_layout)
        
        # –ü–æ–ª–µ –¥–ª—è –ø–æ–∑–∏–≤–Ω–æ–≥–æ
        self.radar_callsign_input = QLineEdit()
        self.radar_callsign_input.setPlaceholderText("–ü–æ–∑–∏–≤–Ω–∏–π")
        self.radar_callsign_input.setFixedHeight(30)  # –ó–ë–Ü–õ–¨–®–ï–ù–ê –í–ò–°–û–¢–ê –∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –¥–æ 30px
        self.radar_callsign_input.textChanged.connect(self.update_radar_callsign)
        self.radar_callsign_input.setEnabled(False)  # –°–ø–æ—á–∞—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–µ
        self.radar_callsign_input.setStyleSheet("""
            QLineEdit {
                border: 1px solid #c1c1c1;
                border-radius: 4px;
                padding: 4px 8px;
                background-color: white;
                font-size: 10px;
            }
        """)
        radar_layout.addWidget(self.radar_callsign_input)
        
        # –ü–æ–ª–µ –¥–ª—è –Ω–∞–∑–≤–∏ –†–õ–°
        self.radar_name_input = QLineEdit()
        self.radar_name_input.setPlaceholderText("–ù–∞–∑–≤–∞ –†–õ–°")
        self.radar_name_input.setFixedHeight(30)  # –ó–ë–Ü–õ–¨–®–ï–ù–ê –í–ò–°–û–¢–ê –∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –¥–æ 30px
        self.radar_name_input.textChanged.connect(self.update_radar_name)
        self.radar_name_input.setEnabled(False)  # –°–ø–æ—á–∞—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–µ
        self.radar_name_input.setStyleSheet("""
            QLineEdit {
                border: 1px solid #c1c1c1;
                border-radius: 4px;
                padding: 4px 8px;
                background-color: white;
                font-size: 10px;
            }
        """)
        radar_layout.addWidget(self.radar_name_input)
        
        # –ü–æ–ª–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –†–õ–°
        self.radar_number_input = QLineEdit()
        self.radar_number_input.setPlaceholderText("–ù–æ–º–µ—Ä –†–õ–°")
        self.radar_number_input.setFixedHeight(30)  # –ó–ë–Ü–õ–¨–®–ï–ù–ê –í–ò–°–û–¢–ê –∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –¥–æ 30px
        self.radar_number_input.textChanged.connect(self.update_radar_number)
        self.radar_number_input.setEnabled(False)  # –°–ø–æ—á–∞—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–µ
        self.radar_number_input.setStyleSheet("""
            QLineEdit {
                border: 1px solid #c1c1c1;
                border-radius: 4px;
                padding: 4px 8px;
                background-color: white;
                font-size: 10px;
            }
        """)
        radar_layout.addWidget(self.radar_number_input)
        
        layout.addWidget(radar_group)
        
        # –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç—ñ—Ä –∑–Ω–∏–∑—É, –∞–ª–µ –Ω–µ —Ä–æ–∑—Ç—è–≥—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏
        layout.addStretch()
        
        report_widget.hide()
        self.report_widget = report_widget
        parent.addWidget(report_widget)

    def move_center_and_save(self, dx, dy):
        """–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        if not self.processor:
            QMessageBox.warning(self, self.tr("warning"), self.tr("no_image_first"))
            return
        
        self.processor.move_center(dx, dy)
        self.save_current_grid_settings()
        
        if self.current_click:
            azimuth, range_val = self.calculate_azimuth_range(
                self.current_click['x'], self.current_click['y']
            )
            self.current_click['azimuth'] = azimuth
            self.current_click['range'] = range_val
        
        self.display_image()
        self.update_results_display()
        self.update_report_data()
        
        self.add_result(self.tr("center_moved").format(x=self.processor.center_x, 
                                                    y=self.processor.center_y))
        self.add_result(self.tr("grid_settings_saved"))
        
        if hasattr(self, 'image_label') and self.image_label.zoom_widget.isVisible():
            self.image_label.zoom_widget.update_cursor_position(self.processor.center_x, self.processor.center_y)

    def add_result(self, text):
        self.results_text.append(text)
    
    
    def load_image(self, file_path):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å—ñ—Ç–∫–∏"""
        try:
            self.current_image_path = file_path
            scale_value = int(self.scale_combo.currentText())
            
            self.processor = AzimuthImageProcessor(file_path, scale=scale_value)
            
            if hasattr(self.processor, 'image') and self.processor.image:
                original_mode = self.processor.image.mode
                
                if original_mode != 'RGB':
                    if original_mode == 'RGBA':
                        rgb_image = Image.new('RGB', self.processor.image.size, (255, 255, 255))
                        rgb_image.paste(self.processor.image, mask=self.processor.image.split()[-1])
                        self.processor.image = rgb_image
                    else:
                        self.processor.image = self.processor.image.convert('RGB')
            
            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
            self.apply_saved_grid_settings()
            
            # –û—á–∏—â—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ—á–∫—É –∞–Ω–∞–ª—ñ–∑—É, –∞–ª–µ –ù–ï –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
            self.current_click = None
            
            self.display_image()
            self.update_results_display()
            self.update_report_data()
            
            self.add_result(f"{self.tr('loaded')}: {os.path.basename(file_path)}")
            if self.has_saved_grid_settings():
                self.add_result(self.tr("grid_settings_applied"))
            
        except Exception as e:
            QMessageBox.critical(self, self.tr("error"), 
                               self.tr("could_not_load").format(error=str(e)))
    
    def apply_saved_grid_settings(self):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏ –¥–æ –Ω–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not self.processor:
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü–µ–Ω—Ç—Ä –Ω–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image_center_x = self.processor.image.width // 2
        image_center_y = self.processor.image.height // 2
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–º—ñ—â–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä—É
        if self.saved_grid_settings['center_offset_x'] != 0 or self.saved_grid_settings['center_offset_y'] != 0:
            self.processor.move_center(
                self.saved_grid_settings['center_offset_x'],
                self.saved_grid_settings['center_offset_y']
            )
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ scale edge point –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ü–µ–Ω—Ç—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if self.saved_grid_settings.get('scale_edge_relative') and self.saved_grid_settings['custom_scale_distance']:
            edge_relative = self.saved_grid_settings['scale_edge_relative']
            
            # –ù–æ–≤—ñ –∞–±—Å–æ–ª—é—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ü–µ–Ω—Ç—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            new_x = image_center_x + edge_relative['x']
            new_y = image_center_y + edge_relative['y']
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –º–µ–∂–∞—Ö –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if 0 <= new_x < self.processor.image.width and 0 <= new_y < self.processor.image.height:
                self.scale_edge_point = {'x': new_x, 'y': new_y}
                self.custom_scale_distance = self.saved_grid_settings['custom_scale_distance']
    
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –º–∞—Å—à—Ç–∞–±
        if self.saved_grid_settings['scale_value']:
            self.scale_combo.setCurrentText(self.saved_grid_settings['scale_value'])

    def save_current_grid_settings(self):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏"""
        if not self.processor:
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ—â–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä—É –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ü–µ–Ω—Ç—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image_center_x = self.processor.image.width // 2
        image_center_y = self.processor.image.height // 2
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ scale edge point –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ü–µ–Ω—Ç—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        scale_edge_relative = None
        if self.scale_edge_point:
            scale_edge_relative = {
                'x': self.scale_edge_point['x'] - image_center_x,
                'y': self.scale_edge_point['y'] - image_center_y
            }
        
        self.saved_grid_settings = {
            'center_offset_x': self.processor.center_x - image_center_x,
            'center_offset_y': self.processor.center_y - image_center_y,
            'scale_edge_relative': scale_edge_relative,
            'custom_scale_distance': self.custom_scale_distance,
            'scale_value': self.scale_combo.currentText()
        }

    def has_saved_grid_settings(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏"""
        return (self.saved_grid_settings['center_offset_x'] != 0 or 
                self.saved_grid_settings['center_offset_y'] != 0 or
                self.saved_grid_settings.get('scale_edge_relative') is not None or
                self.saved_grid_settings['scale_value'] != "300")
    
    def display_image(self):
        if not self.processor:
            return
        
        pil_image = self.processor.image.copy()
        draw = ImageDraw.Draw(pil_image)
        
        center_x, center_y = self.processor.center_x, self.processor.center_y
        cross_size = 15
        
        # –ú–∞–ª—é—î–º–æ —á–µ—Ä–≤–æ–Ω–∏–π —Ö—Ä–µ—Å—Ç–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä—ñ
        draw.line([center_x - cross_size, center_y, center_x + cross_size, center_y], 
                fill='red', width=2)
        draw.line([center_x, center_y - cross_size, center_x, center_y + cross_size], 
                fill='red', width=2)
        draw.ellipse([center_x - 3, center_y - 3, center_x + 3, center_y + 3], 
                    fill='red', outline='white')
        
        if self.current_click:
            click_x, click_y = self.current_click['x'], self.current_click['y']
            
            # –ú–∞–ª—é—î–º–æ —Å–∏–Ω—é —Ç–æ—á–∫—É –∞–Ω–∞–ª—ñ–∑—É
            draw.ellipse([click_x - 4, click_y - 4, click_x + 4, click_y + 4], 
                        fill='blue', outline='white', width=1)
            
            # –û–ù–û–í–õ–ï–ù–ê –õ–Ü–ù–Ü–Ø: –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–Ω—Ü–µ–≤—É –ø–æ–∑–∏—Ü—ñ—é —è–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ
            image_width = pil_image.width
            image_height = pil_image.height
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∑–∏—Ü—ñ—ó –∫—ñ–Ω—Ü—è –ª—ñ–Ω—ñ—ó (–Ω–∞ —Ä—ñ–≤–Ω—ñ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ü—ñ–ª—ñ)
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É –∂ –ª–æ–≥—ñ–∫—É —â–æ –π –≤ create_processed_image_from_data
            right_cell_start_x = int(image_width * 0.85)  # –ü—Ä–∞–≤–∞ –∫–æ–º—ñ—Ä–∫–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 85% —à–∏—Ä–∏–Ω–∏
            underline_y = int(image_height * 0.1)         # –ü–æ–∑–∏—Ü—ñ—è –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è: 10% –≤–∏—Å–æ—Ç–∏ –∑–≤–µ—Ä—Ö—É
            
            # –ö—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞ –ª—ñ–Ω—ñ—ó: —Å–∞–º–∏–π –ø—Ä–∞–≤–∏–π –∫—Ä–∞–π –Ω–∞ —Ä—ñ–≤–Ω—ñ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è
            end_x = image_width - 1  # –°–∞–º–∏–π –∫—Ä–∞–π –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            end_y = underline_y      # –ù–∞ –≤–∏—Å–æ—Ç—ñ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ü—ñ–ª—ñ
            
            # –ú–∞–ª—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –ª—ñ–Ω—ñ—é –≤—ñ–¥ —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
            draw.line([click_x, click_y, end_x, end_y], fill='blue', width=3)
        
        # –ú–∞–ª—é—î–º–æ –∑–µ–ª–µ–Ω—É —Ç–æ—á–∫—É —Ç–∞ –ª—ñ–Ω—ñ—é –¥–ª—è scale edge (—è–∫—â–æ —î)
        if self.scale_edge_point:
            edge_x, edge_y = self.scale_edge_point['x'], self.scale_edge_point['y']
            
            draw.ellipse([edge_x - 5, edge_y - 5, edge_x + 5, edge_y + 5], 
                        fill='green', outline='white', width=2)
            
            draw.line([center_x, center_y, edge_x, edge_y], fill='green', width=2)
            
            # –ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–∞ –ª—ñ–Ω—ñ—è –Ω–∞ –∫—ñ–Ω—Ü—ñ
            dx = edge_x - center_x
            dy = edge_y - center_y
            length = math.sqrt(dx*dx + dy*dy)
            if length > 0:
                nx, ny = -dy/length, dx/length
                perp_size = 8
                draw.line([
                    edge_x + nx*perp_size, edge_y + ny*perp_size,
                    edge_x - nx*perp_size, edge_y - ny*perp_size
                ], fill='green', width=2)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
            temp_path = temp_file.name
            pil_image.save(temp_path, 'JPEG', quality=95)
        
        pixmap = QPixmap(temp_path)
        
        try:
            os.remove(temp_path)
        except:
            pass
        
        widget_width = self.image_label.width()
        widget_height = self.image_label.height()
        
        scaled_pixmap = pixmap.scaled(widget_width, widget_height, 
                                    Qt.KeepAspectRatio, Qt.SmoothTransformation)
        
        original_width = pixmap.width()
        original_height = pixmap.height()
        scaled_width = scaled_pixmap.width()
        scaled_height = scaled_pixmap.height()
        
        self.scale_factor_x = scaled_width / original_width
        self.scale_factor_y = scaled_height / original_height
        
        self.offset_x = (widget_width - scaled_width) // 2
        self.offset_y = (widget_height - scaled_height) // 2
        
        self.image_label.update_image_geometry(
            original_width, original_height,
            self.scale_factor_x, self.scale_factor_y,
            self.offset_x, self.offset_y
        )
        
        self.image_label.set_zoom_source_image(pixmap)
        self.image_label.setPixmap(scaled_pixmap)
    
    def on_image_click(self, x, y):
        if not self.processor:
            return

        if self.scale_edge_mode:
            self.set_scale_edge_point(x, y)
            return

        if self.center_setting_mode:
            self.set_center_point(x, y)
            return

        if self.current_click:
            existing_widget_x = self.current_click['x'] * self.scale_factor_x + self.offset_x
            existing_widget_y = self.current_click['y'] * self.scale_factor_y + self.offset_y
        
            clicked_widget_x = x * self.scale_factor_x + self.offset_x
            clicked_widget_y = y * self.scale_factor_y + self.offset_y
        
            distance = ((clicked_widget_x - existing_widget_x)**2 + (clicked_widget_y - existing_widget_y)**2)**0.5
        
            if distance <= 15:
                return

        self.place_analysis_point(x, y)
    
    def on_image_drag(self, x, y):
        """–ü–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–∏ —É—Ç—Ä–∏–º—É–≤–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ –º–∏—à—ñ"""
        if not self.processor:
            return
        
        # –ù–ï –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Ä–µ–∂–∏–º–∞—Ö
        if self.scale_edge_mode or self.center_setting_mode:
            return
        
        # –ü–µ—Ä–µ—Ç—è–≥—É—î–º–æ —Ç–æ—á–∫—É –∞–Ω–∞–ª—ñ–∑—É
        self.place_analysis_point(x, y)
    
    def on_mouse_hover(self, x, y):
        if not self.processor or not self.current_click:
            QToolTip.hideText()
            return
        
        hover_widget_x = x * self.scale_factor_x + self.offset_x
        hover_widget_y = y * self.scale_factor_y + self.offset_y
        
        existing_widget_x = self.current_click['x'] * self.scale_factor_x + self.offset_x
        existing_widget_y = self.current_click['y'] * self.scale_factor_y + self.offset_y
        
        distance = ((hover_widget_x - existing_widget_x)**2 + (hover_widget_y - existing_widget_y)**2)**0.5
        
        if distance <= 15:
            azimuth = self.current_click['azimuth']
            range_val = self.current_click['range']
            tooltip_text = f"{self.tr('azimuth')}: {azimuth:.0f}¬∞\n{self.tr('range')}: {range_val:.0f} –∫–º"
            
            point = self.image_label.mapToGlobal(self.image_label.rect().topLeft())
            tooltip_x = point.x() + hover_widget_x + 15
            tooltip_y = point.y() + hover_widget_y - 10
            
            QToolTip.showText(QPoint(int(tooltip_x), int(tooltip_y)), tooltip_text)
        else:
            QToolTip.hideText()
    
    def place_analysis_point(self, x, y):
        if not self.processor:
            return
        
        x = max(0, min(x, self.processor.image.width - 1))
        y = max(0, min(y, self.processor.image.height - 1))
        
        try:
            azimuth, range_val = self.calculate_azimuth_range(x, y)
            
            self.current_click = {
                'x': x, 'y': y,
                'azimuth': azimuth, 'range': range_val
            }
            
            self.display_image()
            self.update_results_display()
            self.update_report_data()
            
        except Exception as e:
            QMessageBox.critical(self, self.tr("error"), f"Could not process point: {str(e)}")
    
    def calculate_azimuth_range(self, x, y):
        dx = x - self.processor.center_x
        dy = self.processor.center_y - y
        
        range_pixels = math.sqrt(dx**2 + dy**2)
        
        if self.custom_scale_distance:
            scale_value = int(self.scale_combo.currentText())
            range_actual = (range_pixels / self.custom_scale_distance) * scale_value
        else:
            bottom_edge_distance = self.processor.image.height - self.processor.center_y
            scale_value = int(self.scale_combo.currentText())
            range_actual = (range_pixels / bottom_edge_distance) * scale_value
        
        azimuth_radians = math.atan2(dx, dy)
        azimuth_degrees = math.degrees(azimuth_radians)
        
        if azimuth_degrees < 0:
            azimuth_degrees += 360
            
        return azimuth_degrees, range_actual
    
    def toggle_center_setting_mode(self):
        self.center_setting_mode = self.set_center_btn.isChecked()
        
        if self.center_setting_mode and self.scale_edge_mode:
            self.scale_edge_mode = False
            self.scale_edge_btn.setChecked(False)
            self.scale_edge_btn.setStyleSheet("")
        
        self.image_label.set_center_setting_mode(self.center_setting_mode)
        
        if self.center_setting_mode:
            self.set_center_btn.setStyleSheet("background-color: #FF9800; color: white;")
            
            # ‚≠ê –î–ê–Ñ–ú–û –§–û–ö–£–° –ó–û–ë–†–ê–ñ–ï–ù–ù–Æ –î–õ–Ø –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–û–°–¢–Ü –ú–ò–®–Ü
            if hasattr(self, 'image_label'):
                self.image_label.setFocus()
                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–∏—Ç–∏–∫—É —Ñ–æ–∫—É—Å—É
                self.image_label.setFocusPolicy(Qt.StrongFocus)
            
            # ‚≠ê –ü–û–ö–ê–ó–£–Ñ–ú–û –ó–£–ú –ù–ê –ü–û–¢–û–ß–ù–Ü–ô –ü–û–ó–ò–¶–Ü–á –¶–ï–ù–¢–†–£
            if hasattr(self, 'image_label') and self.processor:
                self.image_label.zoom_widget.show_zoom()
                self.image_label.zoom_widget.update_cursor_position(
                    self.processor.center_x, self.processor.center_y
                )
            self.add_result("üéØ –†–µ–∂–∏–º —Ü–µ–Ω—Ç—Ä—É: ‚Üê‚Üí‚Üë‚Üì –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è, Esc –¥–ª—è –≤–∏—Ö–æ–¥—É")
            self.add_result("   Shift+—Å—Ç—Ä—ñ–ª–∫–∞ = —à–≤–∏–¥—à–µ, Ctrl+—Å—Ç—Ä—ñ–ª–∫–∞ = —Ç–æ—á–Ω—ñ—à–µ")
        else:
            self.set_center_btn.setStyleSheet("")
            # ‚≠ê –í–Ü–î–ù–û–í–õ–Æ–Ñ–ú–û –°–¢–ê–ù–î–ê–†–¢–ù–£ –ü–û–õ–Ü–¢–ò–ö–£ –§–û–ö–£–°–£
            if hasattr(self, 'image_label'):
                self.image_label.setFocusPolicy(Qt.ClickFocus)
            # ‚≠ê –•–û–í–ê–Ñ–ú–û –ó–£–ú
            if hasattr(self, 'image_label'):
                self.image_label.zoom_widget.hide_zoom()

    def toggle_scale_edge_mode(self):
        self.scale_edge_mode = self.scale_edge_btn.isChecked()
        
        if self.scale_edge_mode and self.center_setting_mode:
            self.center_setting_mode = False
            self.set_center_btn.setChecked(False)
            self.set_center_btn.setStyleSheet("")
        
        self.image_label.set_scale_edge_mode(self.scale_edge_mode)
        
        if self.scale_edge_mode:
            self.scale_edge_btn.setStyleSheet("background-color: #4CAF50; color: white;")
            
            # ‚≠ê –î–ê–Ñ–ú–û –§–û–ö–£–° –ó–û–ë–†–ê–ñ–ï–ù–ù–Æ –î–õ–Ø –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–û–°–¢–Ü –ú–ò–®–Ü
            if hasattr(self, 'image_label'):
                self.image_label.setFocus()
                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–∏—Ç–∏–∫—É —Ñ–æ–∫—É—Å—É
                self.image_label.setFocusPolicy(Qt.StrongFocus)
            
            # ‚≠ê –ü–û–ö–ê–ó–£–Ñ–ú–û –ó–£–ú –ù–ê –ü–û–ó–ò–¶–Ü–á –ö–†–ê–Æ –ú–ê–°–®–¢–ê–ë–£
            if hasattr(self, 'image_label') and self.processor:
                if self.scale_edge_point:
                    self.image_label.zoom_widget.show_zoom()
                    self.image_label.zoom_widget.update_cursor_position(
                        self.scale_edge_point['x'], self.scale_edge_point['y']
                    )
                else:
                    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–æ—á–∫–∏, –ø–æ–∫–∞–∑—É—î–º–æ –±—ñ–ª—è —Ü–µ–Ω—Ç—Ä—É
                    self.image_label.zoom_widget.show_zoom()
                    self.image_label.zoom_widget.update_cursor_position(
                        self.processor.center_x + 50, self.processor.center_y + 50
                    )
            self.add_result("üìè –†–µ–∂–∏–º –º–∞—Å—à—Ç–∞–±—É: ‚Üê‚Üí‚Üë‚Üì –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è, Esc –¥–ª—è –≤–∏—Ö–æ–¥—É")
            self.add_result("   Shift+—Å—Ç—Ä—ñ–ª–∫–∞ = —à–≤–∏–¥—à–µ, Ctrl+—Å—Ç—Ä—ñ–ª–∫–∞ = —Ç–æ—á–Ω—ñ—à–µ")
        else:
            self.scale_edge_btn.setStyleSheet("")
            # ‚≠ê –í–Ü–î–ù–û–í–õ–Æ–Ñ–ú–û –°–¢–ê–ù–î–ê–†–¢–ù–£ –ü–û–õ–Ü–¢–ò–ö–£ –§–û–ö–£–°–£
            if hasattr(self, 'image_label'):
                self.image_label.setFocusPolicy(Qt.ClickFocus)
            # ‚≠ê –•–û–í–ê–Ñ–ú–û –ó–£–ú
            if hasattr(self, 'image_label'):
                self.image_label.zoom_widget.hide_zoom()
    
    def set_center_point(self, x, y):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä—É –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ç–∞ –∑—É–º–æ–º"""
        if not self.processor:
            return
        
        x = max(0, min(x, self.processor.image.width - 1))
        y = max(0, min(y, self.processor.image.height - 1))
        
        current_center_x = self.processor.center_x
        current_center_y = self.processor.center_y
        
        dx = x - current_center_x
        dy = y - current_center_y
        
        self.processor.move_center(dx, dy)
        self.save_current_grid_settings()
        
        # ‚≠ê –û–ù–û–í–õ–Æ–Ñ–ú–û –ó–£–ú –ù–ê –ù–û–í–Ü–ô –ü–û–ó–ò–¶–Ü–á
        if hasattr(self, 'image_label'):
            self.image_label.zoom_widget.update_cursor_position(
                self.processor.center_x, self.processor.center_y
            )
        
        self.display_image()
        
        if self.current_click:
            azimuth, range_val = self.calculate_azimuth_range(
                self.current_click['x'], self.current_click['y']
            )
            self.current_click['azimuth'] = azimuth
            self.current_click['range'] = range_val
        
        self.update_results_display()
        self.update_report_data()
        self.add_result(f"–¶–µ–Ω—Ç—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ({self.processor.center_x}, {self.processor.center_y})")

    
    def set_scale_edge_point(self, x, y):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è scale edge –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ç–∞ –∑—É–º–æ–º"""
        x = max(0, min(x, self.processor.image.width - 1))
        y = max(0, min(y, self.processor.image.height - 1))
        
        dx = x - self.processor.center_x
        dy = y - self.processor.center_y
        distance = math.sqrt(dx*dx + dy*dy)
        
        self.scale_edge_point = {'x': x, 'y': y}
        self.custom_scale_distance = distance
        self.save_current_grid_settings()
        
        # ‚≠ê –û–ù–û–í–õ–Æ–Ñ–ú–û –ó–£–ú –ù–ê –ù–û–í–Ü–ô –ü–û–ó–ò–¶–Ü–á
        if hasattr(self, 'image_label'):
            self.image_label.zoom_widget.update_cursor_position(x, y)
        
        self.display_image()
        
        if self.current_click:
            azimuth, range_val = self.calculate_azimuth_range(
                self.current_click['x'], self.current_click['y']
            )
            self.current_click['azimuth'] = azimuth
            self.current_click['range'] = range_val
        
        self.update_results_display()
        self.update_report_data()
        self.add_result(f"–ö—Ä–∞–π –º–∞—Å—à—Ç–∞–±—É: ({x}, {y}) | –í—ñ–¥—Å—Ç–∞–Ω—å: {distance:.1f}px")

    def update_target_number(self, text):
        self.current_target_number = text
    
    def update_height(self, text):
        self.current_height = text
    
    def update_obstacles(self, text):
        self.current_obstacles = text
    
    def update_detection(self, text):
        self.current_detection = text
    
    def update_report_data(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ –ø—Ä–∞–≤—ñ–π –ø–∞–Ω–µ–ª—ñ (–∞–∑–∏–º—É—Ç, –¥–∞–ª—å–Ω—ñ—Å—Ç—å, –º–∞—Å—à—Ç–∞–±)"""
        if not self.processor:
            self.auto_azimuth_label.setText("Œ≤ - --¬∞")
            self.auto_distance_label.setText("D - -- –∫–º")
            self.auto_scale_label.setText("M = --")
            return
            
        if self.current_click:
            azimuth = self.current_click['azimuth']
            distance = self.current_click['range']
            scale = int(self.scale_combo.currentText())
            
            self.auto_azimuth_label.setText(f"Œ≤ - {azimuth:.0f}·¥º")
            self.auto_distance_label.setText(f"D - {distance:.0f} –∫–º")  # ‚Üê –ó–ú–Ü–ù–ï–ù–û .1f –Ω–∞ .0f
            self.auto_scale_label.setText(f"M = {scale}")
        else:
            self.auto_azimuth_label.setText("Œ≤ - --·¥º")
            self.auto_distance_label.setText("D - -- –∫–º")
            
            if hasattr(self, 'scale_combo'):
                scale = int(self.scale_combo.currentText())
                self.auto_scale_label.setText(f"M = {scale}")
            else:
                self.auto_scale_label.setText("M = --")

    def update_results_display(self):
        self.results_text.clear()
        
        if self.processor:
            self.add_result(self.tr("image_info").format(name=os.path.basename(self.current_image_path)))
            self.add_result(self.tr("size").format(width=self.processor.image.width, 
                                                  height=self.processor.image.height))
            self.add_result(self.tr("scale_info").format(scale=int(self.scale_combo.currentText())))
            self.add_result(self.tr("center_info").format(x=self.processor.center_x, 
                                                         y=self.processor.center_y))
            
            if self.custom_scale_distance:
                self.add_result(f"Custom scale edge: {self.custom_scale_distance:.1f} px = {self.scale_combo.currentText()} units")
            else:
                bottom_distance = self.processor.image.height - self.processor.center_y
                self.add_result(self.tr("bottom_edge").format(scale=int(self.scale_combo.currentText())))
                self.add_result(self.tr("pixels_south").format(pixels=bottom_distance))
            self.add_result("")
        
        if self.current_click:
            self.add_result(self.tr("analysis_point"))
            self.add_result(f"{self.tr('position')}: ({self.current_click['x']}, {self.current_click['y']})")
            self.add_result(f"{self.tr('azimuth')}: {self.current_click['azimuth']:.0f}·¥º")
            self.add_result(f"{self.tr('range')}: {self.current_click['range']:.0f} –∫–º")  # ‚Üê –ó–ú–Ü–ù–ï–ù–û .0f
            self.add_result("")
            self.add_result(self.tr("click_to_place"))
            self.add_result(self.tr("drag_to_move"))
            self.add_result(self.tr("line_connects"))
        else:
            self.add_result(self.tr("click_on_image"))

    def update_scale(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        if self.processor:
            new_scale = int(self.scale_combo.currentText())
            
            # –ó–ë–ï–†–ï–ì–¢–ò –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
            self.save_current_grid_settings()
            
            if self.current_click:
                azimuth, range_val = self.calculate_azimuth_range(
                    self.current_click['x'], self.current_click['y']
                )
                self.current_click['azimuth'] = azimuth
                self.current_click['range'] = range_val
            
            self.update_results_display()
            self.update_report_data()
            self.add_result(self.tr("scale_updated").format(scale=new_scale))
            self.add_result("Grid settings saved for next images")
    
    def move_center(self, dx, dy):
        if not self.processor:
            QMessageBox.warning(self, self.tr("warning"), self.tr("no_image_first"))
            return
        
        self.processor.move_center(dx, dy)
        
        if self.current_click:
            azimuth, range_val = self.calculate_azimuth_range(
                self.current_click['x'], self.current_click['y']
            )
            self.current_click['azimuth'] = azimuth
            self.current_click['range'] = range_val
        
        self.display_image()
        self.update_results_display()
        self.update_report_data()
        self.add_result(self.tr("center_moved").format(x=self.processor.center_x, 
                                                    y=self.processor.center_y))
    
        if self.image_label.zoom_widget.isVisible():
            self.image_label.zoom_widget.update_cursor_position(self.processor.center_x, self.processor.center_y)
    
    def clear_results(self):
        self.current_click = None
        if self.processor:
            self.display_image()
        self.update_results_display()
        self.update_report_data()

    def save_current_image(self):
        if not self.processor:
            QMessageBox.warning(self, self.tr("warning"), self.tr("no_image_first"))
            return
        
        if not self.current_click:
            QMessageBox.warning(self, self.tr("warning"), self.tr("no_analysis_point"))
            return
        
        file_path, _ = QFileDialog.getSaveFileName(
            self, self.tr("save_processed_image"), "",
            f"{self.tr('jpeg_files')} (*.jpg);;{self.tr('png_files')} (*.png);;{self.tr('all_files')} (*.*)"
        )
        
        if file_path:
            try:
                final_image = self.processor.image.copy()
                
                if file_path.lower().endswith(('.jpg', '.jpeg')):
                    if final_image.mode != 'RGB':
                        if final_image.mode == 'RGBA':
                            rgb_image = Image.new('RGB', final_image.size, (255, 255, 255))
                            rgb_image.paste(final_image, mask=final_image.split()[-1])
                            final_image = rgb_image
                        else:
                            final_image = final_image.convert('RGB')
                
                draw = ImageDraw.Draw(final_image)
                
                draw.line([
                    (self.current_click['x'], self.current_click['y']), 
                    (final_image.width - 1, 0)
                ], fill='blue', width=3)
                
                if file_path.lower().endswith('.png'):
                    final_image.save(file_path, 'PNG')
                else:
                    final_image.save(file_path, 'JPEG', quality=95)
                
                self.add_result(f"{self.tr('saved')}: {os.path.basename(file_path)}")
                self.add_result(self.tr("saved_clean"))
                QMessageBox.information(self, self.tr("success"), self.tr("image_saved_successfully"))
                
            except Exception as e:
                QMessageBox.critical(self, self.tr("error"), 
                                   self.tr("could_not_save").format(error=str(e)))

    def save_current_image_data(self):
        if not self.processor or not self.current_click:
            QMessageBox.warning(self, "Warning", "No image or analysis point to save")
            return False
        
        image_data = {
            'image_path': self.current_image_path,
            'image_name': os.path.basename(self.current_image_path),
            'analysis_point': {
                'x': self.current_click['x'],
                'y': self.current_click['y'],
                'azimuth': self.current_click['azimuth'],
                'range': self.current_click['range']
            },
            'target_data': {
                'number': self.current_target_number,
                'height': self.current_height,
                'obstacles': self.current_obstacles,
                'detection': self.current_detection,
                'scale': int(self.scale_combo.currentText())
            },
            'processor_settings': {
                'center_x': self.processor.center_x,
                'center_y': self.processor.center_y,
                'scale_edge_point': self.scale_edge_point,
                'custom_scale_distance': self.custom_scale_distance
            }
        }

        # ===== –î–û–î–ê–Ñ–ú–û –î–ê–ù–Ü –û–ü–ò–°–£ –†–õ–° =====
        radar_data = self.get_radar_description_data()
        if radar_data and radar_data['enabled']:
            image_data['radar_description'] = radar_data
            self.add_result("üì° –î–∞–Ω—ñ –†–õ–° –¥–æ–¥–∞–Ω–æ –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
            print(f"‚úì Radar data included: {radar_data}")
        else:
            print("‚Ñπ No radar data (disabled or empty)")
        
        existing_index = -1
        for i, saved_data in enumerate(self.processed_images):
            if saved_data['image_path'] == self.current_image_path:
                existing_index = i
                break
        
        if existing_index >= 0:
            self.processed_images[existing_index] = image_data
            self.add_result(f"Updated data for: {image_data['image_name']}")
        else:
            self.processed_images.append(image_data)
            self.add_result(f"Saved data for: {image_data['image_name']}")

        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ
        self.processed_image_paths.add(self.current_image_path)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏
        self.update_thumbnail_processed_status()
        
        self.add_result(f"Total processed images: {len(self.processed_images)}")
        return True

    def update_thumbnail_processed_status(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –º—ñ–Ω—ñ–∞—Ç—é—Ä"""
        if hasattr(self, 'thumbnail_widget'):
            self.thumbnail_widget.mark_image_as_processed(self.current_image_path)

# ===== –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –¢–ê –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ò =====

def main():
    app = QApplication(sys.argv)
    window = AzimuthGUI()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()