#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É PhotoControl v2.0
–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ —Ç–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—É
"""

import sys
import os

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ –º–æ–¥—É–ª—ñ–≤"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤...")
    
    # –¢–µ—Å—Ç PyQt5
    try:
        from PyQt5.QtWidgets import QApplication
        print("‚úÖ PyQt5 –¥–æ—Å—Ç—É–ø–Ω–∏–π")
    except ImportError:
        print("‚ùå PyQt5 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π! –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install PyQt5")
        return False
    
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
    results = {}
    
    # Main Window
    try:
        from ui.main_window import MainWindow
        results['MainWindow'] = True
        print("‚úÖ MainWindow –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    except ImportError as e:
        results['MainWindow'] = False
        print(f"‚ùå MainWindow –ø–æ–º–∏–ª–∫–∞: {e}")
    
    # Control Panel
    try:
        from ui.panels.control_panel import ControlPanel
        results['ControlPanel'] = True
        print("‚úÖ ControlPanel –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    except ImportError as e:
        results['ControlPanel'] = False
        print(f"‚ö†Ô∏è ControlPanel –ø–æ–º–∏–ª–∫–∞: {e}")
    
    # Constants
    try:
        from core.constants import UI
        results['Constants'] = True
        print("‚úÖ Constants –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    except ImportError as e:
        results['Constants'] = False
        print(f"‚ö†Ô∏è Constants –ø–æ–º–∏–ª–∫–∞: {e} (–±—É–¥–µ fallback)")
    
    # Image Processor
    try:
        from core.image_processor import ImageProcessor
        results['ImageProcessor'] = True
        print("‚úÖ ImageProcessor –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    except ImportError as e:
        results['ImageProcessor'] = False
        print(f"‚ö†Ô∏è ImageProcessor –ø–æ–º–∏–ª–∫–∞: {e}")
    
    # Album Creator
    try:
        from core.album_creator import AlbumCreator
        results['AlbumCreator'] = True
        print("‚úÖ AlbumCreator –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    except ImportError as e:
        results['AlbumCreator'] = False
        print(f"‚ö†Ô∏è AlbumCreator –ø–æ–º–∏–ª–∫–∞: {e}")
    
    # Translator
    try:
        from translations.translator import get_translator
        results['Translator'] = True
        print("‚úÖ Translator –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    except ImportError as e:
        results['Translator'] = False
        print(f"‚ö†Ô∏è Translator –ø–æ–º–∏–ª–∫–∞: {e}")
    
    return results

def test_window_creation():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞"""
    print("\nüèóÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞...")
    
    try:
        from PyQt5.QtWidgets import QApplication
        from ui.main_window import MainWindow
        
        app = QApplication([])  # –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ args
        window = MainWindow()
        
        print("‚úÖ MainWindow —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {window.windowTitle()}")
        print(f"   –†–æ–∑–º—ñ—Ä: {window.size().width()}√ó{window.size().height()}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–Ω–µ–ª–µ–π
        panels_status = {
            'ControlPanel': window.control_panel is not None,
            'DataPanel': window.data_panel is not None,
            'ImagePanel': window.image_panel is not None,
            'ThumbnailBrowser': window.thumbnail_browser is not None
        }
        
        print("\nüìã –°—Ç–∞—Ç—É—Å –ø–∞–Ω–µ–ª–µ–π:")
        working_panels = 0
        for panel, status in panels_status.items():
            status_icon = "‚úÖ" if status else "‚ö†Ô∏è –∑–∞–≥–ª—É—à–∫–∞"
            print(f"   {panel}: {status_icon}")
            if status:
                working_panels += 1
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
        print("\nüîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤:")
        try:
            # –¢–µ—Å—Ç –º–µ—Ç–æ–¥—ñ–≤ —â–æ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å UI interaction
            if hasattr(window, '_show_about'):
                print("   _show_about(): ‚úÖ")
            if hasattr(window, '_save_settings'):
                print("   _save_settings(): ‚úÖ")
            if hasattr(window, 'get_current_language') and hasattr(window, 'control_panel') and window.control_panel:
                print("   get_current_language(): ‚úÖ")
        except Exception as e:
            print(f"   –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤: {e}")
        
        return True, working_panels
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞: {e}")
        import traceback
        traceback.print_exc()
        return False, 0

def test_control_panel():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ControlPanel –æ–∫—Ä–µ–º–æ"""
    print("\nüìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ControlPanel...")
    
    try:
        from PyQt5.QtWidgets import QApplication
        from ui.panels.control_panel import ControlPanel
        
        if not QApplication.instance():
            app = QApplication([])
        
        panel = ControlPanel.create_test_panel()
        
        print("‚úÖ ControlPanel —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –º–µ—Ç–æ–¥—ñ–≤
        test_methods = [
            'add_result',
            'set_buttons_enabled', 
            'update_processed_count',
            'get_document_date',
            'get_current_language'
        ]
        
        working_methods = 0
        for method_name in test_methods:
            if hasattr(panel, method_name):
                try:
                    method = getattr(panel, method_name)
                    if method_name == 'add_result':
                        method("–¢–µ—Å—Ç –º–µ—Ç–æ–¥—É add_result")
                    elif method_name == 'set_buttons_enabled':
                        method(save_image=True)
                    elif method_name == 'update_processed_count':
                        method(5)
                    elif method_name in ['get_document_date', 'get_current_language']:
                        result = method()
                        print(f"   {method_name}(): {result}")
                    
                    working_methods += 1
                    print(f"   {method_name}(): ‚úÖ")
                    
                except Exception as e:
                    print(f"   {method_name}(): ‚ùå {e}")
            else:
                print(f"   {method_name}(): ‚ùå –º–µ—Ç–æ–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
        
        return True, working_methods
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ControlPanel: {e}")
        return False, 0

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø PHOTOCONTROL V2.0")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –Ü–º–ø–æ—Ä—Ç–∏
    print("\nüì¶ –ö–†–û–ö 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥—É–ª—ñ–≤")
    import_results = test_imports()
    
    if not import_results or not import_results.get('MainWindow', False):
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: MainWindow –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è!")
        print("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª ui/main_window.py")
        return False
    
    # –¢–µ—Å—Ç 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞
    print("\nüèóÔ∏è –ö–†–û–ö 2: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞")
    window_success, working_panels = test_window_creation()
    
    if not window_success:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ!")
        return False
    
    # –¢–µ—Å—Ç 3: ControlPanel
    print("\nüìã –ö–†–û–ö 3: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ControlPanel")
    panel_success, working_methods = test_control_panel()
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print("=" * 60)
    
    if import_results:
        total_modules = len(import_results)
        working_modules = sum(import_results.values())
        print(f"üì¶ –ú–æ–¥—É–ª—ñ: {working_modules}/{total_modules} –ø—Ä–∞—Ü—é—é—Ç—å")
    
    if window_success:
        print(f"üèóÔ∏è –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ: ‚úÖ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        print(f"üìã –ü–∞–Ω–µ–ª—ñ: {working_panels}/4 –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    else:
        print(f"üèóÔ∏è –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ: ‚ùå –ø–æ–º–∏–ª–∫–∞")
    
    if panel_success:
        print(f"üîß ControlPanel –º–µ—Ç–æ–¥–∏: {working_methods}/5 –ø—Ä–∞—Ü—é—é—Ç—å")
    
    # –§—ñ–Ω–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
    if window_success and working_panels >= 1:
        print("\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢: PhotoControl v2.0 –ì–û–¢–û–í–ò–ô –î–û –ó–ê–ü–£–°–ö–£!")
        print("üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –∑–∞–ø—É—Å—Ç—ñ—Ç—å main.py –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        print("\nüí° –©–æ –ø—Ä–∞—Ü—é—î:")
        print("   - –ë–∞–∑–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("   - –ú–µ–Ω—é —Ç–∞ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä") 
        print("   - –§–∞–π–ª–æ–≤—ñ –¥—ñ–∞–ª–æ–≥–∏")
        print("   - –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è")
        if working_panels > 1:
            print("   - –î–µ—è–∫—ñ –ø–∞–Ω–µ–ª—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
        
        print("\nüîß –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ main.py")
        print("   2. –ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("   3. –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏")
        
        return True
    else:
        print("\n‚ö†Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç –∑–Ω–æ–≤—É")
        return False

def quick_launch_test():
    """–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
    print("\nüöÄ –®–í–ò–î–ö–ò–ô –¢–ï–°–¢ –ó–ê–ü–£–°–ö–£")
    print("=" * 40)
    
    try:
        from PyQt5.QtWidgets import QApplication
        from ui.main_window import MainWindow
        
        app = QApplication([])
        window = MainWindow()
        
        print("‚úÖ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤–∏–π!")
        print("üìã –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–ª–∞–≤—ñ—à—É –¥–ª—è –ø–æ–∫–∞–∑—É –≤—ñ–∫–Ω–∞...")
        input()  # –ß–µ–∫–∞—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à—ñ
        
        window.show()
        print("üñºÔ∏è –í—ñ–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ! –ó–∞–∫—Ä–∏–π—Ç–µ –π–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—É.")
        
        # –ó–∞–ø—É—Å–∫ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        from PyQt5.QtCore import QTimer
        timer = QTimer()
        timer.singleShot(10000, app.quit)  # –ê–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫
        
        app.exec_()
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É: {e}")
        return False

if __name__ == "__main__":
    success = main()
    
    if success:
        print("\nüéØ –•–æ—á–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —à–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É? (y/n): ", end="")
        try:
            choice = input().lower().strip()
            if choice in ['y', 'yes', '—Ç–∞–∫', '–¥']:
                quick_launch_test()
        except KeyboardInterrupt:
            print("\nüëã –¢–µ—Å—Ç –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    
    print(f"\nüèÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –∫–æ–¥–æ–º: {'SUCCESS' if success else 'FAILED'}")
    sys.exit(0 if success else 1)