#!/usr/bin/env python3
"""
PhotoControl v2.0 - –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ (–í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø)
–ü–æ–≤–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø–∞–Ω–µ–ª–µ–π –∑ –±–µ–∑–ø–µ—á–Ω–∏–º–∏ —ñ–º–ø–æ—Ä—Ç–∞–º–∏
"""

import os
import sys
from typing import Optional, List, Dict, Any
from PyQt5.QtWidgets import (QMainWindow, QWidget, QHBoxLayout, QVBoxLayout, 
                             QSplitter, QMenuBar, QMenu, QAction, QStatusBar,
                             QFileDialog, QMessageBox, QProgressBar, QLabel,
                             QApplication, QActionGroup, QToolBar)
from PyQt5.QtCore import Qt, pyqtSignal, QTimer, QThread, QSettings
from PyQt5.QtGui import QIcon, QKeySequence, QFont

# –ë–ï–ó–ü–ï–ß–ù–Ü –Ü–ú–ü–û–†–¢–ò –ó FALLBACK
print("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤ PhotoControl v2.0...")

# –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–∞–Ω–µ–ª—ñ
try:
    from ui.panels.control_panel import ControlPanel
    print("‚úÖ ControlPanel –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è ControlPanel –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {e}")
    ControlPanel = None

try:
    from ui.panels.data_panel import DataPanel
    print("‚úÖ DataPanel –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è DataPanel –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {e}")
    DataPanel = None

try:
    from ui.panels.image_panel import ImagePanel
    print("‚úÖ ImagePanel –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è ImagePanel –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {e}")
    ImagePanel = None

try:
    from ui.widgets.thumbnail_browser import ThumbnailBrowser
    print("‚úÖ ThumbnailBrowser –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è ThumbnailBrowser –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {e}")
    ThumbnailBrowser = None

# –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ core –º–æ–¥—É–ª—ñ
try:
    from core.image_processor import ImageProcessor, AnalysisPoint
    print("‚úÖ ImageProcessor –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è ImageProcessor –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {e}")
    ImageProcessor = None
    AnalysisPoint = None

try:
    from core.album_creator import AlbumCreator, ImageData, TitlePageData
    print("‚úÖ AlbumCreator –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è AlbumCreator –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {e}")
    AlbumCreator = None
    ImageData = None
    TitlePageData = None

# –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
try:
    from core.constants import UI, FILES, ALBUM
    print("‚úÖ Constants –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è Constants –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {e}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback")
    # Fallback –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
    class UI:
        DEFAULT_WINDOW_WIDTH = 1400
        DEFAULT_WINDOW_HEIGHT = 900
        MIN_WINDOW_WIDTH = 1000
        MIN_WINDOW_HEIGHT = 700
        CONTROL_PANEL_WIDTH = 250
        DATA_PANEL_WIDTH = 250
        THUMBNAIL_PANEL_WIDTH = 280

# –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —É—Ç–∏–ª—ñ—Ç–∏
try:
    from utils.file_utils import get_images_in_directory, is_image_file
    print("‚úÖ FileUtils –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è FileUtils –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {e}")
    get_images_in_directory = None
    is_image_file = None

# –°–ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
try:
    from translations.translator import get_translator, TranslationKeys, Language
    print("‚úÖ Translator –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è Translator –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {e}")
    get_translator = None
    TranslationKeys = None
    Language = None

print("üìã –Ü–º–ø–æ—Ä—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n")


class ProcessingThread(QThread):
    """–ü–æ—Ç—ñ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è UI"""
    progress = pyqtSignal(int, str)
    finished = pyqtSignal(bool, str)
    
    def __init__(self, album_creator, images_data, title_data, output_path):
        super().__init__()
        self.album_creator = album_creator
        self.images_data = images_data
        self.title_data = title_data
        self.output_path = output_path
    
    def run(self):
        try:
            if self.album_creator and AlbumCreator:
                success = self.album_creator.create_album(
                    self.images_data, self.title_data, self.output_path
                )
                self.finished.emit(success, self.output_path if success else "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
            else:
                self.finished.emit(False, "AlbumCreator –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        except Exception as e:
            self.finished.emit(False, str(e))


class MainWindow(QMainWindow):
    """
    –í–ò–ü–†–ê–í–õ–ï–ù–ï –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ PhotoControl v2.0
    
    –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
    - –ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–∞–Ω–µ–ª–µ–π
    - Fallback –¥–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –º–æ–¥—É–ª—ñ–≤
    - –ü–æ–≤–Ω–µ –º–µ–Ω—é —Ç–∞ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
    - –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
    - –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    """
    
    def __init__(self):
        super().__init__()
        
        print("üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è MainWindow...")
        
        # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        self.image_processor = None
        self.album_creator = None
        self.processing_thread = None
        
        # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ)
        self.control_panel = None
        self.data_panel = None
        self.image_panel = None
        self.thumbnail_browser = None
        
        # –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        self.translator = get_translator() if get_translator else None
        
        # –î–∞–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        self.processed_images: List = []
        self.current_image_path: Optional[str] = None
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.settings = QSettings("PhotoControl", "v2.0")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI
        self._init_ui()
        self._create_menu_bar()
        self._create_status_bar()
        self._setup_connections()
        self._load_settings()
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
        if self.translator:
            self.translator.language_changed.connect(self._update_translations)
            self._update_translations()
        
        print("‚úÖ MainWindow —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    
    def _init_ui(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        print("üé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É...")
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á
        main_splitter = QSplitter(Qt.Horizontal)
        
        # === –õ–Ü–í–ê –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–Ü–ù–ù–Ø ===
        if ControlPanel:
            print("üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è ControlPanel...")
            self.control_panel = ControlPanel()
            main_splitter.addWidget(self.control_panel)
        else:
            print("‚ö†Ô∏è ControlPanel –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫—É...")
            control_placeholder = self._create_placeholder("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è\n(ControlPanel –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)", UI.CONTROL_PANEL_WIDTH)
            main_splitter.addWidget(control_placeholder)
        
        # === –¶–ï–ù–¢–†–ê–õ–¨–ù–ê –û–ë–õ–ê–°–¢–¨ ===
        center_splitter = QSplitter(Qt.Horizontal)
        
        # –ë—Ä–∞—É–∑–µ—Ä –º—ñ–Ω—ñ–∞—Ç—é—Ä (–ª—ñ–≤–æ—Ä—É—á)
        if ThumbnailBrowser:
            print("üñºÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è ThumbnailBrowser...")
            self.thumbnail_browser = ThumbnailBrowser()
            center_splitter.addWidget(self.thumbnail_browser)
        else:
            print("‚ö†Ô∏è ThumbnailBrowser –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫—É...")
            thumbnail_placeholder = self._create_placeholder("–ë—Ä–∞—É–∑–µ—Ä –º—ñ–Ω—ñ–∞—Ç—é—Ä\n(ThumbnailBrowser –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)", UI.THUMBNAIL_PANEL_WIDTH)
            center_splitter.addWidget(thumbnail_placeholder)
            # –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ü–û–°–ò–õ–ê–ù–ù–Ø –ù–ê –ó–ê–ì–õ–£–®–ö–£
            self.thumbnail_placeholder = thumbnail_placeholder
        
        # –ü–∞–Ω–µ–ª—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–ø—Ä–∞–≤–æ—Ä—É—á)
        if ImagePanel:
            print("üì∏ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è ImagePanel...")
            self.image_panel = ImagePanel()
            center_splitter.addWidget(self.image_panel)
        else:
            print("‚ö†Ô∏è ImagePanel –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫—É...")
            image_placeholder = self._create_placeholder("–ü–∞–Ω–µ–ª—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n(ImagePanel –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)", 600)
            center_splitter.addWidget(image_placeholder)
            # –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ü–û–°–ò–õ–ê–ù–ù–Ø –ù–ê –ó–ê–ì–õ–£–®–ö–£
            self.image_placeholder = image_placeholder
        
        main_splitter.addWidget(center_splitter)
        
        # === –ü–†–ê–í–ê –ü–ê–ù–ï–õ–¨ –î–ê–ù–ò–• ===
        if DataPanel:
            print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è DataPanel...")
            self.data_panel = DataPanel()
            main_splitter.addWidget(self.data_panel)
        else:
            print("‚ö†Ô∏è DataPanel –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫—É...")
            data_placeholder = self._create_placeholder("–ü–∞–Ω–µ–ª—å –¥–∞–Ω–∏—Ö\n(DataPanel –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)", UI.DATA_PANEL_WIDTH)
            main_splitter.addWidget(data_placeholder)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π
        main_splitter.setSizes([
            UI.CONTROL_PANEL_WIDTH,
            UI.DEFAULT_WINDOW_WIDTH - UI.CONTROL_PANEL_WIDTH - UI.DATA_PANEL_WIDTH,
            UI.DATA_PANEL_WIDTH
        ])
        
        # Layout
        layout = QHBoxLayout(central_widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.addWidget(main_splitter)
        
        self.main_splitter = main_splitter
        self.center_splitter = center_splitter
        
        print("‚úÖ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

    
    def _create_placeholder(self, text: str, width: int) -> QWidget:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–∞–Ω–µ–ª–µ–π"""
        placeholder = QWidget()
        placeholder.setFixedWidth(width)
        
        layout = QVBoxLayout(placeholder)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # –°–¢–í–û–†–Æ–Ñ–ú–û QLAB EL –î–õ–Ø –¢–ï–ö–°–¢–£
        label = QLabel(text)
        label.setAlignment(Qt.AlignCenter)
        label.setWordWrap(True)
        label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #666;
                background-color: #f8f9fa;
                border: 2px dashed #dee2e6;
                border-radius: 8px;
                padding: 20px;
            }
        """)
        
        layout.addWidget(label)
        layout.addStretch()
        
        # –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –ü–û–°–ò–õ–ê–ù–ù–Ø –ù–ê LABEL
        placeholder.main_label = label
        
        return placeholder
    
    def _create_menu_bar(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é"""
        print("üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é...")
        
        menubar = self.menuBar()
        
        # === –§–ê–ô–õ ===
        file_menu = menubar.addMenu("–§–∞–π–ª")
        
        # –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.open_image_action = QAction("–í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", self)
        self.open_image_action.setShortcut(QKeySequence.Open)
        self.open_image_action.triggered.connect(self.open_image)
        file_menu.addAction(self.open_image_action)
        
        # –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É
        self.open_folder_action = QAction("–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É", self)
        self.open_folder_action.setShortcut(QKeySequence("Ctrl+Shift+O"))
        self.open_folder_action.triggered.connect(self.open_folder)
        file_menu.addAction(self.open_folder_action)
        
        file_menu.addSeparator()
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.save_action = QAction("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", self)
        self.save_action.setShortcut(QKeySequence.Save)
        self.save_action.triggered.connect(self.save_current_image)
        self.save_action.setEnabled(False)
        file_menu.addAction(self.save_action)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ
        self.save_data_action = QAction("–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ", self)
        self.save_data_action.setShortcut(QKeySequence("Ctrl+D"))
        self.save_data_action.triggered.connect(self.save_current_image_data)
        self.save_data_action.setEnabled(False)
        file_menu.addAction(self.save_data_action)
        
        file_menu.addSeparator()
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–ª—å–±–æ–º
        self.album_action = QAction("–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–ª—å–±–æ–º", self)
        self.album_action.setShortcut(QKeySequence("Ctrl+A"))
        self.album_action.triggered.connect(self.create_album)
        self.album_action.setEnabled(False)
        file_menu.addAction(self.album_action)
        
        file_menu.addSeparator()
        
        # –í–∏—Ö—ñ–¥
        exit_action = QAction("–í–∏—Ö—ñ–¥", self)
        exit_action.setShortcut(QKeySequence.Quit)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # === –ü–ï–†–ï–ì–õ–Ø–î ===
        view_menu = menubar.addMenu("–ü–µ—Ä–µ–≥–ª—è–¥")
        
        # –ë—Ä–∞—É–∑–µ—Ä –º—ñ–Ω—ñ–∞—Ç—é—Ä
        self.toggle_thumbnails_action = QAction("–ë—Ä–∞—É–∑–µ—Ä –º—ñ–Ω—ñ–∞—Ç—é—Ä", self)
        self.toggle_thumbnails_action.setCheckable(True)
        self.toggle_thumbnails_action.setChecked(True)
        self.toggle_thumbnails_action.triggered.connect(self._toggle_thumbnails)
        view_menu.addAction(self.toggle_thumbnails_action)
        
        # –ü–∞–Ω–µ–ª—å –¥–∞–Ω–∏—Ö
        self.toggle_data_panel_action = QAction("–ü–∞–Ω–µ–ª—å –¥–∞–Ω–∏—Ö", self)
        self.toggle_data_panel_action.setCheckable(True)
        self.toggle_data_panel_action.setChecked(True)
        self.toggle_data_panel_action.triggered.connect(self._toggle_data_panel)
        view_menu.addAction(self.toggle_data_panel_action)
        
        # === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
        settings_menu = menubar.addMenu("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
        # –ú–æ–≤–∞ (—è–∫—â–æ translator –¥–æ—Å—Ç—É–ø–Ω–∏–π)
        if Language:
            language_menu = settings_menu.addMenu("–ú–æ–≤–∞")
            
            language_group = QActionGroup(self)
            
            ukrainian_action = QAction("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", self)
            ukrainian_action.setCheckable(True)
            ukrainian_action.setChecked(True)
            if self.translator:
                ukrainian_action.triggered.connect(lambda: self.translator.set_language(Language.UKRAINIAN))
            language_group.addAction(ukrainian_action)
            language_menu.addAction(ukrainian_action)
            
            english_action = QAction("English", self)
            english_action.setCheckable(True)
            if self.translator:
                english_action.triggered.connect(lambda: self.translator.set_language(Language.ENGLISH))
            language_group.addAction(english_action)
            language_menu.addAction(english_action)
        
        # === –î–û–í–Ü–î–ö–ê ===
        help_menu = menubar.addMenu("–î–æ–≤—ñ–¥–∫–∞")
        
        about_action = QAction("–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", self)
        about_action.triggered.connect(self._show_about)
        help_menu.addAction(about_action)
        
        print("‚úÖ –ú–µ–Ω—é —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
    
    def _create_status_bar(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä—É"""
        print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä—É...")
        
        status_bar = self.statusBar()
        
        # –ì–æ–ª–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        self.status_message = QLabel("PhotoControl v2.0 –≥–æ—Ç–æ–≤–∏–π")
        status_bar.addWidget(self.status_message)
        
        # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setMaximumWidth(200)
        status_bar.addPermanentWidget(self.progress_bar)
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.image_status = QLabel("‚Äî")
        status_bar.addPermanentWidget(self.image_status)
        
        # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
        self.processed_counter = QLabel("–û–±—Ä–æ–±–ª–µ–Ω–æ: 0")
        status_bar.addPermanentWidget(self.processed_counter)
        
        print("‚úÖ –°—Ç–∞—Ç—É—Å-–±–∞—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
    
    def _setup_connections(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω—å —Å–∏–≥–Ω–∞–ª—ñ–≤"""
        print("üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤...")
        
        # === –õ–Ü–í–ê –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–Ü–ù–ù–Ø ===
        if self.control_panel:
            self.control_panel.open_image_requested.connect(self.open_image)
            self.control_panel.open_folder_requested.connect(self.open_folder)
            self.control_panel.save_image_requested.connect(self.save_current_image)
            self.control_panel.create_album_requested.connect(self.create_album)
            self.control_panel.save_current_data_requested.connect(self.save_current_image_data)
            if hasattr(self.control_panel, 'language_changed'):
                self.control_panel.language_changed.connect(self.set_language)
            print("‚úÖ ControlPanel –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
        
        # === –ü–†–ê–í–ê –ü–ê–ù–ï–õ–¨ –î–ê–ù–ò–• ===
        if self.data_panel:
            if hasattr(self.data_panel, 'target_data_changed'):
                self.data_panel.target_data_changed.connect(self.on_target_data_changed)
            if hasattr(self.data_panel, 'grid_scale_changed'):
                self.data_panel.grid_scale_changed.connect(self.on_grid_scale_changed)
            print("‚úÖ DataPanel –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
        
        # === –ü–ê–ù–ï–õ–¨ –ó–û–ë–†–ê–ñ–ï–ù–ù–Ø ===
        if self.image_panel:
            if hasattr(self.image_panel, 'image_clicked'):
                self.image_panel.image_clicked.connect(self.on_image_clicked)
            if hasattr(self.image_panel, 'analysis_point_changed'):
                self.image_panel.analysis_point_changed.connect(self.on_analysis_point_changed)
            print("‚úÖ ImagePanel –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
        
        # === –ë–†–ê–£–ó–ï–† –ú–Ü–ù–Ü–ê–¢–Æ–† ===
        if self.thumbnail_browser:
            if hasattr(self.thumbnail_browser, 'image_selected'):
                self.thumbnail_browser.image_selected.connect(self.on_thumbnail_selected)
            if hasattr(self.thumbnail_browser, 'processing_status_changed'):
                self.thumbnail_browser.processing_status_changed.connect(self.on_processing_status_changed)
            print("‚úÖ ThumbnailBrowser –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
        
        print("‚úÖ –í—Å—ñ —Å–∏–≥–Ω–∞–ª–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!")
    
    # ===============================
    # –§–ê–ô–õ–û–í–Ü –û–ü–ï–†–ê–¶–Ü–á
    # ===============================
    
    def open_image(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –æ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—è–∫ —É legacy –≤–µ—Ä—Å—ñ—ó)"""
        print("üñºÔ∏è –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
        
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í–∏–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "",
            "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è (*.jpg *.jpeg *.png *.bmp *.gif *.tiff);;–í—Å—ñ —Ñ–∞–π–ª–∏ (*.*)"
        )
        
        if file_path:
            self.load_image(file_path)

    def open_folder(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–ø–∫–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ (—è–∫ —É legacy –≤–µ—Ä—Å—ñ—ó)"""
        print("üìÅ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–ø–∫–∏...")
        
        folder_path = QFileDialog.getExistingDirectory(
            self, "–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏", ""
        )
        
        if folder_path:
            self.current_folder = folder_path
            self.load_folder_thumbnails(folder_path)

    def load_image(self, file_path: str):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        try:
            print(f"üñºÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {file_path}")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if ImageProcessor:
                self.image_processor = ImageProcessor()
                if hasattr(self.image_processor, 'load_image'):
                    self.image_processor.load_image(file_path)
            
            self.current_image_path = file_path
            filename = os.path.basename(file_path)
            self.setWindowTitle(f"PhotoControl - {filename}")
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è
            if self.control_panel and hasattr(self.control_panel, 'add_result'):
                self.control_panel.add_result(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {filename}")
            
            # –ü–†–ê–í–ò–õ–¨–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø –ó–ê–ì–õ–£–®–ö–ò IMAGEPANEL
            if hasattr(self, 'image_placeholder') and hasattr(self.image_placeholder, 'main_label'):
                self.image_placeholder.main_label.setText(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:\n{filename}\n\n(ImagePanel –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)")
            
            print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {filename}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
            if self.control_panel and hasattr(self.control_panel, 'add_result'):
                self.control_panel.add_result(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

    def load_folder_thumbnails(self, folder_path: str):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—ñ–Ω—ñ–∞—Ç—é—Ä –ø–∞–ø–∫–∏"""
        try:
            print(f"üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞–ø–∫–∏: {folder_path}")
            
            # –ü–æ—à—É–∫ –∑–æ–±—Ä–∞–∂–µ–Ω—å
            image_extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff', '.tif')
            image_files = [os.path.join(folder_path, f) for f in os.listdir(folder_path) 
                        if f.lower().endswith(image_extensions)]
            image_files.sort()
            
            folder_name = os.path.basename(folder_path)
            self.setWindowTitle(f"PhotoControl - {folder_name}")
            
            print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {len(image_files)}")
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è
            if self.control_panel and hasattr(self.control_panel, 'add_result'):
                self.control_panel.add_result(f"–í—ñ–¥–∫—Ä–∏—Ç–æ –ø–∞–ø–∫—É: {folder_name}")
                self.control_panel.add_result(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: {len(image_files)}")
            
            # –ü–†–ê–í–ò–õ–¨–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø –ó–ê–ì–õ–£–®–ö–ò THUMBNAILBROWSER
            if hasattr(self, 'thumbnail_placeholder') and hasattr(self.thumbnail_placeholder, 'main_label'):
                self.thumbnail_placeholder.main_label.setText(
                    f"–ü–∞–ø–∫–∞:\n{folder_name}\n\n–ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(image_files)}\n\n(ThumbnailBrowser –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)"
                )
            
            # –ü–µ—Ä–µ–¥–∞—á–∞ –≤ ThumbnailBrowser (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)
            if self.thumbnail_browser and hasattr(self.thumbnail_browser, 'load_folder'):
                self.thumbnail_browser.load_folder(folder_path)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if image_files:
                self.load_image(image_files[0])
            
            print(f"‚úÖ –ü–∞–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: {len(image_files)} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞–ø–∫–∏: {e}")
            if self.control_panel and hasattr(self.control_panel, 'add_result'):
                self.control_panel.add_result(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
    
    def save_current_image(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        print("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
        
        if not self.current_image_path:
            QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
            return
        
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–ó–±–µ—Ä–µ–≥—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "",
            "JPEG —Ñ–∞–π–ª–∏ (*.jpg);;PNG —Ñ–∞–π–ª–∏ (*.png);;–í—Å—ñ —Ñ–∞–π–ª–∏ (*.*)"
        )
        
        if file_path:
            print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤: {file_path}")
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
            if self.control_panel and hasattr(self.control_panel, 'add_result'):
                self.control_panel.add_result(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {os.path.basename(file_path)}")
            
            # TODO: –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ImageProcessor
    
    def save_current_image_data(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏"""
        print("üìã –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏...")
        
        if not self.current_image_path:
            QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
            return
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        if self.control_panel and hasattr(self.control_panel, 'add_result'):
            self.control_panel.add_result("–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏")
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞
        self.processed_images.append({"path": self.current_image_path})
        self.processed_counter.setText(f"–û–±—Ä–æ–±–ª–µ–Ω–æ: {len(self.processed_images)}")
        
        # –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É
        self.album_action.setEnabled(True)
        
        # TODO: –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    
    def create_album(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Word –∞–ª—å–±–æ–º—É"""
        print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É...")
        
        if not self.processed_images:
            QMessageBox.warning(self, "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ù–µ–º–∞—î –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É")
            return
        
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–ª—å–±–æ–º", "",
            "Word –¥–æ–∫—É–º–µ–Ω—Ç–∏ (*.docx);;–í—Å—ñ —Ñ–∞–π–ª–∏ (*.*)"
        )
        
        if file_path:
            print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É: {file_path}")
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
            if self.control_panel and hasattr(self.control_panel, 'add_result'):
                self.control_panel.add_result(f"–°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∞–ª—å–±–æ–º: {os.path.basename(file_path)}")
            
            # TODO: –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—É —á–µ—Ä–µ–∑ AlbumCreator
    
    # ===============================
    # –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô –ü–ê–ù–ï–õ–ï–ô
    # ===============================
    
    def on_image_clicked(self, x: int, y: int):
        """–û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –ø–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—é"""
        print(f"üñ±Ô∏è –ö–ª—ñ–∫ –ø–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—é: ({x}, {y})")
        
        if self.control_panel and hasattr(self.control_panel, 'add_result'):
            self.control_panel.add_result(f"–¢–æ—á–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ({x}, {y})")
    
    def on_analysis_point_changed(self, analysis_point):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É"""
        print(f"üìä –ó–º—ñ–Ω–∞ —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É: {analysis_point}")
        
        if self.control_panel and hasattr(self.control_panel, 'add_result'):
            self.control_panel.add_result("–¢–æ—á–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –æ–Ω–æ–≤–ª–µ–Ω–∞")
    
    def on_thumbnail_selected(self, image_path: str):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏"""
        print(f"üñºÔ∏è –í–∏–±—Ä–∞–Ω–æ –º—ñ–Ω—ñ–∞—Ç—é—Ä—É: {image_path}")
        
        self.current_image_path = image_path
        
        if self.control_panel and hasattr(self.control_panel, 'add_result'):
            self.control_panel.add_result(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –±—Ä–∞—É–∑–µ—Ä–∞: {os.path.basename(image_path)}")
    
    def on_processing_status_changed(self, image_path: str, is_processed: bool):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        status = "–æ–±—Ä–æ–±–ª–µ–Ω–æ" if is_processed else "—Å–∫–∞—Å–æ–≤–∞–Ω–æ"
        print(f"üìã –°—Ç–∞—Ç—É—Å –æ–±—Ä–æ–±–∫–∏ - {os.path.basename(image_path)}: {status}")
        
        if self.control_panel and hasattr(self.control_panel, 'add_result'):
            self.control_panel.add_result(f"–°—Ç–∞—Ç—É—Å - {os.path.basename(image_path)}: {status}")
    
    def on_target_data_changed(self, data: Dict[str, Any]):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ü—ñ–ª—å"""
        print(f"üéØ –î–∞–Ω—ñ —Ü—ñ–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ: {data}")
        
        if self.control_panel and hasattr(self.control_panel, 'add_result'):
            self.control_panel.add_result("–î–∞–Ω—ñ —Ü—ñ–ª—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ")
    
    def on_grid_scale_changed(self, scale: int):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –º–∞—Å—à—Ç–∞–±—É —Å—ñ—Ç–∫–∏"""
        print(f"üìè –ú–∞—Å—à—Ç–∞–± –∑–º—ñ–Ω–µ–Ω–æ: 1:{scale}")
        
        if self.control_panel and hasattr(self.control_panel, 'add_result'):
            self.control_panel.add_result(f"–ú–∞—Å—à—Ç–∞–± –∑–º—ñ–Ω–µ–Ω–æ: 1:{scale}")
    
    def set_language(self, language):
        """–ó–º—ñ–Ω–∞ –º–æ–≤–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        print(f"üåê –ú–æ–≤–∞ –∑–º—ñ–Ω–µ–Ω–∞: {language}")
        
        if self.control_panel and hasattr(self.control_panel, 'add_result'):
            self.control_panel.add_result(f"–ú–æ–≤–∞ –∑–º—ñ–Ω–µ–Ω–∞: {language}")
    
    # ===============================
    # –Ü–ù–¢–ï–†–§–ï–ô–°–ù–Ü –ú–ï–¢–û–î–ò
    # ===============================
    
    def _toggle_thumbnails(self, checked: bool):
        """–ü–æ–∫–∞–∑–∞—Ç–∏/—Å—Ö–æ–≤–∞—Ç–∏ –±—Ä–∞—É–∑–µ—Ä –º—ñ–Ω—ñ–∞—Ç—é—Ä"""
        if self.thumbnail_browser:
            self.thumbnail_browser.setVisible(checked)
        else:
            # –Ø–∫—â–æ ThumbnailBrowser –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∑–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–≥–ª—É—à–∫—É
            if hasattr(self, 'center_splitter'):
                widget = self.center_splitter.widget(0)
                if widget:
                    widget.setVisible(checked)
    
    def _toggle_data_panel(self, checked: bool):
        """–ü–æ–∫–∞–∑–∞—Ç–∏/—Å—Ö–æ–≤–∞—Ç–∏ –ø–∞–Ω–µ–ª—å –¥–∞–Ω–∏—Ö"""
        if self.data_panel:
            self.data_panel.setVisible(checked)
        else:
            # –Ø–∫—â–æ DataPanel –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∑–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–≥–ª—É—à–∫—É
            if hasattr(self, 'main_splitter'):
                widget = self.main_splitter.widget(2)
                if widget:
                    widget.setVisible(checked)
    
    def _show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É"""
        available_modules = []
        if ControlPanel:
            available_modules.append("ControlPanel")
        if DataPanel:
            available_modules.append("DataPanel")
        if ImagePanel:
            available_modules.append("ImagePanel")
        if ThumbnailBrowser:
            available_modules.append("ThumbnailBrowser")
        if ImageProcessor:
            available_modules.append("ImageProcessor")
        if AlbumCreator:
            available_modules.append("AlbumCreator")
        
        modules_text = ", ".join(available_modules) if available_modules else "–ë–∞–∑–æ–≤—ñ –º–æ–¥—É–ª—ñ"
        
        QMessageBox.about(
            self,
            "–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É",
            f"""
            <h3>PhotoControl v2.0</h3>
            <p>–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ –∞–∑–∏–º—É—Ç–∞–ª—å–Ω–æ—é —Å—ñ—Ç–∫–æ—é</p>
            
            <p><b>–°—Ç–∞—Ç—É—Å:</b> –ì–æ—Ç–æ–≤–∏–π –¥–æ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤</p>
            <p><b>–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞:</b> ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞</p>
            <p><b>–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å:</b> ‚úÖ –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π</p>
            
            <h4>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –º–æ–¥—É–ª—ñ:</h4>
            <p>{modules_text}</p>
            
            <h4>–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:</h4>
            <ul>
            <li>–§–∞–π–ª–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó</li>
            <li>–ú–µ–Ω—é —Ç–∞ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä</li>
            <li>–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è</li>
            <li>–ë–µ–∑–ø–µ—á–Ω—ñ fallback –º–æ–¥—É–ª—ñ</li>
            </ul>
            
            <p><small>¬© 2025 PhotoControl Team</small></p>
            """
        )
    
    def _load_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        print("üìñ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ –≤—ñ–∫–Ω–∞
        if self.settings.contains("geometry"):
            self.restoreGeometry(self.settings.value("geometry"))
        
        if self.settings.contains("windowState"):
            self.restoreState(self.settings.value("windowState"))
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–≤–∏
        if self.settings.contains("language") and Language:
            language_value = self.settings.value("language")
            print(f"üìñ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –º–æ–≤–∞: {language_value}")
        
        print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
    
    def _save_settings(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        print("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")
        
        self.settings.setValue("geometry", self.saveGeometry())
        self.settings.setValue("windowState", self.saveState())
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–≤–∏
        if self.translator and Language:
            current_language = getattr(self.translator, 'current_language', Language.UKRAINIAN)
            self.settings.setValue("language", current_language.value)
        
        print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    
    def _update_translations(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        if not self.translator:
            return
        
        print("üåê –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...")
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤—ñ–∫–Ω–∞
        self.setWindowTitle("PhotoControl - –û–±—Ä–æ–±–∫–∞ –∞–∑–∏–º—É—Ç–∞–ª—å–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω—é
        if hasattr(self, 'open_image_action'):
            self.open_image_action.setText("–í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
        if hasattr(self, 'open_folder_action'):
            self.open_folder_action.setText("–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É")
        
        print("‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    
    # ===============================
    # –ö–õ–ê–í–Ü–ê–¢–£–†–ù–ï –£–ü–†–ê–í–õ–Ü–ù–ù–Ø
    # ===============================
    
    def keyPressEvent(self, event):
        """–û–±—Ä–æ–±–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∏—Ö —Å–∫–æ—Ä–æ—á–µ–Ω—å"""
        # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è—Ö
        if event.key() == Qt.Key_Left:
            if self.thumbnail_browser and hasattr(self.thumbnail_browser, 'select_previous_image'):
                self.thumbnail_browser.select_previous_image()
        elif event.key() == Qt.Key_Right:
            if self.thumbnail_browser and hasattr(self.thumbnail_browser, 'select_next_image'):
                self.thumbnail_browser.select_next_image()
        elif event.key() == Qt.Key_Escape:
            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
            print("üö™ Escape - –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É")
        elif event.key() == Qt.Key_Space:
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            if event.modifiers() == Qt.ControlModifier:
                self.save_current_image_data()
        else:
            super().keyPressEvent(event)
    
    # ===============================
    # –ó–ê–ö–†–ò–¢–¢–Ø –ü–†–û–ì–†–ê–ú–ò
    # ===============================
    
    def closeEvent(self, event):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        print("üö™ –ó–∞–∫—Ä–∏—Ç—Ç—è PhotoControl v2.0...")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        self._save_settings()
        
        # –ó—É–ø–∏–Ω–∫–∞ –ø–æ—Ç–æ–∫—ñ–≤
        if self.processing_thread and self.processing_thread.isRunning():
            print("‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –ø–æ—Ç–æ–∫—ñ–≤ –æ–±—Ä–æ–±–∫–∏...")
            self.processing_thread.quit()
            self.processing_thread.wait(3000)  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥–∏
        
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        if self.album_creator and hasattr(self.album_creator, 'cleanup_temp_files'):
            print("üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
            self.album_creator.cleanup_temp_files()
        
        print("‚úÖ PhotoControl v2.0 –∑–∞–∫—Ä–∏—Ç–æ —É—Å–ø—ñ—à–Ω–æ!")
        event.accept()


# ===============================
# –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ì–û–õ–û–í–ù–û–ì–û –í–Ü–ö–ù–ê
# ===============================

if __name__ == "__main__":
    import sys
    
    print("üöÄ –ó–ê–ü–£–°–ö PHOTOCONTROL V2.0")
    print("=" * 50)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏—Å–æ–∫–æ—ó —Ä–æ–∑–¥—ñ–ª—å–Ω–æ—ó –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ
    QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)
    QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)
    
    app = QApplication(sys.argv)
    app.setApplicationName("PhotoControl")
    app.setApplicationVersion("2.0.0")
    app.setOrganizationName("PhotoControl Team")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    try:
        print("üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞...")
        window = MainWindow()
        window.show()
        
        print("\n" + "=" * 50)
        print("‚úÖ PHOTOCONTROL V2.0 –ó–ê–ü–£–©–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print("=" * 50)
        print()
        print("üìã –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:")
        print(f"   MainWindow: ‚úÖ")
        print(f"   ControlPanel: {'‚úÖ' if window.control_panel else '‚ö†Ô∏è –∑–∞–≥–ª—É—à–∫–∞'}")
        print(f"   ImagePanel: {'‚úÖ' if window.image_panel else '‚ö†Ô∏è –∑–∞–≥–ª—É—à–∫–∞'}")
        print(f"   DataPanel: {'‚úÖ' if window.data_panel else '‚ö†Ô∏è –∑–∞–≥–ª—É—à–∫–∞'}")
        print(f"   ThumbnailBrowser: {'‚úÖ' if window.thumbnail_browser else '‚ö†Ô∏è –∑–∞–≥–ª—É—à–∫–∞'}")
        print()
        print("üéØ –©–æ –ø—Ä–∞—Ü—é—î:")
        print("   üìÅ –§–∞–π–ª–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó (Ctrl+O, Ctrl+Shift+O)")
        print("   üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å (Ctrl+S)")
        print("   üìÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª—å–±–æ–º—ñ–≤ (Ctrl+A)")
        print("   üìã –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è")
        print("   üåê –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º–æ–≤–∏")
        print("   ‚å®Ô∏è –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω—ñ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è")
        print()
        print("üîß –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
        sys.exit(app.exec_())
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)