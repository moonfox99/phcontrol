# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è UI –≤ —Ñ–∞–π–ª—ñ constants.py

# –î–æ–¥–∞—Ç–∏ –≤ –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É constants.py:

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å (–¥–æ–¥–∞—Ç–∏ –≤ UIConstants)
THUMBNAIL_SIZE: int = 80  # –†–æ–∑–º—ñ—Ä –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
THUMBNAIL_WIDTH: int = 90  # –®–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏  
THUMBNAIL_HEIGHT: int = 120  # –í–∏—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –æ–ø–∏—Å—É –†–õ–° (–¥–æ–¥–∞—Ç–∏ –≤ RadarDescription)
DESCRIPTION_WIDTH_RATIO: float = 0.286  # 28.60% —à–∏—Ä–∏–Ω–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
DESCRIPTION_HEIGHT_RATIO: float = 0.195  # 19.54% –≤–∏—Å–æ—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

import math
import os
from typing import Tuple, Optional, Dict, Any, List
from dataclasses import dataclass
from PIL import Image, ImageDraw, ImageFont, ImageOps

from core.constants import IMAGE, GRID, VALIDATION, RADAR


@dataclass
class AnalysisPoint:
    """–¢–æ—á–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ"""
    x: int
    y: int
    azimuth: float
    range_km: float


@dataclass
class GridSettings:
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–∑–∏–º—É—Ç–∞–ª—å–Ω–æ—ó —Å—ñ—Ç–∫–∏"""
    center_x: int
    center_y: int
    scale_value: int
    custom_scale_distance: Optional[float] = None
    scale_edge_x: Optional[int] = None
    scale_edge_y: Optional[int] = None


@dataclass
class RadarDescription:
    """–û–ø–∏—Å –†–õ–° –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    date: str
    callsign: str
    name: str
    number: str
    enabled: bool = False


class ImageProcessor:
    """
    –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ –∞–∑–∏–º—É—Ç–∞–ª—å–Ω–∏–º–∏ —Å—ñ—Ç–∫–∞–º–∏
    
    –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
    - –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
    - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–æ–º –∞–∑–∏–º—É—Ç–∞–ª—å–Ω–æ—ó —Å—ñ—Ç–∫–∏
    - –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–∑–∏–º—É—Ç—É —Ç–∞ –¥–∞–ª—å–Ω–æ—Å—Ç—ñ
    - –ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É
    - –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –º—ñ–∂ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
    - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–°
    """
    
    def __init__(self, image_path: str, scale_value: int = None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
        
        Args:
            image_path: –®–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            scale_value: –ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç)
        """
        self.image_path = image_path
        self.original_image: Optional[Image.Image] = None
        self.working_image: Optional[Image.Image] = None
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
        self.grid_settings = GridSettings(
            center_x=0,
            center_y=0,
            scale_value=scale_value or GRID.DEFAULT_SCALE
        )
        
        # –ü–æ—Ç–æ—á–Ω–∞ —Ç–æ—á–∫–∞ –∞–Ω–∞–ª—ñ–∑—É
        self.current_analysis_point: Optional[AnalysisPoint] = None
        
        # –û–ø–∏—Å –†–õ–°
        self.radar_description: Optional[RadarDescription] = None
        
        # –ü—Ä–∞–ø–æ—Ä—Ü—ñ —Å—Ç–∞–Ω—É
        self.is_loaded = False
        self.has_custom_scale = False
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self._load_image()
        self._initialize_grid_center()
    
    def _load_image(self) -> bool:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        try:
            if not os.path.exists(self.image_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: {self.image_path}")
                return False
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            self.original_image = Image.open(self.image_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ RGB —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if self.original_image.mode == 'RGBA':
                # –°—Ç–≤–æ—Ä—é—î–º–æ –±—ñ–ª–∏–π —Ñ–æ–Ω –¥–ª—è RGBA
                rgb_image = Image.new('RGB', self.original_image.size, (255, 255, 255))
                rgb_image.paste(self.original_image, mask=self.original_image.split()[-1])
                self.original_image = rgb_image
            elif self.original_image.mode != 'RGB':
                self.original_image = self.original_image.convert('RGB')
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ—ó –∫–æ–ø—ñ—ó
            self.working_image = self.original_image.copy()
            
            self.is_loaded = True
            print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {os.path.basename(self.image_path)}")
            print(f"   –†–æ–∑–º—ñ—Ä: {self.original_image.width}x{self.original_image.height}")
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π
            self._validate_aspect_ratio()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
            self.is_loaded = False
            return False
    
    def _validate_aspect_ratio(self) -> None:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (15:13)"""
        if not self.original_image:
            return
        
        width, height = self.original_image.size
        actual_ratio = width / height
        expected_ratio = IMAGE.REQUIRED_ASPECT_RATIO
        tolerance = 0.1
        
        if abs(actual_ratio - expected_ratio) > tolerance:
            print(f"‚ö†Ô∏è  –£–≤–∞–≥–∞: –ü—Ä–æ–ø–æ—Ä—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {actual_ratio:.2f} –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è –≤—ñ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö {expected_ratio:.2f}")
    
    def _initialize_grid_center(self) -> None:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ü–µ–Ω—Ç—Ä—É —Å—ñ—Ç–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not self.original_image:
            return
        
        self.grid_settings.center_x = self.original_image.width // 2
        self.grid_settings.center_y = self.original_image.height // 2
        
        print(f"üìç –¶–µ–Ω—Ç—Ä —Å—ñ—Ç–∫–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ({self.grid_settings.center_x}, {self.grid_settings.center_y})")
    
    # ===== –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –¶–ï–ù–¢–†–û–ú –°–Ü–¢–ö–ò =====
    
    def move_center(self, dx: int, dy: int) -> bool:
        """
        –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä—É —Å—ñ—Ç–∫–∏
        
        Args:
            dx: –ó–º—ñ—â–µ–Ω–Ω—è –ø–æ X
            dy: –ó–º—ñ—â–µ–Ω–Ω—è –ø–æ Y
            
        Returns:
            True —è–∫—â–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ
        """
        if not self.original_image:
            return False
        
        new_x = self.grid_settings.center_x + dx
        new_y = self.grid_settings.center_y + dy
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ–∂
        if (0 <= new_x < self.original_image.width and 
            0 <= new_y < self.original_image.height):
            
            self.grid_settings.center_x = new_x
            self.grid_settings.center_y = new_y
            
            # –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É —è–∫—â–æ —ñ—Å–Ω—É—î
            self._recalculate_analysis_point()
            
            print(f"üìç –¶–µ–Ω—Ç—Ä –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –Ω–∞: ({new_x}, {new_y})")
            return True
        
        return False
    
    def set_center(self, x: int, y: int) -> bool:
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä—É —Å—ñ—Ç–∫–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ç–æ—á–∫—É
        
        Args:
            x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
            y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
            
        Returns:
            True —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ
        """
        if not self.original_image:
            return False
        
        if (0 <= x < self.original_image.width and 
            0 <= y < self.original_image.height):
            
            self.grid_settings.center_x = x
            self.grid_settings.center_y = y
            
            # –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É —è–∫—â–æ —ñ—Å–Ω—É—î
            self._recalculate_analysis_point()
            
            print(f"üìç –¶–µ–Ω—Ç—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ({x}, {y})")
            return True
        
        return False
    
    # ===== –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ú–ê–°–®–¢–ê–ë–û–ú =====
    
    def set_scale_edge(self, x: int, y: int) -> bool:
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—Ä–∞—é –º–∞—Å—à—Ç–∞–±—É –¥–ª—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
        
        Args:
            x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –∫—Ä–∞—é
            y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –∫—Ä–∞—é
            
        Returns:
            True —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ
        """
        if not self.original_image:
            return False
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É –¥–æ –∫—Ä–∞—é –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
        dx = x - self.grid_settings.center_x
        dy = y - self.grid_settings.center_y
        distance_pixels = math.sqrt(dx * dx + dy * dy)
        
        if distance_pixels > 0:
            self.grid_settings.scale_edge_x = x
            self.grid_settings.scale_edge_y = y
            self.grid_settings.custom_scale_distance = distance_pixels
            self.has_custom_scale = True
            
            # –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É —è–∫—â–æ —ñ—Å–Ω—É—î
            self._recalculate_analysis_point()
            
            print(f"üìè –ö—Ä–∞–π –º–∞—Å—à—Ç–∞–±—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ({x}, {y}), –≤—ñ–¥—Å—Ç–∞–Ω—å: {distance_pixels:.1f} –ø—ñ–∫—Å")
            return True
        
        return False
    
    def set_scale_value(self, scale_value: int) -> bool:
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É
        
        Args:
            scale_value: –ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É –≤ –∫–º
            
        Returns:
            True —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ
        """
        if scale_value in GRID.AVAILABLE_SCALES:
            self.grid_settings.scale_value = scale_value
            
            # –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É —è–∫—â–æ —ñ—Å–Ω—É—î
            self._recalculate_analysis_point()
            
            print(f"üìè –ú–∞—Å—à—Ç–∞–± –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {scale_value} –∫–º")
            return True
        
        return False
    
    # ===== –ê–ù–ê–õ–Ü–ó –¢–û–ß–û–ö =====
    
    def set_analysis_point(self, x: int, y: int) -> Optional[AnalysisPoint]:
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –∑ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º –∞–∑–∏–º—É—Ç—É —Ç–∞ –¥–∞–ª—å–Ω–æ—Å—Ç—ñ
        
        Args:
            x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X —Ç–æ—á–∫–∏
            y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y —Ç–æ—á–∫–∏
            
        Returns:
            AnalysisPoint –∑ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∞–±–æ None
        """
        if not self.original_image:
            return None
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–∑–∏–º—É—Ç—É —Ç–∞ –¥–∞–ª—å–Ω–æ—Å—Ç—ñ
        azimuth, range_km = self._calculate_azimuth_range(x, y)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É
        self.current_analysis_point = AnalysisPoint(
            x=x,
            y=y,
            azimuth=azimuth,
            range_km=range_km
        )
        
        print(f"üéØ –¢–æ—á–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: ({x}, {y}) ‚Üí –ê–∑–∏–º—É—Ç: {azimuth:.0f}¬∞, –î–∞–ª—å–Ω—ñ—Å—Ç—å: {range_km:.0f} –∫–º")
        return self.current_analysis_point
    
    def _calculate_azimuth_range(self, x: int, y: int) -> Tuple[float, float]:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–∑–∏–º—É—Ç—É —Ç–∞ –¥–∞–ª—å–Ω–æ—Å—Ç—ñ –¥–ª—è —Ç–æ—á–∫–∏
        
        Args:
            x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X —Ç–æ—á–∫–∏
            y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y —Ç–æ—á–∫–∏
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–∞–∑–∏–º—É—Ç_–≤_–≥—Ä–∞–¥—É—Å–∞—Ö, –¥–∞–ª—å–Ω—ñ—Å—Ç—å_–≤_–∫–º)
        """
        # –í—ñ–¥–Ω–æ—Å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É
        dx = x - self.grid_settings.center_x
        dy = self.grid_settings.center_y - y  # –Ü–Ω–≤–µ—Ä—Ç—É—î–º–æ Y (–º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–∞–ª—å–Ω–æ—Å—Ç—ñ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
        range_pixels = math.sqrt(dx * dx + dy * dy)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–∞–ª—å–Ω–æ—Å—Ç—ñ –≤ —Ä–µ–∞–ª—å–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—è—Ö
        if self.has_custom_scale and self.grid_settings.custom_scale_distance:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –º–∞—Å—à—Ç–∞–±
            range_actual = (range_pixels / self.grid_settings.custom_scale_distance) * self.grid_settings.scale_value
        else:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–∞—Å—à—Ç–∞–± (–¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ –∫—Ä–∞—é)
            bottom_edge_distance = self.original_image.height - self.grid_settings.center_y
            if bottom_edge_distance > 0:
                range_actual = (range_pixels / bottom_edge_distance) * self.grid_settings.scale_value
            else:
                range_actual = 0.0
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–∑–∏–º—É—Ç—É
        azimuth_radians = math.atan2(dx, dy)  # atan2(x, y) –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–∑–∏–º—É—Ç—É
        azimuth_degrees = math.degrees(azimuth_radians)
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–∑–∏–º—É—Ç—É –¥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É 0-360¬∞
        if azimuth_degrees < 0:
            azimuth_degrees += 360
        
        return azimuth_degrees, range_actual
    
    def _recalculate_analysis_point(self) -> None:
        """–ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç–æ—á–Ω–æ—ó —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Å—ñ—Ç–∫–∏"""
        if self.current_analysis_point:
            azimuth, range_km = self._calculate_azimuth_range(
                self.current_analysis_point.x,
                self.current_analysis_point.y
            )
            self.current_analysis_point.azimuth = azimuth
            self.current_analysis_point.range_km = range_km
    
    # ===== –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø =====
    
    def create_preview_image(self, show_grid: bool = True, show_analysis: bool = True, 
                           show_radar_desc: bool = False) -> Optional[Image.Image]:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –∑ –Ω–∞–∫–ª–∞–¥–µ–Ω–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
        
        Args:
            show_grid: –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∞–∑–∏–º—É—Ç–∞–ª—å–Ω—É —Å—ñ—Ç–∫—É
            show_analysis: –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–æ—á–∫—É –∞–Ω–∞–ª—ñ–∑—É
            show_radar_desc: –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –æ–ø–∏—Å –†–õ–°
            
        Returns:
            –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–±–æ None
        """
        if not self.working_image:
            return None
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –¥–ª—è —Ä–æ–±–æ—Ç–∏
        preview = self.working_image.copy()
        draw = ImageDraw.Draw(preview)
        
        # –ú–∞–ª—é–≤–∞–Ω–Ω—è –∞–∑–∏–º—É—Ç–∞–ª—å–Ω–æ—ó —Å—ñ—Ç–∫–∏
        if show_grid:
            self._draw_azimuth_grid(draw, preview.size)
        
        # –ú–∞–ª—é–≤–∞–Ω–Ω—è —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É
        if show_analysis and self.current_analysis_point:
            self._draw_analysis_point(draw)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–°
        if show_radar_desc and self.radar_description and self.radar_description.enabled:
            preview = self._add_radar_description(preview)
        
        return preview
    
    def _draw_azimuth_grid(self, draw: ImageDraw.Draw, image_size: Tuple[int, int]) -> None:
        """–ú–∞–ª—é–≤–∞–Ω–Ω—è –∞–∑–∏–º—É—Ç–∞–ª—å–Ω–æ—ó —Å—ñ—Ç–∫–∏"""
        center_x = self.grid_settings.center_x
        center_y = self.grid_settings.center_y
        
        # –ö–æ–ª—ñ—Ä —Ç–∞ —Ç–æ–≤—â–∏–Ω–∞ –ª—ñ–Ω—ñ–π
        line_color = (0, 255, 0, 128)  # –ó–µ–ª–µ–Ω–∏–π –∑ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—é
        line_width = 1
        
        # –ú–∞–ª—é–≤–∞–Ω–Ω—è –∞–∑–∏–º—É—Ç–∞–ª—å–Ω–∏—Ö –ª—ñ–Ω—ñ–π (—á–µ—Ä–µ–∑ –∫–æ–∂–Ω—ñ 30¬∞)
        max_radius = max(image_size[0], image_size[1])
        
        for angle in range(0, 360, 30):
            angle_rad = math.radians(angle)
            end_x = center_x + max_radius * math.sin(angle_rad)
            end_y = center_y - max_radius * math.cos(angle_rad)
            
            draw.line([center_x, center_y, end_x, end_y], 
                     fill=line_color, width=line_width)
        
        # –ú–∞–ª—é–≤–∞–Ω–Ω—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–Ω–∏—Ö –∫—ñ–ª
        if self.has_custom_scale and self.grid_settings.custom_scale_distance:
            scale_distance = self.grid_settings.custom_scale_distance
            scale_value = self.grid_settings.scale_value
            
            # –ö–æ–ª–∞ —á–µ—Ä–µ–∑ –∫–æ–∂–Ω—ñ 25 –∫–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –¥–∞–ª—å–Ω–æ—Å—Ç—ñ
            for range_km in range(25, scale_value + 25, 25):
                radius = (range_km / scale_value) * scale_distance
                if radius < max_radius:
                    bbox = [center_x - radius, center_y - radius,
                           center_x + radius, center_y + radius]
                    draw.ellipse(bbox, outline=line_color, width=line_width)
        
        # –ú–∞–ª—é–≤–∞–Ω–Ω—è —Ü–µ–Ω—Ç—Ä—É
        center_size = 3
        draw.ellipse([center_x - center_size, center_y - center_size,
                     center_x + center_size, center_y + center_size],
                    fill=(255, 0, 0), outline=(255, 255, 255), width=1)
        
        # –ú–∞–ª—é–≤–∞–Ω–Ω—è –∫—Ä–∞—é –º–∞—Å—à—Ç–∞–±—É —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        if (self.has_custom_scale and 
            self.grid_settings.scale_edge_x is not None and 
            self.grid_settings.scale_edge_y is not None):
            
            edge_x = self.grid_settings.scale_edge_x
            edge_y = self.grid_settings.scale_edge_y
            
            # –õ—ñ–Ω—ñ—è –¥–æ –∫—Ä–∞—é –º–∞—Å—à—Ç–∞–±—É
            draw.line([center_x, center_y, edge_x, edge_y], 
                     fill=(255, 255, 0), width=2)
            
            # –¢–æ—á–∫–∞ –∫—Ä–∞—é –º–∞—Å—à—Ç–∞–±—É
            edge_size = 4
            draw.ellipse([edge_x - edge_size, edge_y - edge_size,
                         edge_x + edge_size, edge_y + edge_size],
                        fill=(255, 255, 0), outline=(0, 0, 0), width=1)
    
    def _draw_analysis_point(self, draw: ImageDraw.Draw) -> None:
        """–ú–∞–ª—é–≤–∞–Ω–Ω—è —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É"""
        if not self.current_analysis_point:
            return
        
        x = self.current_analysis_point.x
        y = self.current_analysis_point.y
        
        # –¢–æ—á–∫–∞ –∞–Ω–∞–ª—ñ–∑—É
        point_size = 5
        draw.ellipse([x - point_size, y - point_size,
                     x + point_size, y + point_size],
                    fill=(0, 0, 255), outline=(255, 255, 255), width=2)
        
        # –õ—ñ–Ω—ñ—è –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É –¥–æ —Ç–æ—á–∫–∏
        draw.line([self.grid_settings.center_x, self.grid_settings.center_y, x, y], 
                 fill=(0, 0, 255), width=2)
    
    def _add_radar_description(self, image: Image.Image) -> Image.Image:
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–° –≤ –ª—ñ–≤–∏–π –Ω–∏–∂–Ω—ñ–π –∫—É—Ç"""
        if not self.radar_description:
            return image
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –¥–ª—è —Ä–æ–±–æ—Ç–∏
        result = image.copy()
        draw = ImageDraw.Draw(result)
        
        # –†–æ–∑–º—ñ—Ä–∏ —Ç–∞–±–ª–∏—á–∫–∏
        table_width = int(image.width * RADAR.DESCRIPTION_WIDTH_RATIO)
        table_height = int(image.height * RADAR.DESCRIPTION_HEIGHT_RATIO)
        
        # –ü–æ–∑–∏—Ü—ñ—è –≤ –ª—ñ–≤–æ–º—É –Ω–∏–∂–Ω—å–æ–º—É –∫—É—Ç–∫—É
        margin = 10
        table_x = margin
        table_y = image.height - table_height - margin
        
        # –§–æ–Ω —Ç–∞–±–ª–∏—á–∫–∏
        draw.rectangle([table_x, table_y, table_x + table_width, table_y + table_height],
                      fill=(255, 255, 255), outline=(0, 0, 0), width=2)
        
        # –¢–µ–∫—Å—Ç –æ–ø–∏—Å—É (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
        try:
            font_size = max(8, table_height // 8)
            font = ImageFont.load_default()
        except:
            font = None
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        text_y = table_y + 5
        line_height = table_height // 6
        
        lines = [
            f"–î–∞—Ç–∞: {self.radar_description.date}",
            f"–ü–æ–∑–∏–≤–Ω–∏–π: {self.radar_description.callsign}",
            f"–ù–∞–∑–≤–∞: {self.radar_description.name}",
            f"–ù–æ–º–µ—Ä: {self.radar_description.number}"
        ]
        
        for line in lines:
            if text_y + line_height < table_y + table_height:
                draw.text((table_x + 5, text_y), line, fill=(0, 0, 0), font=font)
                text_y += line_height
        
        return result
    
    # ===== –û–ü–ò–° –†–õ–° =====
    
    def set_radar_description(self, date: str, callsign: str, name: str, number: str, enabled: bool = True) -> None:
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–°"""
        self.radar_description = RadarDescription(
            date=date,
            callsign=callsign,
            name=name,
            number=number,
            enabled=enabled
        )
        
        print(f"üì° –û–ø–∏—Å –†–õ–° –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {callsign} - {name}")
    
    def toggle_radar_description(self, enabled: bool) -> None:
        """–í–∫–ª—é—á–µ–Ω–Ω—è/–≤–∏–∫–ª—é—á–µ–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–°"""
        if self.radar_description:
            self.radar_description.enabled = enabled
            print(f"üì° –û–ø–∏—Å –†–õ–° {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if enabled else '–≤–∏–º–∫–Ω–µ–Ω–æ'}")
    
    # ===== –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø =====
    
    def save_processed_image(self, output_path: str, include_grid: bool = True, 
                           include_analysis: bool = True, include_radar_desc: bool = None) -> bool:
        """
        –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        
        Args:
            output_path: –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            include_grid: –í–∫–ª—é—á–∞—Ç–∏ –∞–∑–∏–º—É—Ç–∞–ª—å–Ω—É —Å—ñ—Ç–∫—É
            include_analysis: –í–∫–ª—é—á–∞—Ç–∏ —Ç–æ—á–∫—É –∞–Ω–∞–ª—ñ–∑—É
            include_radar_desc: –í–∫–ª—é—á–∞—Ç–∏ –æ–ø–∏—Å –†–õ–° (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∞–≤—Ç–æ)
            
        Returns:
            True —è–∫—â–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ
        """
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∫–ª—é—á–µ–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–°
            if include_radar_desc is None:
                include_radar_desc = (self.radar_description and 
                                    self.radar_description.enabled)
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            final_image = self.create_preview_image(
                show_grid=include_grid,
                show_analysis=include_analysis,
                show_radar_desc=include_radar_desc
            )
            
            if final_image:
                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—é —è–∫—ñ—Å—Ç—é
                final_image.save(output_path, format='JPEG', quality=95, optimize=True)
                print(f"üíæ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")
                return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
        
        return False
    
    # ===== –ï–ö–°–ü–û–†–¢ –î–ê–ù–ò–• =====
    
    def get_export_data(self) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –≤ –∞–ª—å–±–æ–º
        
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        """
        data = {
            'image_path': self.image_path,
            'image_filename': os.path.basename(self.image_path),
            'image_size': (self.original_image.width, self.original_image.height) if self.original_image else (0, 0),
            'grid_settings': {
                'center_x': self.grid_settings.center_x,
                'center_y': self.grid_settings.center_y,
                'scale_value': self.grid_settings.scale_value,
                'has_custom_scale': self.has_custom_scale,
                'custom_scale_distance': self.grid_settings.custom_scale_distance,
                'scale_edge_x': self.grid_settings.scale_edge_x,
                'scale_edge_y': self.grid_settings.scale_edge_y
            }
        }
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É
        if self.current_analysis_point:
            data['analysis_point'] = {
                'x': self.current_analysis_point.x,
                'y': self.current_analysis_point.y,
                'azimuth': self.current_analysis_point.azimuth,
                'range_km': self.current_analysis_point.range_km
            }
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–°
        if self.radar_description:
            data['radar_description'] = {
                'date': self.radar_description.date,
                'callsign': self.radar_description.callsign,
                'name': self.radar_description.name,
                'number': self.radar_description.number,
                'enabled': self.radar_description.enabled
            }
        
        return data
    
    # ===== –£–¢–ò–õ–Ü–¢–ê–†–ù–Ü –ú–ï–¢–û–î–ò =====
    
    def get_image_info(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not self.original_image:
            return {}
        
        return {
            'path': self.image_path,
            'filename': os.path.basename(self.image_path),
            'size': (self.original_image.width, self.original_image.height),
            'mode': self.original_image.mode,
            'format': self.original_image.format,
            'file_size': os.path.getsize(self.image_path) if os.path.exists(self.image_path) else 0
        }
    
    def reset_analysis(self) -> None:
        """–°–∫–∏–¥–∞–Ω–Ω—è —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É"""
        self.current_analysis_point = None
        print("üîÑ –¢–æ—á–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –æ—á–∏—â–µ–Ω–∞")
    
    def reset_grid_settings(self) -> None:
        """–°–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å—ñ—Ç–∫–∏ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö"""
        self._initialize_grid_center()
        self.grid_settings.scale_value = GRID.DEFAULT_SCALE
        self.grid_settings.custom_scale_distance = None
        self.grid_settings.scale_edge_x = None
        self.grid_settings.scale_edge_y = None
        self.has_custom_scale = False
        
        # –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ—á–∫–∏ –∞–Ω–∞–ª—ñ–∑—É
        self._recalculate_analysis_point()
        
        print("üîÑ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏ —Å–∫–∏–Ω—É—Ç–æ")


# ===== –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ú–û–î–£–õ–Ø =====

if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ImageProcessor ===")
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
    # processor = ImageProcessor("test_image.jpg")
    # print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {processor.is_loaded}")
    # print(f"–Ü–Ω—Ñ–æ: {processor.get_image_info()}")
    
    print("–ú–æ–¥—É–ª—å ImageProcessor –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")