#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–° –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
–ó —Ç–æ—á–Ω–∏–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è–º–∏ 28.60% √ó 19.54% —Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è–º
"""

from typing import Dict, Any, Optional
from PIL import Image, ImageDraw, ImageFont
import os


class RadarDescriptionOverlay:
    """
    –ö–ª–∞—Å –¥–ª—è –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–° –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    
    –¢–æ—á–Ω—ñ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ legacy –≤–µ—Ä—Å—ñ—ó:
    - –®–∏—Ä–∏–Ω–∞: 28.60% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    - –í–∏—Å–æ—Ç–∞: 19.54% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    - –ü–æ–∑–∏—Ü—ñ—è: –ª—ñ–≤–∏–π –Ω–∏–∂–Ω—ñ–π –∫—É—Ç
    - –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏: 5.83% √ó 5.12%
    """
    
    # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–Ü –ö–û–ù–°–¢–ê–ù–¢–ò –∑ legacy –≤–µ—Ä—Å—ñ—ó
    RADAR_BOX_WIDTH_PERCENT = 28.60   # 4.29—Å–º / 15—Å–º * 100% = 28.60%
    RADAR_BOX_HEIGHT_PERCENT = 19.54  # 2.54—Å–º / 13—Å–º * 100% = 19.54%
    
    # –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ (–ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω—ñ)
    PADDING_HORIZONTAL_PERCENT = 5.83  # 0,25—Å–º / 4,29—Å–º * 100% = 5.83%
    PADDING_VERTICAL_PERCENT = 5.12    # 0,13—Å–º / 2,54—Å–º * 100% = 5.12%
    
    # –†–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É (16.7% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ = 12pt proportion)
    FONT_SIZE_PERCENT = 16.7
    
    # –í—ñ–¥—Å—Ç—É–ø –≤—ñ–¥ –∫—Ä–∞—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    MARGIN_FROM_EDGE_PERCENT = 1.0  # 1% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    
    def __init__(self):
        self.font_cache = {}
        self._load_fonts()
    
    def _load_fonts(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤"""
        try:
            # –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Arial Italic
            self.font_family = "arial.ttf"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —à—Ä–∏—Ñ—Ç—É –≤ —Å–∏—Å—Ç–µ–º—ñ
            if os.name == 'nt':  # Windows
                font_paths = [
                    "C:/Windows/Fonts/ariali.ttf",  # Arial Italic
                    "C:/Windows/Fonts/arial.ttf",   # Arial Regular
                ]
            else:  # Linux/macOS
                font_paths = [
                    "/usr/share/fonts/truetype/liberation/LiberationSans-Italic.ttf",
                    "/System/Library/Fonts/Arial.ttf",
                    "/usr/share/fonts/TTF/arial.ttf",
                ]
            
            self.available_font_path = None
            for path in font_paths:
                if os.path.exists(path):
                    self.available_font_path = path
                    break
                    
            print(f"–®—Ä–∏—Ñ—Ç –¥–ª—è –æ–ø–∏—Å—É –†–õ–°: {self.available_font_path or '—Å–∏—Å—Ç–µ–º–Ω–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º'}")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—ñ–≤: {e}")
            self.available_font_path = None
    
    def _get_font(self, size: int) -> ImageFont:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à—Ä–∏—Ñ—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º
        
        Args:
            size: –†–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
            
        Returns:
            –û–±'—î–∫—Ç —à—Ä–∏—Ñ—Ç—É PIL
        """
        if size not in self.font_cache:
            try:
                if self.available_font_path:
                    font = ImageFont.truetype(self.available_font_path, size)
                else:
                    font = ImageFont.load_default()
                self.font_cache[size] = font
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—É —Ä–æ–∑–º—ñ—Ä—É {size}: {e}")
                self.font_cache[size] = ImageFont.load_default()
        
        return self.font_cache[size]
    
    def add_radar_description(self, image: Image.Image, radar_data: Dict[str, Any]) -> Image.Image:
        """
        –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–° –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        
        Args:
            image: –í–∏—Ö—ñ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è PIL
            radar_data: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –æ–ø–∏—Å—É –†–õ–°
                       –û—á—ñ–∫—É–≤–∞–Ω—ñ –∫–ª—é—á—ñ: 'date', 'time', 'operator', 'station', 'mode' —Ç–æ—â–æ
            
        Returns:
            –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –Ω–∞–∫–ª–∞–¥–µ–Ω–∏–º –æ–ø–∏—Å–æ–º –†–õ–°
        """
        if not radar_data or not radar_data.get('enabled', False):
            return image
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        result_image = image.copy()
        draw = ImageDraw.Draw(result_image)
        
        image_width, image_height = result_image.size
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—ñ–≤ —Ç–∞–±–ª–∏—á–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π
        rect_width = int((image_width * self.RADAR_BOX_WIDTH_PERCENT) / 100)
        rect_height = int((image_height * self.RADAR_BOX_HEIGHT_PERCENT) / 100)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –≤—ñ–¥—Å—Ç—É–ø—ñ–≤
        padding_horizontal = int((rect_width * self.PADDING_HORIZONTAL_PERCENT) / 100)
        padding_vertical = int((rect_height * self.PADDING_VERTICAL_PERCENT) / 100)
        
        # –ü–æ–∑–∏—Ü—ñ—è —Ç–∞–±–ª–∏—á–∫–∏ - –ª—ñ–≤–∏–π –Ω–∏–∂–Ω—ñ–π –∫—É—Ç –∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º –≤—ñ–¥ –∫—Ä–∞—é
        margin_from_edge = int(image_width * self.MARGIN_FROM_EDGE_PERCENT / 100)
        rect_x = margin_from_edge
        rect_y = image_height - rect_height - margin_from_edge
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É —à—Ä–∏—Ñ—Ç—É –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ –¥–æ –≤–∏—Å–æ—Ç–∏ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
        font_size = max(8, int((rect_height * self.FONT_SIZE_PERCENT) / 100))
        font = self._get_font(font_size)
        
        print(f"üìè –ù–∞–∫–ª–∞–¥–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–°:")
        print(f"   –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {image_width}√ó{image_height}px")
        print(f"   –¢–∞–±–ª–∏—á–∫–∞: {rect_width}√ó{rect_height}px ({self.RADAR_BOX_WIDTH_PERCENT:.1f}% √ó {self.RADAR_BOX_HEIGHT_PERCENT:.1f}%)")
        print(f"   –ü–æ–∑–∏—Ü—ñ—è: ({rect_x}, {rect_y})")
        print(f"   –í—ñ–¥—Å—Ç—É–ø–∏: {padding_horizontal}√ó{padding_vertical}px")
        print(f"   –®—Ä–∏—Ñ—Ç: {font_size}px")
        
        # –ú–∞–ª—é–≤–∞–Ω–Ω—è –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑ –ø—Ä–æ–∑–æ—Ä–∏–º —Ñ–æ–Ω–æ–º
        border_width = max(2, int(rect_width * 0.008))  # –ü—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–∞ —Ç–æ–≤—â–∏–Ω–∞ —Ä–∞–º–∫–∏
        
        draw.rectangle(
            [rect_x, rect_y, rect_x + rect_width, rect_y + rect_height],
            fill=None,  # –ü—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω
            outline='black',
            width=border_width
        )
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –æ–ø–∏—Å—É
        self._add_radar_text(
            draw, radar_data, font,
            rect_x + padding_horizontal,
            rect_y + padding_vertical,
            rect_width - 2 * padding_horizontal,
            rect_height - 2 * padding_vertical
        )
        
        return result_image
    
    def _add_radar_text(self, draw: ImageDraw.Draw, radar_data: Dict[str, Any], 
                       font: ImageFont, text_x: int, text_y: int, 
                       text_width: int, text_height: int):
        """
        –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –æ–ø–∏—Å—É –†–õ–° –≤—Å–µ—Ä–µ–¥–∏–Ω—É –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
        
        Args:
            draw: –û–±'—î–∫—Ç ImageDraw –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è
            radar_data: –î–∞–Ω—ñ –æ–ø–∏—Å—É –†–õ–°
            font: –®—Ä–∏—Ñ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç—É
            text_x, text_y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–æ—á–∞—Ç–∫—É —Ç–µ–∫—Å—Ç—É
            text_width, text_height: –†–æ–∑–º—ñ—Ä–∏ –æ–±–ª–∞—Å—Ç—ñ –¥–ª—è —Ç–µ–∫—Å—Ç—É
        """
        try:
            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ —Ç–µ–∫—Å—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ legacy –≤–µ—Ä—Å—ñ—ó
            lines = self._format_radar_lines(radar_data)
            
            if not lines:
                return
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏—Å–æ—Ç–∏ —Ä—è–¥–∫–∞ (–æ–¥–∏–Ω–∞—Ä–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª —è–∫ –≤ Word)
            line_height = int(font.size * 1.2)  # 120% –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É —à—Ä–∏—Ñ—Ç—É
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ–º—ñ—â–∞—î—Ç—å—Å—è –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            total_text_height = len(lines) * line_height
            if total_text_height > text_height:
                # –Ø–∫—â–æ –Ω–µ –ø–æ–º—ñ—â–∞—î—Ç—å—Å—è, –∑–º–µ–Ω—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É
                scale_factor = text_height / total_text_height
                new_font_size = max(6, int(font.size * scale_factor * 0.9))
                font = self._get_font(new_font_size)
                line_height = int(font.size * 1.2)
            
            # –ú–∞–ª—é–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞
            current_y = text_y
            for line in lines:
                if current_y + line_height <= text_y + text_height:
                    draw.text(
                        (text_x, current_y),
                        line,
                        fill='black',
                        font=font
                    )
                    current_y += line_height
                else:
                    # –Ø–∫—â–æ —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–º—ñ—â–∞—î—Ç—å—Å—è, –ø—Ä–∏–ø–∏–Ω—è—î–º–æ
                    break
            
            print(f"   –î–æ–¥–∞–Ω–æ {len(lines)} —Ä—è–¥–∫—ñ–≤ —Ç–µ–∫—Å—Ç—É, –≤–∏—Å–æ—Ç–∞ —Ä—è–¥–∫–∞: {line_height}px")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –æ–ø–∏—Å—É –†–õ–°: {e}")
    
    def _format_radar_lines(self, radar_data: Dict[str, Any]) -> list:
        """
        –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ —Ç–µ–∫—Å—Ç—É –æ–ø–∏—Å—É –†–õ–° –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
        
        Args:
            radar_data: –î–∞–Ω—ñ –æ–ø–∏—Å—É –†–õ–°
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        """
        lines = []
        
        try:
            # –î–∞—Ç–∞ (–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ)
            if 'date' in radar_data and radar_data['date']:
                lines.append(f"–î–∞—Ç–∞: {radar_data['date']}")
            
            # –ß–∞—Å
            if 'time' in radar_data and radar_data['time']:
                lines.append(f"–ß–∞—Å: {radar_data['time']}")
            
            # –û–ø–µ—Ä–∞—Ç–æ—Ä
            if 'operator' in radar_data and radar_data['operator']:
                lines.append(f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {radar_data['operator']}")
            
            # –°—Ç–∞–Ω—Ü—ñ—è/–ü–æ—Å—Ç
            if 'station' in radar_data and radar_data['station']:
                lines.append(f"–°—Ç–∞–Ω—Ü—ñ—è: {radar_data['station']}")
            
            # –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
            if 'mode' in radar_data and radar_data['mode']:
                lines.append(f"–†–µ–∂–∏–º: {radar_data['mode']}")
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç—Ä–µ–±
            if 'frequency' in radar_data and radar_data['frequency']:
                lines.append(f"–ß–∞—Å—Ç–æ—Ç–∞: {radar_data['frequency']}")
            
            if 'weather' in radar_data and radar_data['weather']:
                lines.append(f"–ü–æ–≥–æ–¥–∞: {radar_data['weather']}")
            
            # –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤ –¥–ª—è –ø–æ–º—ñ—â–µ–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—á–∫—É
            if len(lines) > 8:  # –ú–∞–∫—Å–∏–º—É–º 8 —Ä—è–¥–∫—ñ–≤
                lines = lines[:8]
                lines[-1] = lines[-1][:50] + "..." if len(lines[-1]) > 50 else lines[-1]
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –æ–ø–∏—Å—É –†–õ–°: {e}")
            lines = ["–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è"]
        
        return lines
    
    def calculate_proportions(self, image_width: int, image_height: int) -> Dict[str, int]:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ—á–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ —ñ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –æ–ø–∏—Å—É –†–õ–°
        
        Args:
            image_width: –®–∏—Ä–∏–Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
            image_height: –í–∏—Å–æ—Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏
        """
        rect_width = int((image_width * self.RADAR_BOX_WIDTH_PERCENT) / 100)
        rect_height = int((image_height * self.RADAR_BOX_HEIGHT_PERCENT) / 100)
        
        padding_horizontal = int((rect_width * self.PADDING_HORIZONTAL_PERCENT) / 100)
        padding_vertical = int((rect_height * self.PADDING_VERTICAL_PERCENT) / 100)
        
        margin_from_edge = int(image_width * self.MARGIN_FROM_EDGE_PERCENT / 100)
        rect_x = margin_from_edge
        rect_y = image_height - rect_height - margin_from_edge
        
        font_size = max(8, int((rect_height * self.FONT_SIZE_PERCENT) / 100))
        
        return {
            'rect_width': rect_width,
            'rect_height': rect_height,
            'rect_x': rect_x,
            'rect_y': rect_y,
            'padding_horizontal': padding_horizontal,
            'padding_vertical': padding_vertical,
            'font_size': font_size,
            'text_area_width': rect_width - 2 * padding_horizontal,
            'text_area_height': rect_height - 2 * padding_vertical
        }


# ===============================
# –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø –ó IMAGE PROCESSOR
# ===============================

class ImageProcessorRadarExtension:
    """
    –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è ImageProcessor –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –æ–ø–∏—Å—É –†–õ–°
    –¶—ñ –º–µ—Ç–æ–¥–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –¥–æ core/image_processor.py
    """
    
    def __init__(self):
        self.radar_overlay = RadarDescriptionOverlay()
    
    def create_processed_image_with_radar(self, radar_data: Optional[Dict[str, Any]] = None) -> Image.Image:
        """
        –î–û–ü–û–í–ù–ï–ù–ò–ô –º–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º –†–õ–°
        –î–æ–¥–∞—Ç–∏ –¥–æ ImageProcessor
        
        Args:
            radar_data: –î–∞–Ω—ñ –æ–ø–∏—Å—É –†–õ–° (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            PIL Image –∑ –Ω–∞–Ω–µ—Å–µ–Ω–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ç–∞ –æ–ø–∏—Å–æ–º –†–õ–°
        """
        if not self.working_image:
            raise ValueError("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–µ –æ–±—Ä–æ–±–ª–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        processed_image = self.create_processed_image()
        
        # –î–æ–¥–∞—î–º–æ –æ–ø–∏—Å –†–õ–° —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if radar_data and radar_data.get('enabled', False):
            processed_image = self.radar_overlay.add_radar_description(processed_image, radar_data)
        
        return processed_image
    
    def preview_radar_overlay(self, radar_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–° –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        –î–æ–¥–∞—Ç–∏ –¥–æ ImageProcessor
        
        Args:
            radar_data: –î–∞–Ω—ñ –æ–ø–∏—Å—É –†–õ–°
            
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è
        """
        if not self.working_image:
            return {}
        
        image_width, image_height = self.working_image.size
        proportions = self.radar_overlay.calculate_proportions(image_width, image_height)
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ–∫—Å—Ç
        lines = self.radar_overlay._format_radar_lines(radar_data)
        proportions['text_lines'] = lines
        proportions['lines_count'] = len(lines)
        
        return proportions


# ===============================
# –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø –ó DATA PANEL
# ===============================

class DataPanelRadarExtension:
    """
    –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è DataPanel –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –æ–ø–∏—Å–æ–º –†–õ–°
    –¶—ñ –º–µ—Ç–æ–¥–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –¥–æ ui/panels/data_panel.py
    """
    
    def _create_radar_description_section(self, layout):
        """
        –î–û–ü–û–í–ù–ï–ù–ò–ô –º–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –æ–ø–∏—Å—É –†–õ–°
        –î–æ–¥–∞—Ç–∏ –¥–æ DataPanel._create_ui()
        """
        radar_group = QGroupBox()
        radar_layout = QVBoxLayout(radar_group)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –ø–µ—Ä–µ–º–∏–∫–∞—á
        header_layout = QHBoxLayout()
        
        self.radar_title_label = QLabel("–û–ø–∏—Å –†–õ–°")
        self.radar_title_label.setFont(QFont("Arial", 10, QFont.Bold))
        header_layout.addWidget(self.radar_title_label)
        
        header_layout.addStretch()
        
        self.radar_enabled_checkbox = QCheckBox("–í–∫–ª—é—á–∏—Ç–∏")
        self.radar_enabled_checkbox.stateChanged.connect(self._on_radar_enabled_changed)
        header_layout.addWidget(self.radar_enabled_checkbox)
        
        radar_layout.addLayout(header_layout)
        
        # –ü–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        self.radar_fields = {}
        
        # –î–∞—Ç–∞
        date_layout = QHBoxLayout()
        date_layout.addWidget(QLabel("–î–∞—Ç–∞:"))
        self.radar_fields['date'] = QDateEdit()
        self.radar_fields['date'].setDate(QDate.currentDate())
        self.radar_fields['date'].setDisplayFormat("dd.MM.yyyy")
        date_layout.addWidget(self.radar_fields['date'])
        radar_layout.addLayout(date_layout)
        
        # –ß–∞—Å
        time_layout = QHBoxLayout()
        time_layout.addWidget(QLabel("–ß–∞—Å:"))
        self.radar_fields['time'] = QLineEdit()
        self.radar_fields['time'].setPlaceholderText("14:30")
        time_layout.addWidget(self.radar_fields['time'])
        radar_layout.addLayout(time_layout)
        
        # –û–ø–µ—Ä–∞—Ç–æ—Ä
        operator_layout = QHBoxLayout()
        operator_layout.addWidget(QLabel("–û–ø–µ—Ä–∞—Ç–æ—Ä:"))
        self.radar_fields['operator'] = QLineEdit()
        self.radar_fields['operator'].setPlaceholderText("–Ü. –ü–µ—Ç—Ä–µ–Ω–∫–æ")
        operator_layout.addWidget(self.radar_fields['operator'])
        radar_layout.addLayout(operator_layout)
        
        # –°—Ç–∞–Ω—Ü—ñ—è
        station_layout = QHBoxLayout()
        station_layout.addWidget(QLabel("–°—Ç–∞–Ω—Ü—ñ—è:"))
        self.radar_fields['station'] = QLineEdit()
        self.radar_fields['station'].setPlaceholderText("–ü–æ—Å—Ç ‚Ññ1")
        station_layout.addWidget(self.radar_fields['station'])
        radar_layout.addLayout(station_layout)
        
        # –†–µ–∂–∏–º
        mode_layout = QHBoxLayout()
        mode_layout.addWidget(QLabel("–†–µ–∂–∏–º:"))
        self.radar_fields['mode'] = QComboBox()
        self.radar_fields['mode'].addItems([
            "–û–≥–ª—è–¥", "–°—É–ø—Ä–æ–≤–æ–¥–∂–µ–Ω–Ω—è", "–ü–æ—à—É–∫", 
            "–ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è", "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
        ])
        mode_layout.addWidget(self.radar_fields['mode'])
        radar_layout.addLayout(mode_layout)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
        self.radar_preview_btn = QPushButton("–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥")
        self.radar_preview_btn.clicked.connect(self._on_radar_preview)
        self.radar_preview_btn.setEnabled(False)
        radar_layout.addWidget(self.radar_preview_btn)
        
        # –°–ø–æ—á–∞—Ç–∫—É –≤—Å—ñ –ø–æ–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ
        self._set_radar_fields_enabled(False)
        
        layout.addWidget(radar_group)
    
    def _on_radar_enabled_changed(self, state):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –≤–∫–ª—é—á–µ–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–°"""
        enabled = state == Qt.Checked
        self._set_radar_fields_enabled(enabled)
        self.radar_preview_btn.setEnabled(enabled)
        
        # –°–∏–≥–Ω–∞–ª –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞–Ω—É
        if hasattr(self, 'radar_enabled_changed'):
            self.radar_enabled_changed.emit(enabled)
    
    def _set_radar_fields_enabled(self, enabled: bool):
        """–£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –æ–ø–∏—Å—É –†–õ–°"""
        for field in self.radar_fields.values():
            field.setEnabled(enabled)
    
    def _on_radar_preview(self):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –æ–ø–∏—Å—É –†–õ–°"""
        radar_data = self.get_radar_description()
        
        if hasattr(self, 'radar_preview_requested'):
            self.radar_preview_requested.emit(radar_data)
    
    def get_radar_description(self) -> Dict[str, Any]:
        """
        –î–û–ü–û–í–ù–ï–ù–ò–ô –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–°
        """
        if not self.radar_enabled_checkbox.isChecked():
            return {'enabled': False}
        
        radar_data = {'enabled': True}
        
        # –î–∞—Ç–∞
        if 'date' in self.radar_fields:
            radar_data['date'] = self.radar_fields['date'].date().toString('dd.MM.yyyy')
        
        # –Ü–Ω—à—ñ –ø–æ–ª—è
        for field_name, field_widget in self.radar_fields.items():
            if field_name == 'date':
                continue
            
            if hasattr(field_widget, 'text'):
                value = field_widget.text().strip()
                if value:
                    radar_data[field_name] = value
            elif hasattr(field_widget, 'currentText'):
                radar_data[field_name] = field_widget.currentText()
        
        return radar_data


# ===============================
# –¢–ï–°–¢–£–í–ê–ù–ù–Ø
# ===============================

if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–°
    import sys
    from datetime import datetime
    
    def test_radar_overlay():
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–°"""
        print("=== –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ù–ê–ö–õ–ê–î–ê–ù–ù–Ø –û–ü–ò–°–£ –†–õ–° ===")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        test_image = Image.new('RGB', (1200, 900), (240, 240, 240))
        draw = ImageDraw.Draw(test_image)
        
        # –ú–∞–ª—é—î–º–æ —Å—ñ—Ç–∫—É –¥–ª—è –Ω–∞–æ—á–Ω–æ—Å—Ç—ñ
        for i in range(0, 1200, 100):
            draw.line([(i, 0), (i, 900)], fill=(200, 200, 200))
        for i in range(0, 900, 100):
            draw.line([(0, i), (1200, i)], fill=(200, 200, 200))
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –æ–ø–∏—Å—É –†–õ–°
        radar_data = {
            'enabled': True,
            'date': datetime.now().strftime('%d.%m.%Y'),
            'time': datetime.now().strftime('%H:%M'),
            'operator': '–Ü. –ü–µ—Ç—Ä–µ–Ω–∫–æ',
            'station': '–ü–æ—Å—Ç ‚Ññ1',
            'mode': '–û–≥–ª—è–¥',
            'frequency': '9.5 –ì–ì—Ü',
            'weather': '–Ø—Å–Ω–æ'
        }
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è
        overlay = RadarDescriptionOverlay()
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π
        proportions = overlay.calculate_proportions(1200, 900)
        print("\nüìê –†–û–ó–†–ê–•–û–í–ê–ù–Ü –ü–†–û–ü–û–†–¶–Ü–á:")
        for key, value in proportions.items():
            print(f"   {key}: {value}")
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É –†–õ–° –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        result_image = overlay.add_radar_description(test_image, radar_data)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        output_path = "test_radar_overlay.png"
        result_image.save(output_path)
        print(f"\n‚úÖ –¢–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å
        print("\nüìè –¢–ï–°–¢–£–í–ê–ù–ù–Ø –†–Ü–ó–ù–ò–• –†–û–ó–ú–Ü–†–Ü–í:")
        test_sizes = [(800, 600), (1600, 1200), (2000, 1500)]
        
        for width, height in test_sizes:
            props = overlay.calculate_proportions(width, height)
            print(f"   {width}√ó{height}px ‚Üí —Ç–∞–±–ª–∏—á–∫–∞: {props['rect_width']}√ó{props['rect_height']}px")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_radar_overlay()
    
    print("\n" + "="*60)
    print("üìã –ú–û–î–£–õ–¨ –ù–ê–ö–õ–ê–î–ê–ù–ù–Ø –û–ü–ò–°–£ –†–õ–° –ì–û–¢–û–í–ò–ô!")
    print("="*60)
    print("\nüéØ –ö–õ–Æ–ß–û–í–Ü –û–°–û–ë–õ–ò–í–û–°–¢–Ü:")
    print("1. ‚úÖ –¢–æ—á–Ω—ñ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó: 28.60% √ó 19.54%")
    print("2. ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è: –ª—ñ–≤–∏–π –Ω–∏–∂–Ω—ñ–π –∫—É—Ç")
    print("3. ‚úÖ –ü—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω—ñ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏: 5.83% √ó 5.12%")
    print("4. ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —à—Ä–∏—Ñ—Ç—É")
    print("5. ‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ Arial Italic –∞–±–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç—É")
    print("6. ‚úÖ –ü—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω –∑ —á–æ—Ä–Ω–æ—é —Ä–∞–º–∫–æ—é")
    print("7. ‚úÖ –ö–µ—à—É–≤–∞–Ω–Ω—è —à—Ä–∏—Ñ—Ç—ñ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    print("8. ‚úÖ –ì–Ω—É—á–∫–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É")
    
    print("\nüîó –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø:")
    print("- –î–æ–¥–∞—Ç–∏ RadarDescriptionOverlay –≤ ImageProcessor")
    print("- –†–æ–∑—à–∏—Ä–∏—Ç–∏ DataPanel —Å–µ–∫—Ü—ñ—î—é –æ–ø–∏—Å—É –†–õ–°")
    print("- –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å")
    
    print("\n‚öôÔ∏è –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:")
    print("```python")
    print("overlay = RadarDescriptionOverlay()")
    print("radar_data = {'enabled': True, 'date': '25.07.2025', ...}")
    print("result_image = overlay.add_radar_description(image, radar_data)")
    print("```")